/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { holdoutsAddOverride } from "../funcs/holdoutsAddOverride.js";
import { holdoutsCreate } from "../funcs/holdoutsCreate.js";
import { holdoutsDelete } from "../funcs/holdoutsDelete.js";
import { holdoutsGet } from "../funcs/holdoutsGet.js";
import { holdoutsGetOverride } from "../funcs/holdoutsGetOverride.js";
import { holdoutsList } from "../funcs/holdoutsList.js";
import { holdoutsRemoveOverride } from "../funcs/holdoutsRemoveOverride.js";
import { holdoutsUpdate } from "../funcs/holdoutsUpdate.js";
import { holdoutsUpdateOverride } from "../funcs/holdoutsUpdateOverride.js";
import { holdoutsUpdatePartial } from "../funcs/holdoutsUpdatePartial.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Holdouts extends ClientSDK {
    /**
     * Create holdout
     */
    async create(
        request: operations.ConsoleV1HoldoutsControllerGenCreateRequest,
        options?: RequestOptions
    ): Promise<operations.ConsoleV1HoldoutsControllerGenCreateResponseBody> {
        return unwrapAsync(holdoutsCreate(this, request, options));
    }

    /**
     * List Holdouts
     */
    async list(
        request: operations.ConsoleV1HoldoutsControllerGenListRequest,
        options?: RequestOptions
    ): Promise<operations.ConsoleV1HoldoutsControllerGenListResponseBody> {
        return unwrapAsync(holdoutsList(this, request, options));
    }

    /**
     * Get holdout by id
     */
    async get(
        request: operations.ConsoleV1HoldoutsControllerGenReadRequest,
        options?: RequestOptions
    ): Promise<operations.ConsoleV1HoldoutsControllerGenReadResponseBody> {
        return unwrapAsync(holdoutsGet(this, request, options));
    }

    /**
     * Patch holdout by id
     */
    async updatePartial(
        request: operations.ConsoleV1HoldoutsControllerGenPartialUpdateRequest,
        options?: RequestOptions
    ): Promise<operations.ConsoleV1HoldoutsControllerGenPartialUpdateResponseBody> {
        return unwrapAsync(holdoutsUpdatePartial(this, request, options));
    }

    /**
     * Update holdout by id
     */
    async update(
        request: operations.ConsoleV1HoldoutsControllerGenFullUpdateRequest,
        options?: RequestOptions
    ): Promise<operations.ConsoleV1HoldoutsControllerGenFullUpdateResponseBody> {
        return unwrapAsync(holdoutsUpdate(this, request, options));
    }

    /**
     * Delete holdout by id
     */
    async delete(
        request: operations.ConsoleV1HoldoutsControllerGenRemoveRequest,
        options?: RequestOptions
    ): Promise<operations.ConsoleV1HoldoutsControllerGenRemoveResponseBody> {
        return unwrapAsync(holdoutsDelete(this, request, options));
    }

    /**
     * Read Holdout Overrides
     */
    async getOverride(
        request: operations.ConsoleV1HoldoutOverridesControllerGenReadRequest,
        options?: RequestOptions
    ): Promise<operations.ConsoleV1HoldoutOverridesControllerGenReadResponseBody> {
        return unwrapAsync(holdoutsGetOverride(this, request, options));
    }

    /**
     * Update Holdout Overrides
     */
    async updateOverride(
        request: operations.ConsoleV1HoldoutOverridesControllerGenUpdateRequest,
        options?: RequestOptions
    ): Promise<operations.ConsoleV1HoldoutOverridesControllerGenUpdateResponseBody> {
        return unwrapAsync(holdoutsUpdateOverride(this, request, options));
    }

    /**
     * Add Holdout Overrides
     */
    async addOverride(
        request: operations.ConsoleV1HoldoutOverridesControllerGenAddRequest,
        options?: RequestOptions
    ): Promise<operations.ConsoleV1HoldoutOverridesControllerGenAddResponseBody> {
        return unwrapAsync(holdoutsAddOverride(this, request, options));
    }

    /**
     * Remove Holdout Overrides
     *
     * @remarks
     * Remove selected ids from an id list
     */
    async removeOverride(
        request: operations.ConsoleV1HoldoutOverridesControllerGenRemoveRequest,
        options?: RequestOptions
    ): Promise<operations.ConsoleV1HoldoutOverridesControllerGenRemoveResponseBody> {
        return unwrapAsync(holdoutsRemoveOverride(this, request, options));
    }
}

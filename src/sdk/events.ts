/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { eventsGet } from "../funcs/eventsGet.js";
import { eventsGetMetrics } from "../funcs/eventsGetMetrics.js";
import { eventsList } from "../funcs/eventsList.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Events extends ClientSDK {
    /**
     * List Events
     */
    async list(
        request: operations.ConsoleV1EventsControllerGenListRequest,
        options?: RequestOptions
    ): Promise<operations.ConsoleV1EventsControllerGenListResponseBody> {
        return unwrapAsync(eventsList(this, request, options));
    }

    /**
     * Get metrics using event name
     */
    async getMetrics(
        request: operations.ConsoleV1EventsControllerGenListMetricsByEventRequest,
        options?: RequestOptions
    ): Promise<operations.ConsoleV1EventsControllerGenListMetricsByEventResponseBody> {
        return unwrapAsync(eventsGetMetrics(this, request, options));
    }

    /**
     * Get specific events
     */
    async get(
        request: operations.ConsoleV1EventsControllerGenListSpecificEventRequest,
        options?: RequestOptions
    ): Promise<operations.ConsoleV1EventsControllerGenListSpecificEventResponseBody> {
        return unwrapAsync(eventsGet(this, request, options));
    }
}

/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { ClientSDK } from "../lib/sdks.js";
import { Autotunes } from "./autotunes.js";
import { Configs } from "./configs.js";
import { DynamicConfigs } from "./dynamicconfigs.js";
import { Events } from "./events.js";
import { Experiments } from "./experiments.js";
import { ExperimentsWarehouseNative } from "./experimentswarehousenative.js";
import { Gates } from "./gates.js";
import { Holdouts } from "./holdouts.js";
import { Ingestions } from "./ingestions.js";
import { Keys } from "./keys.js";
import { Layers } from "./layers.js";
import { Metrics } from "./metrics.js";
import { MetricSources } from "./metricsources.js";
import { MetricValues } from "./metricvalues.js";
import { Reports } from "./reports.js";
import { Segments } from "./segments.js";
import { Tags } from "./tags.js";
import { TargetApps } from "./targetapps.js";
import { Teams } from "./teams.js";
import { Usage } from "./usage.js";
import { Users } from "./users.js";

export class Statsig extends ClientSDK {
    private _dynamicConfigs?: DynamicConfigs;
    get dynamicConfigs(): DynamicConfigs {
        return (this._dynamicConfigs ??= new DynamicConfigs(this.options$));
    }

    private _holdouts?: Holdouts;
    get holdouts(): Holdouts {
        return (this._holdouts ??= new Holdouts(this.options$));
    }

    private _gates?: Gates;
    get gates(): Gates {
        return (this._gates ??= new Gates(this.options$));
    }

    private _experiments?: Experiments;
    get experiments(): Experiments {
        return (this._experiments ??= new Experiments(this.options$));
    }

    private _experimentsWarehouseNative?: ExperimentsWarehouseNative;
    get experimentsWarehouseNative(): ExperimentsWarehouseNative {
        return (this._experimentsWarehouseNative ??= new ExperimentsWarehouseNative(this.options$));
    }

    private _segments?: Segments;
    get segments(): Segments {
        return (this._segments ??= new Segments(this.options$));
    }

    private _events?: Events;
    get events(): Events {
        return (this._events ??= new Events(this.options$));
    }

    private _autotunes?: Autotunes;
    get autotunes(): Autotunes {
        return (this._autotunes ??= new Autotunes(this.options$));
    }

    private _layers?: Layers;
    get layers(): Layers {
        return (this._layers ??= new Layers(this.options$));
    }

    private _metrics?: Metrics;
    get metrics(): Metrics {
        return (this._metrics ??= new Metrics(this.options$));
    }

    private _metricSources?: MetricSources;
    get metricSources(): MetricSources {
        return (this._metricSources ??= new MetricSources(this.options$));
    }

    private _metricValues?: MetricValues;
    get metricValues(): MetricValues {
        return (this._metricValues ??= new MetricValues(this.options$));
    }

    private _users?: Users;
    get users(): Users {
        return (this._users ??= new Users(this.options$));
    }

    private _teams?: Teams;
    get teams(): Teams {
        return (this._teams ??= new Teams(this.options$));
    }

    private _tags?: Tags;
    get tags(): Tags {
        return (this._tags ??= new Tags(this.options$));
    }

    private _reports?: Reports;
    get reports(): Reports {
        return (this._reports ??= new Reports(this.options$));
    }

    private _usage?: Usage;
    get usage(): Usage {
        return (this._usage ??= new Usage(this.options$));
    }

    private _targetApps?: TargetApps;
    get targetApps(): TargetApps {
        return (this._targetApps ??= new TargetApps(this.options$));
    }

    private _ingestions?: Ingestions;
    get ingestions(): Ingestions {
        return (this._ingestions ??= new Ingestions(this.options$));
    }

    private _configs?: Configs;
    get configs(): Configs {
        return (this._configs ??= new Configs(this.options$));
    }

    private _keys?: Keys;
    get keys(): Keys {
        return (this._keys ??= new Keys(this.options$));
    }
}

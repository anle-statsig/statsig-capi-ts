/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { autotunesCreate } from "../funcs/autotunesCreate.js";
import { autotunesDelete } from "../funcs/autotunesDelete.js";
import { autotunesFullUpdate } from "../funcs/autotunesFullUpdate.js";
import { autotunesList } from "../funcs/autotunesList.js";
import { autotunesMakeDecision } from "../funcs/autotunesMakeDecision.js";
import { autotunesPartialUpdate } from "../funcs/autotunesPartialUpdate.js";
import { autotunesRead } from "../funcs/autotunesRead.js";
import { autotunesReset } from "../funcs/autotunesReset.js";
import { autotunesStart } from "../funcs/autotunesStart.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Autotunes extends ClientSDK {
    /**
     * Create Autotune
     */
    async create(
        request: operations.ConsoleV1AutotunesControllerGenCreateRequest,
        options?: RequestOptions
    ): Promise<operations.ConsoleV1AutotunesControllerGenCreateResponseBody> {
        return unwrapAsync(autotunesCreate(this, request, options));
    }

    /**
     * List Autotune
     */
    async list(
        request: operations.ConsoleV1AutotunesControllerGenListRequest,
        options?: RequestOptions
    ): Promise<operations.ConsoleV1AutotunesControllerGenListResponseBody> {
        return unwrapAsync(autotunesList(this, request, options));
    }

    /**
     * Read Autotune
     */
    async read(
        request: operations.ConsoleV1AutotunesControllerGenReadRequest,
        options?: RequestOptions
    ): Promise<operations.ConsoleV1AutotunesControllerGenReadResponseBody> {
        return unwrapAsync(autotunesRead(this, request, options));
    }

    /**
     * Partially Update Autotune
     *
     * @remarks
     * Update selected properties of the experiment
     */
    async partialUpdate(
        request: operations.ConsoleV1AutotunesControllerGenPartialUpdateRequest,
        options?: RequestOptions
    ): Promise<operations.ConsoleV1AutotunesControllerGenPartialUpdateResponseBody> {
        return unwrapAsync(autotunesPartialUpdate(this, request, options));
    }

    /**
     * Fully Update Autotune
     *
     * @remarks
     * Update all properties of the experiment
     */
    async fullUpdate(
        request: operations.ConsoleV1AutotunesControllerGenFullUpdateRequest,
        options?: RequestOptions
    ): Promise<operations.ConsoleV1AutotunesControllerGenFullUpdateResponseBody> {
        return unwrapAsync(autotunesFullUpdate(this, request, options));
    }

    /**
     * Delete Autotune
     */
    async delete(
        request: operations.ConsoleV1AutotunesControllerGenRemoveRequest,
        options?: RequestOptions
    ): Promise<operations.ConsoleV1AutotunesControllerGenRemoveResponseBody> {
        return unwrapAsync(autotunesDelete(this, request, options));
    }

    /**
     * Start Autotune Experiment
     */
    async start(
        request: operations.ConsoleV1AutotunesControllerGenStartRequest,
        options?: RequestOptions
    ): Promise<operations.ConsoleV1AutotunesControllerGenStartResponseBody> {
        return unwrapAsync(autotunesStart(this, request, options));
    }

    /**
     * Finish Experiment Early
     */
    async makeDecision(
        request: operations.ConsoleV1AutotunesControllerGenMakeDecisionRequest,
        options?: RequestOptions
    ): Promise<operations.ConsoleV1AutotunesControllerGenMakeDecisionResponseBody> {
        return unwrapAsync(autotunesMakeDecision(this, request, options));
    }

    /**
     * Reset Experiment
     */
    async reset(
        request: operations.ConsoleV1AutotunesControllerGenResetRequest,
        options?: RequestOptions
    ): Promise<operations.ConsoleV1AutotunesControllerGenResetResponseBody> {
        return unwrapAsync(autotunesReset(this, request, options));
    }
}

/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { metricSourcesCreate } from "../funcs/metricSourcesCreate.js";
import { metricSourcesDelete } from "../funcs/metricSourcesDelete.js";
import { metricSourcesGet } from "../funcs/metricSourcesGet.js";
import { metricSourcesList } from "../funcs/metricSourcesList.js";
import { metricSourcesUpdate } from "../funcs/metricSourcesUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class MetricSources extends ClientSDK {
    /**
     * Create Metric Source
     */
    async create(
        request: operations.ConsoleV1MetricsControllerGenCreateMetricSourceRequest,
        options?: RequestOptions
    ): Promise<operations.ConsoleV1MetricsControllerGenCreateMetricSourceResponseBody> {
        return unwrapAsync(metricSourcesCreate(this, request, options));
    }

    /**
     * Read Metric Source
     */
    async get(
        request: operations.ConsoleV1MetricsControllerGenReadMetricSourceRequest,
        options?: RequestOptions
    ): Promise<operations.ConsoleV1MetricsControllerGenReadMetricSourceResponseBody> {
        return unwrapAsync(metricSourcesGet(this, request, options));
    }

    /**
     * Delete Metric Source
     */
    async delete(
        request: operations.ConsoleV1MetricsControllerGenDeleteMetricSourceRequest,
        options?: RequestOptions
    ): Promise<operations.ConsoleV1MetricsControllerGenDeleteMetricSourceResponseBody> {
        return unwrapAsync(metricSourcesDelete(this, request, options));
    }

    /**
     * Update Metric Source
     */
    async update(
        request: operations.ConsoleV1MetricsControllerUpdateMetricSourceRequest,
        options?: RequestOptions
    ): Promise<operations.ConsoleV1MetricsControllerUpdateMetricSourceResponseBody> {
        return unwrapAsync(metricSourcesUpdate(this, request, options));
    }

    /**
     * List metric source
     */
    async list(
        request: operations.ConsoleV1MetricsControllerGenListMetricSourcesRequest,
        options?: RequestOptions
    ): Promise<operations.ConsoleV1MetricsControllerGenListMetricSourcesResponseBody> {
        return unwrapAsync(metricSourcesList(this, request, options));
    }
}

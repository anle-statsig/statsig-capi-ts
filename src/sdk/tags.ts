/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { tagsCreate } from "../funcs/tagsCreate.js";
import { tagsDelete } from "../funcs/tagsDelete.js";
import { tagsGet } from "../funcs/tagsGet.js";
import { tagsList } from "../funcs/tagsList.js";
import { tagsUpdate } from "../funcs/tagsUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Tags extends ClientSDK {
    /**
     * Read Tag
     */
    async get(
        request: operations.ConsoleV1TagsControllerGenReadRequest,
        options?: RequestOptions
    ): Promise<operations.ConsoleV1TagsControllerGenReadResponseBody> {
        return unwrapAsync(tagsGet(this, request, options));
    }

    /**
     * Update Tag
     */
    async update(
        request: operations.ConsoleV1TagsControllerGenUpdateRequest,
        options?: RequestOptions
    ): Promise<operations.ConsoleV1TagsControllerGenUpdateResponseBody> {
        return unwrapAsync(tagsUpdate(this, request, options));
    }

    /**
     * Delete Tag
     */
    async delete(
        request: operations.ConsoleV1TagsControllerGenRemoveRequest,
        options?: RequestOptions
    ): Promise<operations.ConsoleV1TagsControllerGenRemoveResponseBody> {
        return unwrapAsync(tagsDelete(this, request, options));
    }

    /**
     * List Tags
     */
    async list(
        request: operations.ConsoleV1TagsControllerGenListRequest,
        options?: RequestOptions
    ): Promise<operations.ConsoleV1TagsControllerGenListResponseBody> {
        return unwrapAsync(tagsList(this, request, options));
    }

    /**
     * Create Tag
     */
    async create(
        request: operations.ConsoleV1TagsControllerGenCreateRequest,
        options?: RequestOptions
    ): Promise<operations.ConsoleV1TagsControllerGenCreateResponseBody> {
        return unwrapAsync(tagsCreate(this, request, options));
    }
}

/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { gatesAddOverride } from "../funcs/gatesAddOverride.js";
import { gatesAddRule } from "../funcs/gatesAddRule.js";
import { gatesAddRules } from "../funcs/gatesAddRules.js";
import { gatesArchive } from "../funcs/gatesArchive.js";
import { gatesCreate } from "../funcs/gatesCreate.js";
import { gatesDelete } from "../funcs/gatesDelete.js";
import { gatesDeleteRule } from "../funcs/gatesDeleteRule.js";
import { gatesDisable } from "../funcs/gatesDisable.js";
import { gatesEnable } from "../funcs/gatesEnable.js";
import { gatesGet } from "../funcs/gatesGet.js";
import { gatesGetOverride } from "../funcs/gatesGetOverride.js";
import { gatesGetRules } from "../funcs/gatesGetRules.js";
import { gatesLaunch } from "../funcs/gatesLaunch.js";
import { gatesList } from "../funcs/gatesList.js";
import { gatesLoadPulse } from "../funcs/gatesLoadPulse.js";
import { gatesRemoveOverride } from "../funcs/gatesRemoveOverride.js";
import { gatesUpdate } from "../funcs/gatesUpdate.js";
import { gatesUpdateOverride } from "../funcs/gatesUpdateOverride.js";
import { gatesUpdatePartial } from "../funcs/gatesUpdatePartial.js";
import { gatesUpdateRule } from "../funcs/gatesUpdateRule.js";
import { gatesUpdateRules } from "../funcs/gatesUpdateRules.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Gates extends ClientSDK {
    /**
     * Create Gate
     */
    async create(
        request: operations.ConsoleV1GatesControllerGenCreateRequest,
        options?: RequestOptions
    ): Promise<operations.ConsoleV1GatesControllerGenCreateResponseBody> {
        return unwrapAsync(gatesCreate(this, request, options));
    }

    /**
     * List Gates
     */
    async list(
        request: operations.ConsoleV1GatesControllerGenListRequest,
        options?: RequestOptions
    ): Promise<operations.ConsoleV1GatesControllerGenListResponseBody> {
        return unwrapAsync(gatesList(this, request, options));
    }

    /**
     * Read Gate
     */
    async get(
        request: operations.ConsoleV1GatesControllerGenReadRequest,
        options?: RequestOptions
    ): Promise<operations.ConsoleV1GatesControllerGenReadResponseBody> {
        return unwrapAsync(gatesGet(this, request, options));
    }

    /**
     * Partially Update Gates
     */
    async updatePartial(
        request: operations.ConsoleV1GatesControllerGenPartialUpdateRequest,
        options?: RequestOptions
    ): Promise<operations.ConsoleV1GatesControllerGenPartialUpdateResponseBody> {
        return unwrapAsync(gatesUpdatePartial(this, request, options));
    }

    /**
     * Fully Update Gates
     */
    async update(
        request: operations.ConsoleV1GatesControllerGenFullUpdateRequest,
        options?: RequestOptions
    ): Promise<operations.ConsoleV1GatesControllerGenFullUpdateResponseBody> {
        return unwrapAsync(gatesUpdate(this, request, options));
    }

    /**
     * Delete Gates
     */
    async delete(
        request: operations.ConsoleV1GatesControllerGenRemoveRequest,
        options?: RequestOptions
    ): Promise<operations.ConsoleV1GatesControllerGenRemoveResponseBody> {
        return unwrapAsync(gatesDelete(this, request, options));
    }

    /**
     * Read Gate Rules
     */
    async getRules(
        request: operations.ConsoleV1GatesControllerGenReadRulesRequest,
        options?: RequestOptions
    ): Promise<operations.ConsoleV1GatesControllerGenReadRulesResponseBody> {
        return unwrapAsync(gatesGetRules(this, request, options));
    }

    /**
     * Update list of Gate Rules
     */
    async updateRules(
        request: operations.ConsoleV1GatesControllerGenMultiRuleUpdateRequest,
        options?: RequestOptions
    ): Promise<operations.ConsoleV1GatesControllerGenMultiRuleUpdateResponseBody> {
        return unwrapAsync(gatesUpdateRules(this, request, options));
    }

    /**
     * Add Multiple Gate Rule
     */
    async addRules(
        request: operations.ConsoleV1GatesControllerGenMultiRuleAddRequest,
        options?: RequestOptions
    ): Promise<operations.ConsoleV1GatesControllerGenMultiRuleAddResponseBody> {
        return unwrapAsync(gatesAddRules(this, request, options));
    }

    /**
     * Update Gate Rules
     *
     * @remarks
     * Update all given rules. It does NOT create or delete if you add more rules and remove rules in the rules object.
     */
    async updateRule(
        request: operations.ConsoleV1GatesControllerGenRuleUpdateRequest,
        options?: RequestOptions
    ): Promise<operations.ConsoleV1GatesControllerGenRuleUpdateResponseBody> {
        return unwrapAsync(gatesUpdateRule(this, request, options));
    }

    /**
     * Delete Gate Rules
     */
    async deleteRule(
        request: operations.ConsoleV1GatesControllerGenRuleDeleteRequest,
        options?: RequestOptions
    ): Promise<operations.ConsoleV1GatesControllerGenRuleDeleteResponseBody> {
        return unwrapAsync(gatesDeleteRule(this, request, options));
    }

    /**
     * Add Gate Rule
     */
    async addRule(
        request: operations.ConsoleV1GatesControllerGenRuleAddRequest,
        options?: RequestOptions
    ): Promise<operations.ConsoleV1GatesControllerGenRuleAddResponseBody> {
        return unwrapAsync(gatesAddRule(this, request, options));
    }

    /**
     * Launch Gate
     */
    async launch(
        request: operations.ConsoleV1GatesControllerGenLaunchRequest,
        options?: RequestOptions
    ): Promise<operations.ConsoleV1GatesControllerGenLaunchResponseBody> {
        return unwrapAsync(gatesLaunch(this, request, options));
    }

    /**
     * Disable Gate
     */
    async disable(
        request: operations.ConsoleV1GatesControllerGenDisableRequest,
        options?: RequestOptions
    ): Promise<operations.ConsoleV1GatesControllerGenDisableResponseBody> {
        return unwrapAsync(gatesDisable(this, request, options));
    }

    /**
     * Enable Gate
     */
    async enable(
        request: operations.ConsoleV1GatesControllerGenEnableRequest,
        options?: RequestOptions
    ): Promise<operations.ConsoleV1GatesControllerGenEnableResponseBody> {
        return unwrapAsync(gatesEnable(this, request, options));
    }

    /**
     * Archive Gate
     */
    async archive(
        request: operations.ConsoleV1GatesControllerGenArchiveRequest,
        options?: RequestOptions
    ): Promise<operations.ConsoleV1GatesControllerGenArchiveResponseBody> {
        return unwrapAsync(gatesArchive(this, request, options));
    }

    /**
     * Load Pulse Gate
     */
    async loadPulse(
        request: operations.ConsoleV1GatesControllerGenLoadPulseRequest,
        options?: RequestOptions
    ): Promise<operations.ConsoleV1GatesControllerGenLoadPulseResponseBody> {
        return unwrapAsync(gatesLoadPulse(this, request, options));
    }

    /**
     * Get Gate Override
     */
    async getOverride(
        request: operations.ConsoleV1GateOverridesControllerGenReadRequest,
        options?: RequestOptions
    ): Promise<operations.ConsoleV1GateOverridesControllerGenReadResponseBody> {
        return unwrapAsync(gatesGetOverride(this, request, options));
    }

    /**
     * Update Gate Overrides
     */
    async updateOverride(
        request: operations.ConsoleV1GateOverridesControllerGenUpdateRequest,
        options?: RequestOptions
    ): Promise<operations.ConsoleV1GateOverridesControllerGenUpdateResponseBody> {
        return unwrapAsync(gatesUpdateOverride(this, request, options));
    }

    /**
     * Add Gate Overrides
     */
    async addOverride(
        request: operations.ConsoleV1GateOverridesControllerGenAddRequest,
        options?: RequestOptions
    ): Promise<operations.ConsoleV1GateOverridesControllerGenAddResponseBody> {
        return unwrapAsync(gatesAddOverride(this, request, options));
    }

    /**
     * Delete Gate Overrides
     */
    async removeOverride(
        request: operations.ConsoleV1GateOverridesControllerGenRemoveRequest,
        options?: RequestOptions
    ): Promise<operations.ConsoleV1GateOverridesControllerGenRemoveResponseBody> {
        return unwrapAsync(gatesRemoveOverride(this, request, options));
    }
}

/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { ingestionsBackfill } from "../funcs/ingestionsBackfill.js";
import { ingestionsCreateConnectionDatabricks } from "../funcs/ingestionsCreateConnectionDatabricks.js";
import { ingestionsCreateSource } from "../funcs/ingestionsCreateSource.js";
import { ingestionsDeleteSource } from "../funcs/ingestionsDeleteSource.js";
import { ingestionsGet } from "../funcs/ingestionsGet.js";
import { ingestionsGetEventCount } from "../funcs/ingestionsGetEventCount.js";
import { ingestionsGetEventDeltaLedger } from "../funcs/ingestionsGetEventDeltaLedger.js";
import { ingestionsGetRun } from "../funcs/ingestionsGetRun.js";
import { ingestionsGetSchedule } from "../funcs/ingestionsGetSchedule.js";
import { ingestionsListRuns } from "../funcs/ingestionsListRuns.js";
import { ingestionsUpdateSchedule } from "../funcs/ingestionsUpdateSchedule.js";
import { ingestionsUpdateSource } from "../funcs/ingestionsUpdateSource.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Ingestions extends ClientSDK {
    /**
     * Read Ingestion Run
     */
    async getRun(
        request: operations.ConsoleV1IngestionControllerGenIngestionRunRequest,
        options?: RequestOptions
    ): Promise<operations.ConsoleV1IngestionControllerGenIngestionRunResponseBody> {
        return unwrapAsync(ingestionsGetRun(this, request, options));
    }

    /**
     * List Ingestion Runs
     */
    async listRuns(
        request: operations.ConsoleV1IngestionControllerGenIngestionRunsRequest,
        options?: RequestOptions
    ): Promise<operations.ConsoleV1IngestionControllerGenIngestionRunsResponseBody> {
        return unwrapAsync(ingestionsListRuns(this, request, options));
    }

    /**
     * Backfill Ingestion
     */
    async backfill(
        request: operations.ConsoleV1IngestionControllerGenBackfillIngestionRequest,
        options?: RequestOptions
    ): Promise<operations.ConsoleV1IngestionControllerGenBackfillIngestionResponseBody> {
        return unwrapAsync(ingestionsBackfill(this, request, options));
    }

    /**
     * Read Ingestion Schedule
     */
    async getSchedule(
        request: operations.ConsoleV1IngestionControllerGenReadIngestionScheduleRequest,
        options?: RequestOptions
    ): Promise<operations.ConsoleV1IngestionControllerGenReadIngestionScheduleResponseBody> {
        return unwrapAsync(ingestionsGetSchedule(this, request, options));
    }

    /**
     * Update Ingestion Schedule
     */
    async updateSchedule(
        request: operations.ConsoleV1IngestionControllerGenUpdateIngestionScheduleRequest,
        options?: RequestOptions
    ): Promise<operations.ConsoleV1IngestionControllerGenUpdateIngestionScheduleResponseBody> {
        return unwrapAsync(ingestionsUpdateSchedule(this, request, options));
    }

    /**
     * Read Ingestion
     */
    async get(
        request: operations.ConsoleV1IngestionControllerGenReadIngestionRequest,
        options?: RequestOptions
    ): Promise<operations.ConsoleV1IngestionControllerGenReadIngestionResponseBody> {
        return unwrapAsync(ingestionsGet(this, request, options));
    }

    /**
     * Create Ingestion Source
     */
    async createSource(
        request: operations.ConsoleV1IngestionControllerGenCreateIngestionSourceRequest,
        options?: RequestOptions
    ): Promise<operations.ConsoleV1IngestionControllerGenCreateIngestionSourceResponseBody> {
        return unwrapAsync(ingestionsCreateSource(this, request, options));
    }

    /**
     * Update Ingestion Source
     */
    async updateSource(
        request: operations.ConsoleV1IngestionControllerGenUpdateIngestionRequest,
        options?: RequestOptions
    ): Promise<operations.ConsoleV1IngestionControllerGenUpdateIngestionResponseBody> {
        return unwrapAsync(ingestionsUpdateSource(this, request, options));
    }

    /**
     * Delete Ingestion Source
     */
    async deleteSource(
        request: operations.ConsoleV1IngestionControllerGenDeleteIngestionSourceRequest,
        options?: RequestOptions
    ): Promise<operations.ConsoleV1IngestionControllerGenDeleteIngestionSourceResponseBody> {
        return unwrapAsync(ingestionsDeleteSource(this, request, options));
    }

    /**
     * Create Ingestion Databricks
     */
    async createConnectionDatabricks(
        request: operations.ConsoleV1IngestionConnectionControllerGenCreateIngestionDatabricksRequest,
        options?: RequestOptions
    ): Promise<operations.ConsoleV1IngestionConnectionControllerGenCreateIngestionDatabricksResponseBody> {
        return unwrapAsync(ingestionsCreateConnectionDatabricks(this, request, options));
    }

    /**
     * Get Ingestion Event Count
     */
    async getEventCount(
        request: operations.ConsoleV1IngestionEventsControllerGenIngestionEventCountRequest,
        options?: RequestOptions
    ): Promise<operations.ConsoleV1IngestionEventsControllerGenIngestionEventCountResponseBody> {
        return unwrapAsync(ingestionsGetEventCount(this, request, options));
    }

    /**
     * Get Ingestion Event Delta Ledger
     */
    async getEventDeltaLedger(
        request: operations.ConsoleV1IngestionEventsControllerGenIngestionDeltaLedgerRequest,
        options?: RequestOptions
    ): Promise<operations.ConsoleV1IngestionEventsControllerGenIngestionDeltaLedgerResponseBody> {
        return unwrapAsync(ingestionsGetEventDeltaLedger(this, request, options));
    }
}

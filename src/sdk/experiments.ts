/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { experimentsAbandon } from "../funcs/experimentsAbandon.js";
import { experimentsArchive } from "../funcs/experimentsArchive.js";
import { experimentsCreate } from "../funcs/experimentsCreate.js";
import { experimentsDelete } from "../funcs/experimentsDelete.js";
import { experimentsDeleteAssignmentSource } from "../funcs/experimentsDeleteAssignmentSource.js";
import { experimentsFinishEarly } from "../funcs/experimentsFinishEarly.js";
import { experimentsGet } from "../funcs/experimentsGet.js";
import { experimentsGetExposureCount } from "../funcs/experimentsGetExposureCount.js";
import { experimentsGetOverrides } from "../funcs/experimentsGetOverrides.js";
import { experimentsList } from "../funcs/experimentsList.js";
import { experimentsPartialUpdateOverrides } from "../funcs/experimentsPartialUpdateOverrides.js";
import { experimentsReset } from "../funcs/experimentsReset.js";
import { experimentsStart } from "../funcs/experimentsStart.js";
import { experimentsUnarchive } from "../funcs/experimentsUnarchive.js";
import { experimentsUpdateAssignmentSource } from "../funcs/experimentsUpdateAssignmentSource.js";
import { experimentsUpdateFull } from "../funcs/experimentsUpdateFull.js";
import { experimentsUpdateOverrides } from "../funcs/experimentsUpdateOverrides.js";
import { experimentsUpdatePartial } from "../funcs/experimentsUpdatePartial.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Experiments extends ClientSDK {
    /**
     * Create Experiment
     */
    async create(
        request: operations.ConsoleV1ExperimentsControllerGenCreateRequest,
        options?: RequestOptions
    ): Promise<operations.ConsoleV1ExperimentsControllerGenCreateResponseBody> {
        return unwrapAsync(experimentsCreate(this, request, options));
    }

    /**
     * List Experiments
     */
    async list(
        request: operations.ConsoleV1ExperimentsControllerGenListRequest,
        options?: RequestOptions
    ): Promise<operations.ConsoleV1ExperimentsControllerGenListResponseBody> {
        return unwrapAsync(experimentsList(this, request, options));
    }

    /**
     * Get Experiment
     */
    async get(
        request: operations.ConsoleV1ExperimentsControllerGenReadRequest,
        options?: RequestOptions
    ): Promise<operations.ConsoleV1ExperimentsControllerGenReadResponseBody> {
        return unwrapAsync(experimentsGet(this, request, options));
    }

    /**
     * Partially Update Experiment
     */
    async updatePartial(
        request: operations.ConsoleV1ExperimentsControllerGenPartialUpdateRequest,
        options?: RequestOptions
    ): Promise<operations.ConsoleV1ExperimentsControllerGenPartialUpdateResponseBody> {
        return unwrapAsync(experimentsUpdatePartial(this, request, options));
    }

    /**
     * Fully Update Experiment
     */
    async updateFull(
        request: operations.ConsoleV1ExperimentsControllerGenFullUpdateRequest,
        options?: RequestOptions
    ): Promise<operations.ConsoleV1ExperimentsControllerGenFullUpdateResponseBody> {
        return unwrapAsync(experimentsUpdateFull(this, request, options));
    }

    /**
     * Deleted Experiment
     */
    async delete(
        request: operations.ConsoleV1ExperimentsControllerGenRemoveRequest,
        options?: RequestOptions
    ): Promise<operations.ConsoleV1ExperimentsControllerGenRemoveResponseBody> {
        return unwrapAsync(experimentsDelete(this, request, options));
    }

    /**
     * Start Experiment
     */
    async start(
        request: operations.ConsoleV1ExperimentsControllerGenStartRequest,
        options?: RequestOptions
    ): Promise<operations.ConsoleV1ExperimentsControllerGenStartResponseBody> {
        return unwrapAsync(experimentsStart(this, request, options));
    }

    /**
     * Finish Experiment Early
     */
    async finishEarly(
        request: operations.ConsoleV1ExperimentsControllerGenMakeDecisionRequest,
        options?: RequestOptions
    ): Promise<operations.ConsoleV1ExperimentsControllerGenMakeDecisionResponseBody> {
        return unwrapAsync(experimentsFinishEarly(this, request, options));
    }

    /**
     * Reset Experiment
     */
    async reset(
        request: operations.ConsoleV1ExperimentsControllerGenResetRequest,
        options?: RequestOptions
    ): Promise<operations.ConsoleV1ExperimentsControllerGenResetResponseBody> {
        return unwrapAsync(experimentsReset(this, request, options));
    }

    /**
     * Abandon Experiment
     */
    async abandon(
        request: operations.ConsoleV1ExperimentsControllerGenAbandonRequest,
        options?: RequestOptions
    ): Promise<operations.ConsoleV1ExperimentsControllerGenAbandonResponseBody> {
        return unwrapAsync(experimentsAbandon(this, request, options));
    }

    /**
     * Archive Experiment
     */
    async archive(
        request: operations.ConsoleV1ExperimentsControllerGenArchiveRequest,
        options?: RequestOptions
    ): Promise<operations.ConsoleV1ExperimentsControllerGenArchiveResponseBody> {
        return unwrapAsync(experimentsArchive(this, request, options));
    }

    /**
     * Unarchive Experiment
     */
    async unarchive(
        request: operations.ConsoleV1ExperimentsControllerGenUnarchiveRequest,
        options?: RequestOptions
    ): Promise<operations.ConsoleV1ExperimentsControllerGenUnarchiveResponseBody> {
        return unwrapAsync(experimentsUnarchive(this, request, options));
    }

    /**
     * Post Assignment Source
     */
    async updateAssignmentSource(
        request: operations.ConsoleV1ExperimentsControllerGenUpdateAssignmentSourceQueryRequest,
        options?: RequestOptions
    ): Promise<operations.ConsoleV1ExperimentsControllerGenUpdateAssignmentSourceQueryResponseBody> {
        return unwrapAsync(experimentsUpdateAssignmentSource(this, request, options));
    }

    /**
     * Delete Assignment Source
     */
    async deleteAssignmentSource(
        request: operations.ConsoleV1ExperimentsControllerGenRemoveAssignmentSourceRequest,
        options?: RequestOptions
    ): Promise<operations.ConsoleV1ExperimentsControllerGenRemoveAssignmentSourceResponseBody> {
        return unwrapAsync(experimentsDeleteAssignmentSource(this, request, options));
    }

    /**
     * Get Experiment Overrides
     */
    async getOverrides(
        request: operations.ConsoleV1ExperimentOverridesControllerGenReadRequest,
        options?: RequestOptions
    ): Promise<operations.ConsoleV1ExperimentOverridesControllerGenReadResponseBody> {
        return unwrapAsync(experimentsGetOverrides(this, request, options));
    }

    /**
     * Update Experiment Overrides
     */
    async updateOverrides(
        request: operations.ConsoleV1ExperimentOverridesControllerUpdateRequest,
        options?: RequestOptions
    ): Promise<operations.ConsoleV1ExperimentOverridesControllerUpdateResponseBody> {
        return unwrapAsync(experimentsUpdateOverrides(this, request, options));
    }

    /**
     * Partially Update Experiment Overrides
     */
    async partialUpdateOverrides(
        request: operations.ConsoleV1ExperimentOverridesControllerAddRequest,
        options?: RequestOptions
    ): Promise<operations.ConsoleV1ExperimentOverridesControllerAddResponseBody> {
        return unwrapAsync(experimentsPartialUpdateOverrides(this, request, options));
    }

    /**
     * Get Exposure Count for Experiment
     */
    async getExposureCount(
        request: operations.ConsoleV1ExposuresControllerExposureCountRequest,
        options?: RequestOptions
    ): Promise<components.ExposureCountDto> {
        return unwrapAsync(experimentsGetExposureCount(this, request, options));
    }
}

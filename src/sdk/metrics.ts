/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { metricsDelete } from "../funcs/metricsDelete.js";
import { metricsGet } from "../funcs/metricsGet.js";
import { metricsGetDefinition } from "../funcs/metricsGetDefinition.js";
import { metricsListExperiments } from "../funcs/metricsListExperiments.js";
import { metricsReload } from "../funcs/metricsReload.js";
import { metricsUpdate } from "../funcs/metricsUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Metrics extends ClientSDK {
    /**
     * Read Single Metric Value
     */
    async get(
        request: operations.ConsoleV1MetricsControllerGenReadMetricRequest,
        options?: RequestOptions
    ): Promise<operations.ConsoleV1MetricsControllerGenReadMetricResponseBody> {
        return unwrapAsync(metricsGet(this, request, options));
    }

    /**
     * Read Metric Definition
     */
    async getDefinition(
        request: operations.ConsoleV1MetricsControllerGenReadMetricDefinitionRequest,
        options?: RequestOptions
    ): Promise<operations.ConsoleV1MetricsControllerGenReadMetricDefinitionResponseBody> {
        return unwrapAsync(metricsGetDefinition(this, request, options));
    }

    /**
     * Update a metric
     */
    async update(
        request: operations.ConsoleV1MetricsControllerUpdateMetricRequest,
        options?: RequestOptions
    ): Promise<operations.ConsoleV1MetricsControllerUpdateMetricResponseBody> {
        return unwrapAsync(metricsUpdate(this, request, options));
    }

    /**
     * Delete a metric
     */
    async delete(
        request: operations.ConsoleV1MetricsControllerDeleteMetricRequest,
        options?: RequestOptions
    ): Promise<operations.ConsoleV1MetricsControllerDeleteMetricResponseBody> {
        return unwrapAsync(metricsDelete(this, request, options));
    }

    /**
     * Lineage: List experiments related to Metric
     */
    async listExperiments(
        request: operations.ConsoleV1MetricsControllerGenExperimentListFromMetricRequest,
        options?: RequestOptions
    ): Promise<operations.ConsoleV1MetricsControllerGenExperimentListFromMetricResponseBody> {
        return unwrapAsync(metricsListExperiments(this, request, options));
    }

    /**
     * Reload metric data
     */
    async reload(
        request: operations.ConsoleV1MetricsControllerReloadMetricRequest,
        options?: RequestOptions
    ): Promise<operations.ConsoleV1MetricsControllerReloadMetricResponseBody> {
        return unwrapAsync(metricsReload(this, request, options));
    }
}

/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { keysCreate } from "../funcs/keysCreate.js";
import { keysDeactivate } from "../funcs/keysDeactivate.js";
import { keysDelete } from "../funcs/keysDelete.js";
import { keysGet } from "../funcs/keysGet.js";
import { keysList } from "../funcs/keysList.js";
import { keysRotate } from "../funcs/keysRotate.js";
import { keysUpdate } from "../funcs/keysUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Keys extends ClientSDK {
    /**
     * Read Key
     */
    async get(
        request: operations.ConsoleV1KeysControllerGenReadRequest,
        options?: RequestOptions
    ): Promise<operations.ConsoleV1KeysControllerGenReadResponseBody> {
        return unwrapAsync(keysGet(this, request, options));
    }

    /**
     * Update Key
     */
    async update(
        request: operations.ConsoleV1KeysControllerGenUpdateRequest,
        options?: RequestOptions
    ): Promise<operations.ConsoleV1KeysControllerGenUpdateResponseBody> {
        return unwrapAsync(keysUpdate(this, request, options));
    }

    /**
     * Delete Key
     */
    async delete(
        request: operations.ConsoleV1KeysControllerGenDeleteRequest,
        options?: RequestOptions
    ): Promise<operations.ConsoleV1KeysControllerGenDeleteResponseBody> {
        return unwrapAsync(keysDelete(this, request, options));
    }

    /**
     * List Keys
     */
    async list(
        request: operations.ConsoleV1KeysControllerGenListRequest,
        options?: RequestOptions
    ): Promise<operations.ConsoleV1KeysControllerGenListResponseBody> {
        return unwrapAsync(keysList(this, request, options));
    }

    /**
     * Create Key
     */
    async create(
        request: operations.ConsoleV1KeysControllerGenCreateRequest,
        options?: RequestOptions
    ): Promise<operations.ConsoleV1KeysControllerGenCreateResponseBody> {
        return unwrapAsync(keysCreate(this, request, options));
    }

    /**
     * Rotate Key
     */
    async rotate(
        request: operations.ConsoleV1KeysControllerGenRotateRequest,
        options?: RequestOptions
    ): Promise<operations.ConsoleV1KeysControllerGenRotateResponseBody> {
        return unwrapAsync(keysRotate(this, request, options));
    }

    /**
     * Deactivate Key
     */
    async deactivate(
        request: operations.ConsoleV1KeysControllerGenDeactivateRequest,
        options?: RequestOptions
    ): Promise<operations.ConsoleV1KeysControllerGenDeactivateResponseBody> {
        return unwrapAsync(keysDeactivate(this, request, options));
    }
}

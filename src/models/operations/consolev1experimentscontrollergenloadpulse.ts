/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as components from "../components/index.js";
import * as z from "zod";

export const Refresh = {
    Full: "full",
    Incremental: "incremental",
    Metric: "metric",
    Power: "power",
} as const;
export type Refresh = ClosedEnum<typeof Refresh>;

export type ConsoleV1ExperimentsControllerGenLoadPulseRequest = {
    /**
     * id
     */
    id: string;
    refresh?: Refresh | undefined;
    ruleId?: string | undefined;
    turboMode?: boolean | undefined;
    /**
     * Optional header to respect review settings for mutation endpoints.
     */
    xRespectReviewSettings?: string | undefined;
    echidnaLoadPulseQueryDto: components.EchidnaLoadPulseQueryDto;
};

/**
 * Load Pulse Success
 */
export type ConsoleV1ExperimentsControllerGenLoadPulseResponseBody = {
    message?: string | undefined;
};

/** @internal */
export const Refresh$inboundSchema: z.ZodNativeEnum<typeof Refresh> = z.nativeEnum(Refresh);

/** @internal */
export const Refresh$outboundSchema: z.ZodNativeEnum<typeof Refresh> = Refresh$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Refresh$ {
    /** @deprecated use `Refresh$inboundSchema` instead. */
    export const inboundSchema = Refresh$inboundSchema;
    /** @deprecated use `Refresh$outboundSchema` instead. */
    export const outboundSchema = Refresh$outboundSchema;
}

/** @internal */
export const ConsoleV1ExperimentsControllerGenLoadPulseRequest$inboundSchema: z.ZodType<
    ConsoleV1ExperimentsControllerGenLoadPulseRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        id: z.string(),
        refresh: Refresh$inboundSchema.default("full"),
        ruleId: z.string().optional(),
        turboMode: z.boolean().optional(),
        "x-respect-review-settings": z.string().optional(),
        EchidnaLoadPulseQueryDto: components.EchidnaLoadPulseQueryDto$inboundSchema,
    })
    .transform((v) => {
        return remap$(v, {
            "x-respect-review-settings": "xRespectReviewSettings",
            EchidnaLoadPulseQueryDto: "echidnaLoadPulseQueryDto",
        });
    });

/** @internal */
export type ConsoleV1ExperimentsControllerGenLoadPulseRequest$Outbound = {
    id: string;
    refresh: string;
    ruleId?: string | undefined;
    turboMode?: boolean | undefined;
    "x-respect-review-settings"?: string | undefined;
    EchidnaLoadPulseQueryDto: components.EchidnaLoadPulseQueryDto$Outbound;
};

/** @internal */
export const ConsoleV1ExperimentsControllerGenLoadPulseRequest$outboundSchema: z.ZodType<
    ConsoleV1ExperimentsControllerGenLoadPulseRequest$Outbound,
    z.ZodTypeDef,
    ConsoleV1ExperimentsControllerGenLoadPulseRequest
> = z
    .object({
        id: z.string(),
        refresh: Refresh$outboundSchema.default("full"),
        ruleId: z.string().optional(),
        turboMode: z.boolean().optional(),
        xRespectReviewSettings: z.string().optional(),
        echidnaLoadPulseQueryDto: components.EchidnaLoadPulseQueryDto$outboundSchema,
    })
    .transform((v) => {
        return remap$(v, {
            xRespectReviewSettings: "x-respect-review-settings",
            echidnaLoadPulseQueryDto: "EchidnaLoadPulseQueryDto",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConsoleV1ExperimentsControllerGenLoadPulseRequest$ {
    /** @deprecated use `ConsoleV1ExperimentsControllerGenLoadPulseRequest$inboundSchema` instead. */
    export const inboundSchema = ConsoleV1ExperimentsControllerGenLoadPulseRequest$inboundSchema;
    /** @deprecated use `ConsoleV1ExperimentsControllerGenLoadPulseRequest$outboundSchema` instead. */
    export const outboundSchema = ConsoleV1ExperimentsControllerGenLoadPulseRequest$outboundSchema;
    /** @deprecated use `ConsoleV1ExperimentsControllerGenLoadPulseRequest$Outbound` instead. */
    export type Outbound = ConsoleV1ExperimentsControllerGenLoadPulseRequest$Outbound;
}

/** @internal */
export const ConsoleV1ExperimentsControllerGenLoadPulseResponseBody$inboundSchema: z.ZodType<
    ConsoleV1ExperimentsControllerGenLoadPulseResponseBody,
    z.ZodTypeDef,
    unknown
> = z.object({
    message: z.string().optional(),
});

/** @internal */
export type ConsoleV1ExperimentsControllerGenLoadPulseResponseBody$Outbound = {
    message?: string | undefined;
};

/** @internal */
export const ConsoleV1ExperimentsControllerGenLoadPulseResponseBody$outboundSchema: z.ZodType<
    ConsoleV1ExperimentsControllerGenLoadPulseResponseBody$Outbound,
    z.ZodTypeDef,
    ConsoleV1ExperimentsControllerGenLoadPulseResponseBody
> = z.object({
    message: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConsoleV1ExperimentsControllerGenLoadPulseResponseBody$ {
    /** @deprecated use `ConsoleV1ExperimentsControllerGenLoadPulseResponseBody$inboundSchema` instead. */
    export const inboundSchema =
        ConsoleV1ExperimentsControllerGenLoadPulseResponseBody$inboundSchema;
    /** @deprecated use `ConsoleV1ExperimentsControllerGenLoadPulseResponseBody$outboundSchema` instead. */
    export const outboundSchema =
        ConsoleV1ExperimentsControllerGenLoadPulseResponseBody$outboundSchema;
    /** @deprecated use `ConsoleV1ExperimentsControllerGenLoadPulseResponseBody$Outbound` instead. */
    export type Outbound = ConsoleV1ExperimentsControllerGenLoadPulseResponseBody$Outbound;
}

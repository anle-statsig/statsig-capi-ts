/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as components from "../components/index.js";
import * as z from "zod";

/**
 * report type
 */
export const QueryParamType = {
    FirstExposures: "first_exposures",
    PulseDaily: "pulse_daily",
} as const;
/**
 * report type
 */
export type QueryParamType = ClosedEnum<typeof QueryParamType>;

export type ConsoleV1ReportsControllerGenReportRequest = {
    /**
     * report type
     */
    type: QueryParamType;
    /**
     * date for the report
     */
    date: string;
    /**
     * Optional header to respect review settings for mutation endpoints.
     */
    xRespectReviewSettings?: string | undefined;
};

/**
 * Get Reports
 */
export type ConsoleV1ReportsControllerGenReportResponseBody = {
    /**
     * A simple string explaining the result of the operation.
     */
    message: string;
    data: components.ReportDto;
};

/** @internal */
export const QueryParamType$inboundSchema: z.ZodNativeEnum<typeof QueryParamType> =
    z.nativeEnum(QueryParamType);

/** @internal */
export const QueryParamType$outboundSchema: z.ZodNativeEnum<typeof QueryParamType> =
    QueryParamType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryParamType$ {
    /** @deprecated use `QueryParamType$inboundSchema` instead. */
    export const inboundSchema = QueryParamType$inboundSchema;
    /** @deprecated use `QueryParamType$outboundSchema` instead. */
    export const outboundSchema = QueryParamType$outboundSchema;
}

/** @internal */
export const ConsoleV1ReportsControllerGenReportRequest$inboundSchema: z.ZodType<
    ConsoleV1ReportsControllerGenReportRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        type: QueryParamType$inboundSchema,
        date: z.string(),
        "x-respect-review-settings": z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            "x-respect-review-settings": "xRespectReviewSettings",
        });
    });

/** @internal */
export type ConsoleV1ReportsControllerGenReportRequest$Outbound = {
    type: string;
    date: string;
    "x-respect-review-settings"?: string | undefined;
};

/** @internal */
export const ConsoleV1ReportsControllerGenReportRequest$outboundSchema: z.ZodType<
    ConsoleV1ReportsControllerGenReportRequest$Outbound,
    z.ZodTypeDef,
    ConsoleV1ReportsControllerGenReportRequest
> = z
    .object({
        type: QueryParamType$outboundSchema,
        date: z.string(),
        xRespectReviewSettings: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            xRespectReviewSettings: "x-respect-review-settings",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConsoleV1ReportsControllerGenReportRequest$ {
    /** @deprecated use `ConsoleV1ReportsControllerGenReportRequest$inboundSchema` instead. */
    export const inboundSchema = ConsoleV1ReportsControllerGenReportRequest$inboundSchema;
    /** @deprecated use `ConsoleV1ReportsControllerGenReportRequest$outboundSchema` instead. */
    export const outboundSchema = ConsoleV1ReportsControllerGenReportRequest$outboundSchema;
    /** @deprecated use `ConsoleV1ReportsControllerGenReportRequest$Outbound` instead. */
    export type Outbound = ConsoleV1ReportsControllerGenReportRequest$Outbound;
}

/** @internal */
export const ConsoleV1ReportsControllerGenReportResponseBody$inboundSchema: z.ZodType<
    ConsoleV1ReportsControllerGenReportResponseBody,
    z.ZodTypeDef,
    unknown
> = z.object({
    message: z.string(),
    data: components.ReportDto$inboundSchema,
});

/** @internal */
export type ConsoleV1ReportsControllerGenReportResponseBody$Outbound = {
    message: string;
    data: components.ReportDto$Outbound;
};

/** @internal */
export const ConsoleV1ReportsControllerGenReportResponseBody$outboundSchema: z.ZodType<
    ConsoleV1ReportsControllerGenReportResponseBody$Outbound,
    z.ZodTypeDef,
    ConsoleV1ReportsControllerGenReportResponseBody
> = z.object({
    message: z.string(),
    data: components.ReportDto$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConsoleV1ReportsControllerGenReportResponseBody$ {
    /** @deprecated use `ConsoleV1ReportsControllerGenReportResponseBody$inboundSchema` instead. */
    export const inboundSchema = ConsoleV1ReportsControllerGenReportResponseBody$inboundSchema;
    /** @deprecated use `ConsoleV1ReportsControllerGenReportResponseBody$outboundSchema` instead. */
    export const outboundSchema = ConsoleV1ReportsControllerGenReportResponseBody$outboundSchema;
    /** @deprecated use `ConsoleV1ReportsControllerGenReportResponseBody$Outbound` instead. */
    export type Outbound = ConsoleV1ReportsControllerGenReportResponseBody$Outbound;
}

/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";
import * as z from "zod";

export type ConsoleV1ExperimentOverridesControllerAddRequest = {
    /**
     * id
     */
    id: string;
    /**
     * Optional header to respect review settings for mutation endpoints.
     */
    xRespectReviewSettings?: string | undefined;
    experimentOverridesDto: components.ExperimentOverridesDto;
};

/**
 * Partially Update Experiment Overrides Success
 */
export type ConsoleV1ExperimentOverridesControllerAddResponseBody = {
    /**
     * A simple string explaining the result of the operation.
     */
    message: string;
    data: components.ExperimentOverridesDto;
};

/** @internal */
export const ConsoleV1ExperimentOverridesControllerAddRequest$inboundSchema: z.ZodType<
    ConsoleV1ExperimentOverridesControllerAddRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        id: z.string(),
        "x-respect-review-settings": z.string().optional(),
        ExperimentOverridesDto: components.ExperimentOverridesDto$inboundSchema,
    })
    .transform((v) => {
        return remap$(v, {
            "x-respect-review-settings": "xRespectReviewSettings",
            ExperimentOverridesDto: "experimentOverridesDto",
        });
    });

/** @internal */
export type ConsoleV1ExperimentOverridesControllerAddRequest$Outbound = {
    id: string;
    "x-respect-review-settings"?: string | undefined;
    ExperimentOverridesDto: components.ExperimentOverridesDto$Outbound;
};

/** @internal */
export const ConsoleV1ExperimentOverridesControllerAddRequest$outboundSchema: z.ZodType<
    ConsoleV1ExperimentOverridesControllerAddRequest$Outbound,
    z.ZodTypeDef,
    ConsoleV1ExperimentOverridesControllerAddRequest
> = z
    .object({
        id: z.string(),
        xRespectReviewSettings: z.string().optional(),
        experimentOverridesDto: components.ExperimentOverridesDto$outboundSchema,
    })
    .transform((v) => {
        return remap$(v, {
            xRespectReviewSettings: "x-respect-review-settings",
            experimentOverridesDto: "ExperimentOverridesDto",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConsoleV1ExperimentOverridesControllerAddRequest$ {
    /** @deprecated use `ConsoleV1ExperimentOverridesControllerAddRequest$inboundSchema` instead. */
    export const inboundSchema = ConsoleV1ExperimentOverridesControllerAddRequest$inboundSchema;
    /** @deprecated use `ConsoleV1ExperimentOverridesControllerAddRequest$outboundSchema` instead. */
    export const outboundSchema = ConsoleV1ExperimentOverridesControllerAddRequest$outboundSchema;
    /** @deprecated use `ConsoleV1ExperimentOverridesControllerAddRequest$Outbound` instead. */
    export type Outbound = ConsoleV1ExperimentOverridesControllerAddRequest$Outbound;
}

/** @internal */
export const ConsoleV1ExperimentOverridesControllerAddResponseBody$inboundSchema: z.ZodType<
    ConsoleV1ExperimentOverridesControllerAddResponseBody,
    z.ZodTypeDef,
    unknown
> = z.object({
    message: z.string(),
    data: components.ExperimentOverridesDto$inboundSchema,
});

/** @internal */
export type ConsoleV1ExperimentOverridesControllerAddResponseBody$Outbound = {
    message: string;
    data: components.ExperimentOverridesDto$Outbound;
};

/** @internal */
export const ConsoleV1ExperimentOverridesControllerAddResponseBody$outboundSchema: z.ZodType<
    ConsoleV1ExperimentOverridesControllerAddResponseBody$Outbound,
    z.ZodTypeDef,
    ConsoleV1ExperimentOverridesControllerAddResponseBody
> = z.object({
    message: z.string(),
    data: components.ExperimentOverridesDto$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConsoleV1ExperimentOverridesControllerAddResponseBody$ {
    /** @deprecated use `ConsoleV1ExperimentOverridesControllerAddResponseBody$inboundSchema` instead. */
    export const inboundSchema =
        ConsoleV1ExperimentOverridesControllerAddResponseBody$inboundSchema;
    /** @deprecated use `ConsoleV1ExperimentOverridesControllerAddResponseBody$outboundSchema` instead. */
    export const outboundSchema =
        ConsoleV1ExperimentOverridesControllerAddResponseBody$outboundSchema;
    /** @deprecated use `ConsoleV1ExperimentOverridesControllerAddResponseBody$Outbound` instead. */
    export type Outbound = ConsoleV1ExperimentOverridesControllerAddResponseBody$Outbound;
}

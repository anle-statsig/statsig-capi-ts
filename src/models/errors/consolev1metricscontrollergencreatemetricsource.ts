/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

export const ConsoleV1MetricsControllerGenCreateMetricSourceMetricSourcesStatus = {
    FourHundredAndOne: 401,
} as const;
export type ConsoleV1MetricsControllerGenCreateMetricSourceMetricSourcesStatus = ClosedEnum<
    typeof ConsoleV1MetricsControllerGenCreateMetricSourceMetricSourcesStatus
>;

/**
 * This endpoint only accepts an active CONSOLE key, but an invalid key was sent. Key: console-xxxXXXxxxXXXxxx
 */
export type ConsoleV1MetricsControllerGenCreateMetricSourceMetricSourcesResponseBodyData = {
    status: ConsoleV1MetricsControllerGenCreateMetricSourceMetricSourcesStatus;
    message: string;
};

/**
 * This endpoint only accepts an active CONSOLE key, but an invalid key was sent. Key: console-xxxXXXxxxXXXxxx
 */
export class ConsoleV1MetricsControllerGenCreateMetricSourceMetricSourcesResponseBody extends Error {
    status: ConsoleV1MetricsControllerGenCreateMetricSourceMetricSourcesStatus;

    /** The original data that was passed to this error instance. */
    data$: ConsoleV1MetricsControllerGenCreateMetricSourceMetricSourcesResponseBodyData;

    constructor(err: ConsoleV1MetricsControllerGenCreateMetricSourceMetricSourcesResponseBodyData) {
        const message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : `API error occurred: ${JSON.stringify(err)}`;
        super(message);
        this.data$ = err;

        this.status = err.status;

        this.name = "ConsoleV1MetricsControllerGenCreateMetricSourceMetricSourcesResponseBody";
    }
}

export const ConsoleV1MetricsControllerGenCreateMetricSourceStatus = {
    FourHundred: 400,
} as const;
export type ConsoleV1MetricsControllerGenCreateMetricSourceStatus = ClosedEnum<
    typeof ConsoleV1MetricsControllerGenCreateMetricSourceStatus
>;

/**
 * Invalid request. Please check the request input and try again.
 */
export type ConsoleV1MetricsControllerGenCreateMetricSourceResponseBodyData = {
    status: ConsoleV1MetricsControllerGenCreateMetricSourceStatus;
    message: string;
};

/**
 * Invalid request. Please check the request input and try again.
 */
export class ConsoleV1MetricsControllerGenCreateMetricSourceResponseBody extends Error {
    status: ConsoleV1MetricsControllerGenCreateMetricSourceStatus;

    /** The original data that was passed to this error instance. */
    data$: ConsoleV1MetricsControllerGenCreateMetricSourceResponseBodyData;

    constructor(err: ConsoleV1MetricsControllerGenCreateMetricSourceResponseBodyData) {
        const message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : `API error occurred: ${JSON.stringify(err)}`;
        super(message);
        this.data$ = err;

        this.status = err.status;

        this.name = "ConsoleV1MetricsControllerGenCreateMetricSourceResponseBody";
    }
}

/** @internal */
export const ConsoleV1MetricsControllerGenCreateMetricSourceMetricSourcesStatus$inboundSchema: z.ZodNativeEnum<
    typeof ConsoleV1MetricsControllerGenCreateMetricSourceMetricSourcesStatus
> = z.nativeEnum(ConsoleV1MetricsControllerGenCreateMetricSourceMetricSourcesStatus);

/** @internal */
export const ConsoleV1MetricsControllerGenCreateMetricSourceMetricSourcesStatus$outboundSchema: z.ZodNativeEnum<
    typeof ConsoleV1MetricsControllerGenCreateMetricSourceMetricSourcesStatus
> = ConsoleV1MetricsControllerGenCreateMetricSourceMetricSourcesStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConsoleV1MetricsControllerGenCreateMetricSourceMetricSourcesStatus$ {
    /** @deprecated use `ConsoleV1MetricsControllerGenCreateMetricSourceMetricSourcesStatus$inboundSchema` instead. */
    export const inboundSchema =
        ConsoleV1MetricsControllerGenCreateMetricSourceMetricSourcesStatus$inboundSchema;
    /** @deprecated use `ConsoleV1MetricsControllerGenCreateMetricSourceMetricSourcesStatus$outboundSchema` instead. */
    export const outboundSchema =
        ConsoleV1MetricsControllerGenCreateMetricSourceMetricSourcesStatus$outboundSchema;
}

/** @internal */
export const ConsoleV1MetricsControllerGenCreateMetricSourceMetricSourcesResponseBody$inboundSchema: z.ZodType<
    ConsoleV1MetricsControllerGenCreateMetricSourceMetricSourcesResponseBody,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        status: ConsoleV1MetricsControllerGenCreateMetricSourceMetricSourcesStatus$inboundSchema,
        message: z.string(),
    })
    .transform((v) => {
        return new ConsoleV1MetricsControllerGenCreateMetricSourceMetricSourcesResponseBody(v);
    });

/** @internal */
export type ConsoleV1MetricsControllerGenCreateMetricSourceMetricSourcesResponseBody$Outbound = {
    status: number;
    message: string;
};

/** @internal */
export const ConsoleV1MetricsControllerGenCreateMetricSourceMetricSourcesResponseBody$outboundSchema: z.ZodType<
    ConsoleV1MetricsControllerGenCreateMetricSourceMetricSourcesResponseBody$Outbound,
    z.ZodTypeDef,
    ConsoleV1MetricsControllerGenCreateMetricSourceMetricSourcesResponseBody
> = z
    .instanceof(ConsoleV1MetricsControllerGenCreateMetricSourceMetricSourcesResponseBody)
    .transform((v) => v.data$)
    .pipe(
        z.object({
            status: ConsoleV1MetricsControllerGenCreateMetricSourceMetricSourcesStatus$outboundSchema,
            message: z.string(),
        })
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConsoleV1MetricsControllerGenCreateMetricSourceMetricSourcesResponseBody$ {
    /** @deprecated use `ConsoleV1MetricsControllerGenCreateMetricSourceMetricSourcesResponseBody$inboundSchema` instead. */
    export const inboundSchema =
        ConsoleV1MetricsControllerGenCreateMetricSourceMetricSourcesResponseBody$inboundSchema;
    /** @deprecated use `ConsoleV1MetricsControllerGenCreateMetricSourceMetricSourcesResponseBody$outboundSchema` instead. */
    export const outboundSchema =
        ConsoleV1MetricsControllerGenCreateMetricSourceMetricSourcesResponseBody$outboundSchema;
    /** @deprecated use `ConsoleV1MetricsControllerGenCreateMetricSourceMetricSourcesResponseBody$Outbound` instead. */
    export type Outbound =
        ConsoleV1MetricsControllerGenCreateMetricSourceMetricSourcesResponseBody$Outbound;
}

/** @internal */
export const ConsoleV1MetricsControllerGenCreateMetricSourceStatus$inboundSchema: z.ZodNativeEnum<
    typeof ConsoleV1MetricsControllerGenCreateMetricSourceStatus
> = z.nativeEnum(ConsoleV1MetricsControllerGenCreateMetricSourceStatus);

/** @internal */
export const ConsoleV1MetricsControllerGenCreateMetricSourceStatus$outboundSchema: z.ZodNativeEnum<
    typeof ConsoleV1MetricsControllerGenCreateMetricSourceStatus
> = ConsoleV1MetricsControllerGenCreateMetricSourceStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConsoleV1MetricsControllerGenCreateMetricSourceStatus$ {
    /** @deprecated use `ConsoleV1MetricsControllerGenCreateMetricSourceStatus$inboundSchema` instead. */
    export const inboundSchema =
        ConsoleV1MetricsControllerGenCreateMetricSourceStatus$inboundSchema;
    /** @deprecated use `ConsoleV1MetricsControllerGenCreateMetricSourceStatus$outboundSchema` instead. */
    export const outboundSchema =
        ConsoleV1MetricsControllerGenCreateMetricSourceStatus$outboundSchema;
}

/** @internal */
export const ConsoleV1MetricsControllerGenCreateMetricSourceResponseBody$inboundSchema: z.ZodType<
    ConsoleV1MetricsControllerGenCreateMetricSourceResponseBody,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        status: ConsoleV1MetricsControllerGenCreateMetricSourceStatus$inboundSchema,
        message: z.string(),
    })
    .transform((v) => {
        return new ConsoleV1MetricsControllerGenCreateMetricSourceResponseBody(v);
    });

/** @internal */
export type ConsoleV1MetricsControllerGenCreateMetricSourceResponseBody$Outbound = {
    status: number;
    message: string;
};

/** @internal */
export const ConsoleV1MetricsControllerGenCreateMetricSourceResponseBody$outboundSchema: z.ZodType<
    ConsoleV1MetricsControllerGenCreateMetricSourceResponseBody$Outbound,
    z.ZodTypeDef,
    ConsoleV1MetricsControllerGenCreateMetricSourceResponseBody
> = z
    .instanceof(ConsoleV1MetricsControllerGenCreateMetricSourceResponseBody)
    .transform((v) => v.data$)
    .pipe(
        z.object({
            status: ConsoleV1MetricsControllerGenCreateMetricSourceStatus$outboundSchema,
            message: z.string(),
        })
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConsoleV1MetricsControllerGenCreateMetricSourceResponseBody$ {
    /** @deprecated use `ConsoleV1MetricsControllerGenCreateMetricSourceResponseBody$inboundSchema` instead. */
    export const inboundSchema =
        ConsoleV1MetricsControllerGenCreateMetricSourceResponseBody$inboundSchema;
    /** @deprecated use `ConsoleV1MetricsControllerGenCreateMetricSourceResponseBody$outboundSchema` instead. */
    export const outboundSchema =
        ConsoleV1MetricsControllerGenCreateMetricSourceResponseBody$outboundSchema;
    /** @deprecated use `ConsoleV1MetricsControllerGenCreateMetricSourceResponseBody$Outbound` instead. */
    export type Outbound = ConsoleV1MetricsControllerGenCreateMetricSourceResponseBody$Outbound;
}

/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

export const ConsoleV1UsersControllerGenListTeamsTeamsStatus = {
    FourHundredAndOne: 401,
} as const;
export type ConsoleV1UsersControllerGenListTeamsTeamsStatus = ClosedEnum<
    typeof ConsoleV1UsersControllerGenListTeamsTeamsStatus
>;

/**
 * This endpoint only accepts an active CONSOLE key, but an invalid key was sent. Key: console-xxxXXXxxxXXXxxx
 */
export type ConsoleV1UsersControllerGenListTeamsTeamsResponseBodyData = {
    status: ConsoleV1UsersControllerGenListTeamsTeamsStatus;
    message: string;
};

/**
 * This endpoint only accepts an active CONSOLE key, but an invalid key was sent. Key: console-xxxXXXxxxXXXxxx
 */
export class ConsoleV1UsersControllerGenListTeamsTeamsResponseBody extends Error {
    status: ConsoleV1UsersControllerGenListTeamsTeamsStatus;

    /** The original data that was passed to this error instance. */
    data$: ConsoleV1UsersControllerGenListTeamsTeamsResponseBodyData;

    constructor(err: ConsoleV1UsersControllerGenListTeamsTeamsResponseBodyData) {
        const message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : `API error occurred: ${JSON.stringify(err)}`;
        super(message);
        this.data$ = err;

        this.status = err.status;

        this.name = "ConsoleV1UsersControllerGenListTeamsTeamsResponseBody";
    }
}

export const ConsoleV1UsersControllerGenListTeamsStatus = {
    FourHundred: 400,
} as const;
export type ConsoleV1UsersControllerGenListTeamsStatus = ClosedEnum<
    typeof ConsoleV1UsersControllerGenListTeamsStatus
>;

/**
 * Invalid request. Please check the request input and try again.
 */
export type ConsoleV1UsersControllerGenListTeamsResponseBodyData = {
    status: ConsoleV1UsersControllerGenListTeamsStatus;
    message: string;
};

/**
 * Invalid request. Please check the request input and try again.
 */
export class ConsoleV1UsersControllerGenListTeamsResponseBody extends Error {
    status: ConsoleV1UsersControllerGenListTeamsStatus;

    /** The original data that was passed to this error instance. */
    data$: ConsoleV1UsersControllerGenListTeamsResponseBodyData;

    constructor(err: ConsoleV1UsersControllerGenListTeamsResponseBodyData) {
        const message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : `API error occurred: ${JSON.stringify(err)}`;
        super(message);
        this.data$ = err;

        this.status = err.status;

        this.name = "ConsoleV1UsersControllerGenListTeamsResponseBody";
    }
}

/** @internal */
export const ConsoleV1UsersControllerGenListTeamsTeamsStatus$inboundSchema: z.ZodNativeEnum<
    typeof ConsoleV1UsersControllerGenListTeamsTeamsStatus
> = z.nativeEnum(ConsoleV1UsersControllerGenListTeamsTeamsStatus);

/** @internal */
export const ConsoleV1UsersControllerGenListTeamsTeamsStatus$outboundSchema: z.ZodNativeEnum<
    typeof ConsoleV1UsersControllerGenListTeamsTeamsStatus
> = ConsoleV1UsersControllerGenListTeamsTeamsStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConsoleV1UsersControllerGenListTeamsTeamsStatus$ {
    /** @deprecated use `ConsoleV1UsersControllerGenListTeamsTeamsStatus$inboundSchema` instead. */
    export const inboundSchema = ConsoleV1UsersControllerGenListTeamsTeamsStatus$inboundSchema;
    /** @deprecated use `ConsoleV1UsersControllerGenListTeamsTeamsStatus$outboundSchema` instead. */
    export const outboundSchema = ConsoleV1UsersControllerGenListTeamsTeamsStatus$outboundSchema;
}

/** @internal */
export const ConsoleV1UsersControllerGenListTeamsTeamsResponseBody$inboundSchema: z.ZodType<
    ConsoleV1UsersControllerGenListTeamsTeamsResponseBody,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        status: ConsoleV1UsersControllerGenListTeamsTeamsStatus$inboundSchema,
        message: z.string(),
    })
    .transform((v) => {
        return new ConsoleV1UsersControllerGenListTeamsTeamsResponseBody(v);
    });

/** @internal */
export type ConsoleV1UsersControllerGenListTeamsTeamsResponseBody$Outbound = {
    status: number;
    message: string;
};

/** @internal */
export const ConsoleV1UsersControllerGenListTeamsTeamsResponseBody$outboundSchema: z.ZodType<
    ConsoleV1UsersControllerGenListTeamsTeamsResponseBody$Outbound,
    z.ZodTypeDef,
    ConsoleV1UsersControllerGenListTeamsTeamsResponseBody
> = z
    .instanceof(ConsoleV1UsersControllerGenListTeamsTeamsResponseBody)
    .transform((v) => v.data$)
    .pipe(
        z.object({
            status: ConsoleV1UsersControllerGenListTeamsTeamsStatus$outboundSchema,
            message: z.string(),
        })
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConsoleV1UsersControllerGenListTeamsTeamsResponseBody$ {
    /** @deprecated use `ConsoleV1UsersControllerGenListTeamsTeamsResponseBody$inboundSchema` instead. */
    export const inboundSchema =
        ConsoleV1UsersControllerGenListTeamsTeamsResponseBody$inboundSchema;
    /** @deprecated use `ConsoleV1UsersControllerGenListTeamsTeamsResponseBody$outboundSchema` instead. */
    export const outboundSchema =
        ConsoleV1UsersControllerGenListTeamsTeamsResponseBody$outboundSchema;
    /** @deprecated use `ConsoleV1UsersControllerGenListTeamsTeamsResponseBody$Outbound` instead. */
    export type Outbound = ConsoleV1UsersControllerGenListTeamsTeamsResponseBody$Outbound;
}

/** @internal */
export const ConsoleV1UsersControllerGenListTeamsStatus$inboundSchema: z.ZodNativeEnum<
    typeof ConsoleV1UsersControllerGenListTeamsStatus
> = z.nativeEnum(ConsoleV1UsersControllerGenListTeamsStatus);

/** @internal */
export const ConsoleV1UsersControllerGenListTeamsStatus$outboundSchema: z.ZodNativeEnum<
    typeof ConsoleV1UsersControllerGenListTeamsStatus
> = ConsoleV1UsersControllerGenListTeamsStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConsoleV1UsersControllerGenListTeamsStatus$ {
    /** @deprecated use `ConsoleV1UsersControllerGenListTeamsStatus$inboundSchema` instead. */
    export const inboundSchema = ConsoleV1UsersControllerGenListTeamsStatus$inboundSchema;
    /** @deprecated use `ConsoleV1UsersControllerGenListTeamsStatus$outboundSchema` instead. */
    export const outboundSchema = ConsoleV1UsersControllerGenListTeamsStatus$outboundSchema;
}

/** @internal */
export const ConsoleV1UsersControllerGenListTeamsResponseBody$inboundSchema: z.ZodType<
    ConsoleV1UsersControllerGenListTeamsResponseBody,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        status: ConsoleV1UsersControllerGenListTeamsStatus$inboundSchema,
        message: z.string(),
    })
    .transform((v) => {
        return new ConsoleV1UsersControllerGenListTeamsResponseBody(v);
    });

/** @internal */
export type ConsoleV1UsersControllerGenListTeamsResponseBody$Outbound = {
    status: number;
    message: string;
};

/** @internal */
export const ConsoleV1UsersControllerGenListTeamsResponseBody$outboundSchema: z.ZodType<
    ConsoleV1UsersControllerGenListTeamsResponseBody$Outbound,
    z.ZodTypeDef,
    ConsoleV1UsersControllerGenListTeamsResponseBody
> = z
    .instanceof(ConsoleV1UsersControllerGenListTeamsResponseBody)
    .transform((v) => v.data$)
    .pipe(
        z.object({
            status: ConsoleV1UsersControllerGenListTeamsStatus$outboundSchema,
            message: z.string(),
        })
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConsoleV1UsersControllerGenListTeamsResponseBody$ {
    /** @deprecated use `ConsoleV1UsersControllerGenListTeamsResponseBody$inboundSchema` instead. */
    export const inboundSchema = ConsoleV1UsersControllerGenListTeamsResponseBody$inboundSchema;
    /** @deprecated use `ConsoleV1UsersControllerGenListTeamsResponseBody$outboundSchema` instead. */
    export const outboundSchema = ConsoleV1UsersControllerGenListTeamsResponseBody$outboundSchema;
    /** @deprecated use `ConsoleV1UsersControllerGenListTeamsResponseBody$Outbound` instead. */
    export type Outbound = ConsoleV1UsersControllerGenListTeamsResponseBody$Outbound;
}

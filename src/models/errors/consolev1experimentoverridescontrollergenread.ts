/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

export const ConsoleV1ExperimentOverridesControllerGenReadExperimentsStatus = {
    FourHundredAndFour: 404,
} as const;
export type ConsoleV1ExperimentOverridesControllerGenReadExperimentsStatus = ClosedEnum<
    typeof ConsoleV1ExperimentOverridesControllerGenReadExperimentsStatus
>;

/**
 * Experiment not found.
 */
export type ConsoleV1ExperimentOverridesControllerGenReadExperimentsResponseBodyData = {
    status: ConsoleV1ExperimentOverridesControllerGenReadExperimentsStatus;
    message: string;
};

/**
 * Experiment not found.
 */
export class ConsoleV1ExperimentOverridesControllerGenReadExperimentsResponseBody extends Error {
    status: ConsoleV1ExperimentOverridesControllerGenReadExperimentsStatus;

    /** The original data that was passed to this error instance. */
    data$: ConsoleV1ExperimentOverridesControllerGenReadExperimentsResponseBodyData;

    constructor(err: ConsoleV1ExperimentOverridesControllerGenReadExperimentsResponseBodyData) {
        const message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : `API error occurred: ${JSON.stringify(err)}`;
        super(message);
        this.data$ = err;

        this.status = err.status;

        this.name = "ConsoleV1ExperimentOverridesControllerGenReadExperimentsResponseBody";
    }
}

export const ConsoleV1ExperimentOverridesControllerGenReadStatus = {
    FourHundredAndOne: 401,
} as const;
export type ConsoleV1ExperimentOverridesControllerGenReadStatus = ClosedEnum<
    typeof ConsoleV1ExperimentOverridesControllerGenReadStatus
>;

/**
 * This endpoint only accepts an active CONSOLE key, but an invalid key was sent. Key: console-xxxXXXxxxXXXxxx
 */
export type ConsoleV1ExperimentOverridesControllerGenReadResponseBodyData = {
    status: ConsoleV1ExperimentOverridesControllerGenReadStatus;
    message: string;
};

/**
 * This endpoint only accepts an active CONSOLE key, but an invalid key was sent. Key: console-xxxXXXxxxXXXxxx
 */
export class ConsoleV1ExperimentOverridesControllerGenReadResponseBody extends Error {
    status: ConsoleV1ExperimentOverridesControllerGenReadStatus;

    /** The original data that was passed to this error instance. */
    data$: ConsoleV1ExperimentOverridesControllerGenReadResponseBodyData;

    constructor(err: ConsoleV1ExperimentOverridesControllerGenReadResponseBodyData) {
        const message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : `API error occurred: ${JSON.stringify(err)}`;
        super(message);
        this.data$ = err;

        this.status = err.status;

        this.name = "ConsoleV1ExperimentOverridesControllerGenReadResponseBody";
    }
}

/** @internal */
export const ConsoleV1ExperimentOverridesControllerGenReadExperimentsStatus$inboundSchema: z.ZodNativeEnum<
    typeof ConsoleV1ExperimentOverridesControllerGenReadExperimentsStatus
> = z.nativeEnum(ConsoleV1ExperimentOverridesControllerGenReadExperimentsStatus);

/** @internal */
export const ConsoleV1ExperimentOverridesControllerGenReadExperimentsStatus$outboundSchema: z.ZodNativeEnum<
    typeof ConsoleV1ExperimentOverridesControllerGenReadExperimentsStatus
> = ConsoleV1ExperimentOverridesControllerGenReadExperimentsStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConsoleV1ExperimentOverridesControllerGenReadExperimentsStatus$ {
    /** @deprecated use `ConsoleV1ExperimentOverridesControllerGenReadExperimentsStatus$inboundSchema` instead. */
    export const inboundSchema =
        ConsoleV1ExperimentOverridesControllerGenReadExperimentsStatus$inboundSchema;
    /** @deprecated use `ConsoleV1ExperimentOverridesControllerGenReadExperimentsStatus$outboundSchema` instead. */
    export const outboundSchema =
        ConsoleV1ExperimentOverridesControllerGenReadExperimentsStatus$outboundSchema;
}

/** @internal */
export const ConsoleV1ExperimentOverridesControllerGenReadExperimentsResponseBody$inboundSchema: z.ZodType<
    ConsoleV1ExperimentOverridesControllerGenReadExperimentsResponseBody,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        status: ConsoleV1ExperimentOverridesControllerGenReadExperimentsStatus$inboundSchema,
        message: z.string(),
    })
    .transform((v) => {
        return new ConsoleV1ExperimentOverridesControllerGenReadExperimentsResponseBody(v);
    });

/** @internal */
export type ConsoleV1ExperimentOverridesControllerGenReadExperimentsResponseBody$Outbound = {
    status: number;
    message: string;
};

/** @internal */
export const ConsoleV1ExperimentOverridesControllerGenReadExperimentsResponseBody$outboundSchema: z.ZodType<
    ConsoleV1ExperimentOverridesControllerGenReadExperimentsResponseBody$Outbound,
    z.ZodTypeDef,
    ConsoleV1ExperimentOverridesControllerGenReadExperimentsResponseBody
> = z
    .instanceof(ConsoleV1ExperimentOverridesControllerGenReadExperimentsResponseBody)
    .transform((v) => v.data$)
    .pipe(
        z.object({
            status: ConsoleV1ExperimentOverridesControllerGenReadExperimentsStatus$outboundSchema,
            message: z.string(),
        })
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConsoleV1ExperimentOverridesControllerGenReadExperimentsResponseBody$ {
    /** @deprecated use `ConsoleV1ExperimentOverridesControllerGenReadExperimentsResponseBody$inboundSchema` instead. */
    export const inboundSchema =
        ConsoleV1ExperimentOverridesControllerGenReadExperimentsResponseBody$inboundSchema;
    /** @deprecated use `ConsoleV1ExperimentOverridesControllerGenReadExperimentsResponseBody$outboundSchema` instead. */
    export const outboundSchema =
        ConsoleV1ExperimentOverridesControllerGenReadExperimentsResponseBody$outboundSchema;
    /** @deprecated use `ConsoleV1ExperimentOverridesControllerGenReadExperimentsResponseBody$Outbound` instead. */
    export type Outbound =
        ConsoleV1ExperimentOverridesControllerGenReadExperimentsResponseBody$Outbound;
}

/** @internal */
export const ConsoleV1ExperimentOverridesControllerGenReadStatus$inboundSchema: z.ZodNativeEnum<
    typeof ConsoleV1ExperimentOverridesControllerGenReadStatus
> = z.nativeEnum(ConsoleV1ExperimentOverridesControllerGenReadStatus);

/** @internal */
export const ConsoleV1ExperimentOverridesControllerGenReadStatus$outboundSchema: z.ZodNativeEnum<
    typeof ConsoleV1ExperimentOverridesControllerGenReadStatus
> = ConsoleV1ExperimentOverridesControllerGenReadStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConsoleV1ExperimentOverridesControllerGenReadStatus$ {
    /** @deprecated use `ConsoleV1ExperimentOverridesControllerGenReadStatus$inboundSchema` instead. */
    export const inboundSchema = ConsoleV1ExperimentOverridesControllerGenReadStatus$inboundSchema;
    /** @deprecated use `ConsoleV1ExperimentOverridesControllerGenReadStatus$outboundSchema` instead. */
    export const outboundSchema =
        ConsoleV1ExperimentOverridesControllerGenReadStatus$outboundSchema;
}

/** @internal */
export const ConsoleV1ExperimentOverridesControllerGenReadResponseBody$inboundSchema: z.ZodType<
    ConsoleV1ExperimentOverridesControllerGenReadResponseBody,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        status: ConsoleV1ExperimentOverridesControllerGenReadStatus$inboundSchema,
        message: z.string(),
    })
    .transform((v) => {
        return new ConsoleV1ExperimentOverridesControllerGenReadResponseBody(v);
    });

/** @internal */
export type ConsoleV1ExperimentOverridesControllerGenReadResponseBody$Outbound = {
    status: number;
    message: string;
};

/** @internal */
export const ConsoleV1ExperimentOverridesControllerGenReadResponseBody$outboundSchema: z.ZodType<
    ConsoleV1ExperimentOverridesControllerGenReadResponseBody$Outbound,
    z.ZodTypeDef,
    ConsoleV1ExperimentOverridesControllerGenReadResponseBody
> = z
    .instanceof(ConsoleV1ExperimentOverridesControllerGenReadResponseBody)
    .transform((v) => v.data$)
    .pipe(
        z.object({
            status: ConsoleV1ExperimentOverridesControllerGenReadStatus$outboundSchema,
            message: z.string(),
        })
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConsoleV1ExperimentOverridesControllerGenReadResponseBody$ {
    /** @deprecated use `ConsoleV1ExperimentOverridesControllerGenReadResponseBody$inboundSchema` instead. */
    export const inboundSchema =
        ConsoleV1ExperimentOverridesControllerGenReadResponseBody$inboundSchema;
    /** @deprecated use `ConsoleV1ExperimentOverridesControllerGenReadResponseBody$outboundSchema` instead. */
    export const outboundSchema =
        ConsoleV1ExperimentOverridesControllerGenReadResponseBody$outboundSchema;
    /** @deprecated use `ConsoleV1ExperimentOverridesControllerGenReadResponseBody$Outbound` instead. */
    export type Outbound = ConsoleV1ExperimentOverridesControllerGenReadResponseBody$Outbound;
}

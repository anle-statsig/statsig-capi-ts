/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

export const ConsoleV1ExperimentsControllerGenArchiveExperimentsStatus = {
    FourHundredAndFour: 404,
} as const;
export type ConsoleV1ExperimentsControllerGenArchiveExperimentsStatus = ClosedEnum<
    typeof ConsoleV1ExperimentsControllerGenArchiveExperimentsStatus
>;

/**
 * Experiment not found.
 */
export type ConsoleV1ExperimentsControllerGenArchiveExperimentsResponseBodyData = {
    status: ConsoleV1ExperimentsControllerGenArchiveExperimentsStatus;
    message: string;
};

/**
 * Experiment not found.
 */
export class ConsoleV1ExperimentsControllerGenArchiveExperimentsResponseBody extends Error {
    status: ConsoleV1ExperimentsControllerGenArchiveExperimentsStatus;

    /** The original data that was passed to this error instance. */
    data$: ConsoleV1ExperimentsControllerGenArchiveExperimentsResponseBodyData;

    constructor(err: ConsoleV1ExperimentsControllerGenArchiveExperimentsResponseBodyData) {
        const message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : `API error occurred: ${JSON.stringify(err)}`;
        super(message);
        this.data$ = err;

        this.status = err.status;

        this.name = "ConsoleV1ExperimentsControllerGenArchiveExperimentsResponseBody";
    }
}

export const ConsoleV1ExperimentsControllerGenArchiveStatus = {
    FourHundredAndOne: 401,
} as const;
export type ConsoleV1ExperimentsControllerGenArchiveStatus = ClosedEnum<
    typeof ConsoleV1ExperimentsControllerGenArchiveStatus
>;

/**
 * This endpoint only accepts an active CONSOLE key, but an invalid key was sent. Key: console-xxxXXXxxxXXXxxx
 */
export type ConsoleV1ExperimentsControllerGenArchiveResponseBodyData = {
    status: ConsoleV1ExperimentsControllerGenArchiveStatus;
    message: string;
};

/**
 * This endpoint only accepts an active CONSOLE key, but an invalid key was sent. Key: console-xxxXXXxxxXXXxxx
 */
export class ConsoleV1ExperimentsControllerGenArchiveResponseBody extends Error {
    status: ConsoleV1ExperimentsControllerGenArchiveStatus;

    /** The original data that was passed to this error instance. */
    data$: ConsoleV1ExperimentsControllerGenArchiveResponseBodyData;

    constructor(err: ConsoleV1ExperimentsControllerGenArchiveResponseBodyData) {
        const message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : `API error occurred: ${JSON.stringify(err)}`;
        super(message);
        this.data$ = err;

        this.status = err.status;

        this.name = "ConsoleV1ExperimentsControllerGenArchiveResponseBody";
    }
}

/** @internal */
export const ConsoleV1ExperimentsControllerGenArchiveExperimentsStatus$inboundSchema: z.ZodNativeEnum<
    typeof ConsoleV1ExperimentsControllerGenArchiveExperimentsStatus
> = z.nativeEnum(ConsoleV1ExperimentsControllerGenArchiveExperimentsStatus);

/** @internal */
export const ConsoleV1ExperimentsControllerGenArchiveExperimentsStatus$outboundSchema: z.ZodNativeEnum<
    typeof ConsoleV1ExperimentsControllerGenArchiveExperimentsStatus
> = ConsoleV1ExperimentsControllerGenArchiveExperimentsStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConsoleV1ExperimentsControllerGenArchiveExperimentsStatus$ {
    /** @deprecated use `ConsoleV1ExperimentsControllerGenArchiveExperimentsStatus$inboundSchema` instead. */
    export const inboundSchema =
        ConsoleV1ExperimentsControllerGenArchiveExperimentsStatus$inboundSchema;
    /** @deprecated use `ConsoleV1ExperimentsControllerGenArchiveExperimentsStatus$outboundSchema` instead. */
    export const outboundSchema =
        ConsoleV1ExperimentsControllerGenArchiveExperimentsStatus$outboundSchema;
}

/** @internal */
export const ConsoleV1ExperimentsControllerGenArchiveExperimentsResponseBody$inboundSchema: z.ZodType<
    ConsoleV1ExperimentsControllerGenArchiveExperimentsResponseBody,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        status: ConsoleV1ExperimentsControllerGenArchiveExperimentsStatus$inboundSchema,
        message: z.string(),
    })
    .transform((v) => {
        return new ConsoleV1ExperimentsControllerGenArchiveExperimentsResponseBody(v);
    });

/** @internal */
export type ConsoleV1ExperimentsControllerGenArchiveExperimentsResponseBody$Outbound = {
    status: number;
    message: string;
};

/** @internal */
export const ConsoleV1ExperimentsControllerGenArchiveExperimentsResponseBody$outboundSchema: z.ZodType<
    ConsoleV1ExperimentsControllerGenArchiveExperimentsResponseBody$Outbound,
    z.ZodTypeDef,
    ConsoleV1ExperimentsControllerGenArchiveExperimentsResponseBody
> = z
    .instanceof(ConsoleV1ExperimentsControllerGenArchiveExperimentsResponseBody)
    .transform((v) => v.data$)
    .pipe(
        z.object({
            status: ConsoleV1ExperimentsControllerGenArchiveExperimentsStatus$outboundSchema,
            message: z.string(),
        })
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConsoleV1ExperimentsControllerGenArchiveExperimentsResponseBody$ {
    /** @deprecated use `ConsoleV1ExperimentsControllerGenArchiveExperimentsResponseBody$inboundSchema` instead. */
    export const inboundSchema =
        ConsoleV1ExperimentsControllerGenArchiveExperimentsResponseBody$inboundSchema;
    /** @deprecated use `ConsoleV1ExperimentsControllerGenArchiveExperimentsResponseBody$outboundSchema` instead. */
    export const outboundSchema =
        ConsoleV1ExperimentsControllerGenArchiveExperimentsResponseBody$outboundSchema;
    /** @deprecated use `ConsoleV1ExperimentsControllerGenArchiveExperimentsResponseBody$Outbound` instead. */
    export type Outbound = ConsoleV1ExperimentsControllerGenArchiveExperimentsResponseBody$Outbound;
}

/** @internal */
export const ConsoleV1ExperimentsControllerGenArchiveStatus$inboundSchema: z.ZodNativeEnum<
    typeof ConsoleV1ExperimentsControllerGenArchiveStatus
> = z.nativeEnum(ConsoleV1ExperimentsControllerGenArchiveStatus);

/** @internal */
export const ConsoleV1ExperimentsControllerGenArchiveStatus$outboundSchema: z.ZodNativeEnum<
    typeof ConsoleV1ExperimentsControllerGenArchiveStatus
> = ConsoleV1ExperimentsControllerGenArchiveStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConsoleV1ExperimentsControllerGenArchiveStatus$ {
    /** @deprecated use `ConsoleV1ExperimentsControllerGenArchiveStatus$inboundSchema` instead. */
    export const inboundSchema = ConsoleV1ExperimentsControllerGenArchiveStatus$inboundSchema;
    /** @deprecated use `ConsoleV1ExperimentsControllerGenArchiveStatus$outboundSchema` instead. */
    export const outboundSchema = ConsoleV1ExperimentsControllerGenArchiveStatus$outboundSchema;
}

/** @internal */
export const ConsoleV1ExperimentsControllerGenArchiveResponseBody$inboundSchema: z.ZodType<
    ConsoleV1ExperimentsControllerGenArchiveResponseBody,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        status: ConsoleV1ExperimentsControllerGenArchiveStatus$inboundSchema,
        message: z.string(),
    })
    .transform((v) => {
        return new ConsoleV1ExperimentsControllerGenArchiveResponseBody(v);
    });

/** @internal */
export type ConsoleV1ExperimentsControllerGenArchiveResponseBody$Outbound = {
    status: number;
    message: string;
};

/** @internal */
export const ConsoleV1ExperimentsControllerGenArchiveResponseBody$outboundSchema: z.ZodType<
    ConsoleV1ExperimentsControllerGenArchiveResponseBody$Outbound,
    z.ZodTypeDef,
    ConsoleV1ExperimentsControllerGenArchiveResponseBody
> = z
    .instanceof(ConsoleV1ExperimentsControllerGenArchiveResponseBody)
    .transform((v) => v.data$)
    .pipe(
        z.object({
            status: ConsoleV1ExperimentsControllerGenArchiveStatus$outboundSchema,
            message: z.string(),
        })
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConsoleV1ExperimentsControllerGenArchiveResponseBody$ {
    /** @deprecated use `ConsoleV1ExperimentsControllerGenArchiveResponseBody$inboundSchema` instead. */
    export const inboundSchema = ConsoleV1ExperimentsControllerGenArchiveResponseBody$inboundSchema;
    /** @deprecated use `ConsoleV1ExperimentsControllerGenArchiveResponseBody$outboundSchema` instead. */
    export const outboundSchema =
        ConsoleV1ExperimentsControllerGenArchiveResponseBody$outboundSchema;
    /** @deprecated use `ConsoleV1ExperimentsControllerGenArchiveResponseBody$Outbound` instead. */
    export type Outbound = ConsoleV1ExperimentsControllerGenArchiveResponseBody$Outbound;
}

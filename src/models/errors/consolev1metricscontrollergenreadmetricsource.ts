/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

export const ConsoleV1MetricsControllerGenReadMetricSourceMetricSourcesStatus = {
    FourHundredAndOne: 401,
} as const;
export type ConsoleV1MetricsControllerGenReadMetricSourceMetricSourcesStatus = ClosedEnum<
    typeof ConsoleV1MetricsControllerGenReadMetricSourceMetricSourcesStatus
>;

/**
 * This endpoint only accepts an active CONSOLE key, but an invalid key was sent. Key: console-xxxXXXxxxXXXxxx
 */
export type ConsoleV1MetricsControllerGenReadMetricSourceMetricSourcesResponseBodyData = {
    status: ConsoleV1MetricsControllerGenReadMetricSourceMetricSourcesStatus;
    message: string;
};

/**
 * This endpoint only accepts an active CONSOLE key, but an invalid key was sent. Key: console-xxxXXXxxxXXXxxx
 */
export class ConsoleV1MetricsControllerGenReadMetricSourceMetricSourcesResponseBody extends Error {
    status: ConsoleV1MetricsControllerGenReadMetricSourceMetricSourcesStatus;

    /** The original data that was passed to this error instance. */
    data$: ConsoleV1MetricsControllerGenReadMetricSourceMetricSourcesResponseBodyData;

    constructor(err: ConsoleV1MetricsControllerGenReadMetricSourceMetricSourcesResponseBodyData) {
        const message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : `API error occurred: ${JSON.stringify(err)}`;
        super(message);
        this.data$ = err;

        this.status = err.status;

        this.name = "ConsoleV1MetricsControllerGenReadMetricSourceMetricSourcesResponseBody";
    }
}

export const ConsoleV1MetricsControllerGenReadMetricSourceStatus = {
    FourHundred: 400,
} as const;
export type ConsoleV1MetricsControllerGenReadMetricSourceStatus = ClosedEnum<
    typeof ConsoleV1MetricsControllerGenReadMetricSourceStatus
>;

/**
 * Invalid request. Please check the request input and try again.
 */
export type ConsoleV1MetricsControllerGenReadMetricSourceResponseBodyData = {
    status: ConsoleV1MetricsControllerGenReadMetricSourceStatus;
    message: string;
};

/**
 * Invalid request. Please check the request input and try again.
 */
export class ConsoleV1MetricsControllerGenReadMetricSourceResponseBody extends Error {
    status: ConsoleV1MetricsControllerGenReadMetricSourceStatus;

    /** The original data that was passed to this error instance. */
    data$: ConsoleV1MetricsControllerGenReadMetricSourceResponseBodyData;

    constructor(err: ConsoleV1MetricsControllerGenReadMetricSourceResponseBodyData) {
        const message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : `API error occurred: ${JSON.stringify(err)}`;
        super(message);
        this.data$ = err;

        this.status = err.status;

        this.name = "ConsoleV1MetricsControllerGenReadMetricSourceResponseBody";
    }
}

/** @internal */
export const ConsoleV1MetricsControllerGenReadMetricSourceMetricSourcesStatus$inboundSchema: z.ZodNativeEnum<
    typeof ConsoleV1MetricsControllerGenReadMetricSourceMetricSourcesStatus
> = z.nativeEnum(ConsoleV1MetricsControllerGenReadMetricSourceMetricSourcesStatus);

/** @internal */
export const ConsoleV1MetricsControllerGenReadMetricSourceMetricSourcesStatus$outboundSchema: z.ZodNativeEnum<
    typeof ConsoleV1MetricsControllerGenReadMetricSourceMetricSourcesStatus
> = ConsoleV1MetricsControllerGenReadMetricSourceMetricSourcesStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConsoleV1MetricsControllerGenReadMetricSourceMetricSourcesStatus$ {
    /** @deprecated use `ConsoleV1MetricsControllerGenReadMetricSourceMetricSourcesStatus$inboundSchema` instead. */
    export const inboundSchema =
        ConsoleV1MetricsControllerGenReadMetricSourceMetricSourcesStatus$inboundSchema;
    /** @deprecated use `ConsoleV1MetricsControllerGenReadMetricSourceMetricSourcesStatus$outboundSchema` instead. */
    export const outboundSchema =
        ConsoleV1MetricsControllerGenReadMetricSourceMetricSourcesStatus$outboundSchema;
}

/** @internal */
export const ConsoleV1MetricsControllerGenReadMetricSourceMetricSourcesResponseBody$inboundSchema: z.ZodType<
    ConsoleV1MetricsControllerGenReadMetricSourceMetricSourcesResponseBody,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        status: ConsoleV1MetricsControllerGenReadMetricSourceMetricSourcesStatus$inboundSchema,
        message: z.string(),
    })
    .transform((v) => {
        return new ConsoleV1MetricsControllerGenReadMetricSourceMetricSourcesResponseBody(v);
    });

/** @internal */
export type ConsoleV1MetricsControllerGenReadMetricSourceMetricSourcesResponseBody$Outbound = {
    status: number;
    message: string;
};

/** @internal */
export const ConsoleV1MetricsControllerGenReadMetricSourceMetricSourcesResponseBody$outboundSchema: z.ZodType<
    ConsoleV1MetricsControllerGenReadMetricSourceMetricSourcesResponseBody$Outbound,
    z.ZodTypeDef,
    ConsoleV1MetricsControllerGenReadMetricSourceMetricSourcesResponseBody
> = z
    .instanceof(ConsoleV1MetricsControllerGenReadMetricSourceMetricSourcesResponseBody)
    .transform((v) => v.data$)
    .pipe(
        z.object({
            status: ConsoleV1MetricsControllerGenReadMetricSourceMetricSourcesStatus$outboundSchema,
            message: z.string(),
        })
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConsoleV1MetricsControllerGenReadMetricSourceMetricSourcesResponseBody$ {
    /** @deprecated use `ConsoleV1MetricsControllerGenReadMetricSourceMetricSourcesResponseBody$inboundSchema` instead. */
    export const inboundSchema =
        ConsoleV1MetricsControllerGenReadMetricSourceMetricSourcesResponseBody$inboundSchema;
    /** @deprecated use `ConsoleV1MetricsControllerGenReadMetricSourceMetricSourcesResponseBody$outboundSchema` instead. */
    export const outboundSchema =
        ConsoleV1MetricsControllerGenReadMetricSourceMetricSourcesResponseBody$outboundSchema;
    /** @deprecated use `ConsoleV1MetricsControllerGenReadMetricSourceMetricSourcesResponseBody$Outbound` instead. */
    export type Outbound =
        ConsoleV1MetricsControllerGenReadMetricSourceMetricSourcesResponseBody$Outbound;
}

/** @internal */
export const ConsoleV1MetricsControllerGenReadMetricSourceStatus$inboundSchema: z.ZodNativeEnum<
    typeof ConsoleV1MetricsControllerGenReadMetricSourceStatus
> = z.nativeEnum(ConsoleV1MetricsControllerGenReadMetricSourceStatus);

/** @internal */
export const ConsoleV1MetricsControllerGenReadMetricSourceStatus$outboundSchema: z.ZodNativeEnum<
    typeof ConsoleV1MetricsControllerGenReadMetricSourceStatus
> = ConsoleV1MetricsControllerGenReadMetricSourceStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConsoleV1MetricsControllerGenReadMetricSourceStatus$ {
    /** @deprecated use `ConsoleV1MetricsControllerGenReadMetricSourceStatus$inboundSchema` instead. */
    export const inboundSchema = ConsoleV1MetricsControllerGenReadMetricSourceStatus$inboundSchema;
    /** @deprecated use `ConsoleV1MetricsControllerGenReadMetricSourceStatus$outboundSchema` instead. */
    export const outboundSchema =
        ConsoleV1MetricsControllerGenReadMetricSourceStatus$outboundSchema;
}

/** @internal */
export const ConsoleV1MetricsControllerGenReadMetricSourceResponseBody$inboundSchema: z.ZodType<
    ConsoleV1MetricsControllerGenReadMetricSourceResponseBody,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        status: ConsoleV1MetricsControllerGenReadMetricSourceStatus$inboundSchema,
        message: z.string(),
    })
    .transform((v) => {
        return new ConsoleV1MetricsControllerGenReadMetricSourceResponseBody(v);
    });

/** @internal */
export type ConsoleV1MetricsControllerGenReadMetricSourceResponseBody$Outbound = {
    status: number;
    message: string;
};

/** @internal */
export const ConsoleV1MetricsControllerGenReadMetricSourceResponseBody$outboundSchema: z.ZodType<
    ConsoleV1MetricsControllerGenReadMetricSourceResponseBody$Outbound,
    z.ZodTypeDef,
    ConsoleV1MetricsControllerGenReadMetricSourceResponseBody
> = z
    .instanceof(ConsoleV1MetricsControllerGenReadMetricSourceResponseBody)
    .transform((v) => v.data$)
    .pipe(
        z.object({
            status: ConsoleV1MetricsControllerGenReadMetricSourceStatus$outboundSchema,
            message: z.string(),
        })
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConsoleV1MetricsControllerGenReadMetricSourceResponseBody$ {
    /** @deprecated use `ConsoleV1MetricsControllerGenReadMetricSourceResponseBody$inboundSchema` instead. */
    export const inboundSchema =
        ConsoleV1MetricsControllerGenReadMetricSourceResponseBody$inboundSchema;
    /** @deprecated use `ConsoleV1MetricsControllerGenReadMetricSourceResponseBody$outboundSchema` instead. */
    export const outboundSchema =
        ConsoleV1MetricsControllerGenReadMetricSourceResponseBody$outboundSchema;
    /** @deprecated use `ConsoleV1MetricsControllerGenReadMetricSourceResponseBody$Outbound` instead. */
    export type Outbound = ConsoleV1MetricsControllerGenReadMetricSourceResponseBody$Outbound;
}

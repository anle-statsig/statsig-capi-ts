/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

export const ConsoleV1ExperimentsControllerGenStartExperimentsResponseStatus = {
    FourHundredAndFour: 404,
} as const;
export type ConsoleV1ExperimentsControllerGenStartExperimentsResponseStatus = ClosedEnum<
    typeof ConsoleV1ExperimentsControllerGenStartExperimentsResponseStatus
>;

/**
 * Experiment not found.
 */
export type ConsoleV1ExperimentsControllerGenStartExperimentsResponseResponseBodyData = {
    status: ConsoleV1ExperimentsControllerGenStartExperimentsResponseStatus;
    message: string;
};

/**
 * Experiment not found.
 */
export class ConsoleV1ExperimentsControllerGenStartExperimentsResponseResponseBody extends Error {
    status: ConsoleV1ExperimentsControllerGenStartExperimentsResponseStatus;

    /** The original data that was passed to this error instance. */
    data$: ConsoleV1ExperimentsControllerGenStartExperimentsResponseResponseBodyData;

    constructor(err: ConsoleV1ExperimentsControllerGenStartExperimentsResponseResponseBodyData) {
        const message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : `API error occurred: ${JSON.stringify(err)}`;
        super(message);
        this.data$ = err;

        this.status = err.status;

        this.name = "ConsoleV1ExperimentsControllerGenStartExperimentsResponseResponseBody";
    }
}

export const ConsoleV1ExperimentsControllerGenStartExperimentsStatus = {
    FourHundredAndOne: 401,
} as const;
export type ConsoleV1ExperimentsControllerGenStartExperimentsStatus = ClosedEnum<
    typeof ConsoleV1ExperimentsControllerGenStartExperimentsStatus
>;

/**
 * This endpoint only accepts an active CONSOLE key, but an invalid key was sent. Key: console-xxxXXXxxxXXXxxx
 */
export type ConsoleV1ExperimentsControllerGenStartExperimentsResponseBodyData = {
    status: ConsoleV1ExperimentsControllerGenStartExperimentsStatus;
    message: string;
};

/**
 * This endpoint only accepts an active CONSOLE key, but an invalid key was sent. Key: console-xxxXXXxxxXXXxxx
 */
export class ConsoleV1ExperimentsControllerGenStartExperimentsResponseBody extends Error {
    status: ConsoleV1ExperimentsControllerGenStartExperimentsStatus;

    /** The original data that was passed to this error instance. */
    data$: ConsoleV1ExperimentsControllerGenStartExperimentsResponseBodyData;

    constructor(err: ConsoleV1ExperimentsControllerGenStartExperimentsResponseBodyData) {
        const message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : `API error occurred: ${JSON.stringify(err)}`;
        super(message);
        this.data$ = err;

        this.status = err.status;

        this.name = "ConsoleV1ExperimentsControllerGenStartExperimentsResponseBody";
    }
}

export const ConsoleV1ExperimentsControllerGenStartStatus = {
    FourHundred: 400,
} as const;
export type ConsoleV1ExperimentsControllerGenStartStatus = ClosedEnum<
    typeof ConsoleV1ExperimentsControllerGenStartStatus
>;

/**
 * Experiment has not yet started
 */
export type ConsoleV1ExperimentsControllerGenStartResponseBodyData = {
    status: ConsoleV1ExperimentsControllerGenStartStatus;
    message: string;
};

/**
 * Experiment has not yet started
 */
export class ConsoleV1ExperimentsControllerGenStartResponseBody extends Error {
    status: ConsoleV1ExperimentsControllerGenStartStatus;

    /** The original data that was passed to this error instance. */
    data$: ConsoleV1ExperimentsControllerGenStartResponseBodyData;

    constructor(err: ConsoleV1ExperimentsControllerGenStartResponseBodyData) {
        const message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : `API error occurred: ${JSON.stringify(err)}`;
        super(message);
        this.data$ = err;

        this.status = err.status;

        this.name = "ConsoleV1ExperimentsControllerGenStartResponseBody";
    }
}

/** @internal */
export const ConsoleV1ExperimentsControllerGenStartExperimentsResponseStatus$inboundSchema: z.ZodNativeEnum<
    typeof ConsoleV1ExperimentsControllerGenStartExperimentsResponseStatus
> = z.nativeEnum(ConsoleV1ExperimentsControllerGenStartExperimentsResponseStatus);

/** @internal */
export const ConsoleV1ExperimentsControllerGenStartExperimentsResponseStatus$outboundSchema: z.ZodNativeEnum<
    typeof ConsoleV1ExperimentsControllerGenStartExperimentsResponseStatus
> = ConsoleV1ExperimentsControllerGenStartExperimentsResponseStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConsoleV1ExperimentsControllerGenStartExperimentsResponseStatus$ {
    /** @deprecated use `ConsoleV1ExperimentsControllerGenStartExperimentsResponseStatus$inboundSchema` instead. */
    export const inboundSchema =
        ConsoleV1ExperimentsControllerGenStartExperimentsResponseStatus$inboundSchema;
    /** @deprecated use `ConsoleV1ExperimentsControllerGenStartExperimentsResponseStatus$outboundSchema` instead. */
    export const outboundSchema =
        ConsoleV1ExperimentsControllerGenStartExperimentsResponseStatus$outboundSchema;
}

/** @internal */
export const ConsoleV1ExperimentsControllerGenStartExperimentsResponseResponseBody$inboundSchema: z.ZodType<
    ConsoleV1ExperimentsControllerGenStartExperimentsResponseResponseBody,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        status: ConsoleV1ExperimentsControllerGenStartExperimentsResponseStatus$inboundSchema,
        message: z.string(),
    })
    .transform((v) => {
        return new ConsoleV1ExperimentsControllerGenStartExperimentsResponseResponseBody(v);
    });

/** @internal */
export type ConsoleV1ExperimentsControllerGenStartExperimentsResponseResponseBody$Outbound = {
    status: number;
    message: string;
};

/** @internal */
export const ConsoleV1ExperimentsControllerGenStartExperimentsResponseResponseBody$outboundSchema: z.ZodType<
    ConsoleV1ExperimentsControllerGenStartExperimentsResponseResponseBody$Outbound,
    z.ZodTypeDef,
    ConsoleV1ExperimentsControllerGenStartExperimentsResponseResponseBody
> = z
    .instanceof(ConsoleV1ExperimentsControllerGenStartExperimentsResponseResponseBody)
    .transform((v) => v.data$)
    .pipe(
        z.object({
            status: ConsoleV1ExperimentsControllerGenStartExperimentsResponseStatus$outboundSchema,
            message: z.string(),
        })
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConsoleV1ExperimentsControllerGenStartExperimentsResponseResponseBody$ {
    /** @deprecated use `ConsoleV1ExperimentsControllerGenStartExperimentsResponseResponseBody$inboundSchema` instead. */
    export const inboundSchema =
        ConsoleV1ExperimentsControllerGenStartExperimentsResponseResponseBody$inboundSchema;
    /** @deprecated use `ConsoleV1ExperimentsControllerGenStartExperimentsResponseResponseBody$outboundSchema` instead. */
    export const outboundSchema =
        ConsoleV1ExperimentsControllerGenStartExperimentsResponseResponseBody$outboundSchema;
    /** @deprecated use `ConsoleV1ExperimentsControllerGenStartExperimentsResponseResponseBody$Outbound` instead. */
    export type Outbound =
        ConsoleV1ExperimentsControllerGenStartExperimentsResponseResponseBody$Outbound;
}

/** @internal */
export const ConsoleV1ExperimentsControllerGenStartExperimentsStatus$inboundSchema: z.ZodNativeEnum<
    typeof ConsoleV1ExperimentsControllerGenStartExperimentsStatus
> = z.nativeEnum(ConsoleV1ExperimentsControllerGenStartExperimentsStatus);

/** @internal */
export const ConsoleV1ExperimentsControllerGenStartExperimentsStatus$outboundSchema: z.ZodNativeEnum<
    typeof ConsoleV1ExperimentsControllerGenStartExperimentsStatus
> = ConsoleV1ExperimentsControllerGenStartExperimentsStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConsoleV1ExperimentsControllerGenStartExperimentsStatus$ {
    /** @deprecated use `ConsoleV1ExperimentsControllerGenStartExperimentsStatus$inboundSchema` instead. */
    export const inboundSchema =
        ConsoleV1ExperimentsControllerGenStartExperimentsStatus$inboundSchema;
    /** @deprecated use `ConsoleV1ExperimentsControllerGenStartExperimentsStatus$outboundSchema` instead. */
    export const outboundSchema =
        ConsoleV1ExperimentsControllerGenStartExperimentsStatus$outboundSchema;
}

/** @internal */
export const ConsoleV1ExperimentsControllerGenStartExperimentsResponseBody$inboundSchema: z.ZodType<
    ConsoleV1ExperimentsControllerGenStartExperimentsResponseBody,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        status: ConsoleV1ExperimentsControllerGenStartExperimentsStatus$inboundSchema,
        message: z.string(),
    })
    .transform((v) => {
        return new ConsoleV1ExperimentsControllerGenStartExperimentsResponseBody(v);
    });

/** @internal */
export type ConsoleV1ExperimentsControllerGenStartExperimentsResponseBody$Outbound = {
    status: number;
    message: string;
};

/** @internal */
export const ConsoleV1ExperimentsControllerGenStartExperimentsResponseBody$outboundSchema: z.ZodType<
    ConsoleV1ExperimentsControllerGenStartExperimentsResponseBody$Outbound,
    z.ZodTypeDef,
    ConsoleV1ExperimentsControllerGenStartExperimentsResponseBody
> = z
    .instanceof(ConsoleV1ExperimentsControllerGenStartExperimentsResponseBody)
    .transform((v) => v.data$)
    .pipe(
        z.object({
            status: ConsoleV1ExperimentsControllerGenStartExperimentsStatus$outboundSchema,
            message: z.string(),
        })
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConsoleV1ExperimentsControllerGenStartExperimentsResponseBody$ {
    /** @deprecated use `ConsoleV1ExperimentsControllerGenStartExperimentsResponseBody$inboundSchema` instead. */
    export const inboundSchema =
        ConsoleV1ExperimentsControllerGenStartExperimentsResponseBody$inboundSchema;
    /** @deprecated use `ConsoleV1ExperimentsControllerGenStartExperimentsResponseBody$outboundSchema` instead. */
    export const outboundSchema =
        ConsoleV1ExperimentsControllerGenStartExperimentsResponseBody$outboundSchema;
    /** @deprecated use `ConsoleV1ExperimentsControllerGenStartExperimentsResponseBody$Outbound` instead. */
    export type Outbound = ConsoleV1ExperimentsControllerGenStartExperimentsResponseBody$Outbound;
}

/** @internal */
export const ConsoleV1ExperimentsControllerGenStartStatus$inboundSchema: z.ZodNativeEnum<
    typeof ConsoleV1ExperimentsControllerGenStartStatus
> = z.nativeEnum(ConsoleV1ExperimentsControllerGenStartStatus);

/** @internal */
export const ConsoleV1ExperimentsControllerGenStartStatus$outboundSchema: z.ZodNativeEnum<
    typeof ConsoleV1ExperimentsControllerGenStartStatus
> = ConsoleV1ExperimentsControllerGenStartStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConsoleV1ExperimentsControllerGenStartStatus$ {
    /** @deprecated use `ConsoleV1ExperimentsControllerGenStartStatus$inboundSchema` instead. */
    export const inboundSchema = ConsoleV1ExperimentsControllerGenStartStatus$inboundSchema;
    /** @deprecated use `ConsoleV1ExperimentsControllerGenStartStatus$outboundSchema` instead. */
    export const outboundSchema = ConsoleV1ExperimentsControllerGenStartStatus$outboundSchema;
}

/** @internal */
export const ConsoleV1ExperimentsControllerGenStartResponseBody$inboundSchema: z.ZodType<
    ConsoleV1ExperimentsControllerGenStartResponseBody,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        status: ConsoleV1ExperimentsControllerGenStartStatus$inboundSchema,
        message: z.string(),
    })
    .transform((v) => {
        return new ConsoleV1ExperimentsControllerGenStartResponseBody(v);
    });

/** @internal */
export type ConsoleV1ExperimentsControllerGenStartResponseBody$Outbound = {
    status: number;
    message: string;
};

/** @internal */
export const ConsoleV1ExperimentsControllerGenStartResponseBody$outboundSchema: z.ZodType<
    ConsoleV1ExperimentsControllerGenStartResponseBody$Outbound,
    z.ZodTypeDef,
    ConsoleV1ExperimentsControllerGenStartResponseBody
> = z
    .instanceof(ConsoleV1ExperimentsControllerGenStartResponseBody)
    .transform((v) => v.data$)
    .pipe(
        z.object({
            status: ConsoleV1ExperimentsControllerGenStartStatus$outboundSchema,
            message: z.string(),
        })
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConsoleV1ExperimentsControllerGenStartResponseBody$ {
    /** @deprecated use `ConsoleV1ExperimentsControllerGenStartResponseBody$inboundSchema` instead. */
    export const inboundSchema = ConsoleV1ExperimentsControllerGenStartResponseBody$inboundSchema;
    /** @deprecated use `ConsoleV1ExperimentsControllerGenStartResponseBody$outboundSchema` instead. */
    export const outboundSchema = ConsoleV1ExperimentsControllerGenStartResponseBody$outboundSchema;
    /** @deprecated use `ConsoleV1ExperimentsControllerGenStartResponseBody$Outbound` instead. */
    export type Outbound = ConsoleV1ExperimentsControllerGenStartResponseBody$Outbound;
}

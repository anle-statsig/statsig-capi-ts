/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

export const ConsoleV1SegmentsControllerGenRemoveSegmentsStatus = {
    FourHundredAndFour: 404,
} as const;
export type ConsoleV1SegmentsControllerGenRemoveSegmentsStatus = ClosedEnum<
    typeof ConsoleV1SegmentsControllerGenRemoveSegmentsStatus
>;

/**
 * Segment not found.
 */
export type ConsoleV1SegmentsControllerGenRemoveSegmentsResponseBodyData = {
    status: ConsoleV1SegmentsControllerGenRemoveSegmentsStatus;
    message: string;
};

/**
 * Segment not found.
 */
export class ConsoleV1SegmentsControllerGenRemoveSegmentsResponseBody extends Error {
    status: ConsoleV1SegmentsControllerGenRemoveSegmentsStatus;

    /** The original data that was passed to this error instance. */
    data$: ConsoleV1SegmentsControllerGenRemoveSegmentsResponseBodyData;

    constructor(err: ConsoleV1SegmentsControllerGenRemoveSegmentsResponseBodyData) {
        const message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : `API error occurred: ${JSON.stringify(err)}`;
        super(message);
        this.data$ = err;

        this.status = err.status;

        this.name = "ConsoleV1SegmentsControllerGenRemoveSegmentsResponseBody";
    }
}

export const ConsoleV1SegmentsControllerGenRemoveStatus = {
    FourHundredAndOne: 401,
} as const;
export type ConsoleV1SegmentsControllerGenRemoveStatus = ClosedEnum<
    typeof ConsoleV1SegmentsControllerGenRemoveStatus
>;

/**
 * This endpoint only accepts an active CONSOLE key, but an invalid key was sent. Key: console-xxxXXXxxxXXXxxx
 */
export type ConsoleV1SegmentsControllerGenRemoveResponseBodyData = {
    status: ConsoleV1SegmentsControllerGenRemoveStatus;
    message: string;
};

/**
 * This endpoint only accepts an active CONSOLE key, but an invalid key was sent. Key: console-xxxXXXxxxXXXxxx
 */
export class ConsoleV1SegmentsControllerGenRemoveResponseBody extends Error {
    status: ConsoleV1SegmentsControllerGenRemoveStatus;

    /** The original data that was passed to this error instance. */
    data$: ConsoleV1SegmentsControllerGenRemoveResponseBodyData;

    constructor(err: ConsoleV1SegmentsControllerGenRemoveResponseBodyData) {
        const message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : `API error occurred: ${JSON.stringify(err)}`;
        super(message);
        this.data$ = err;

        this.status = err.status;

        this.name = "ConsoleV1SegmentsControllerGenRemoveResponseBody";
    }
}

/** @internal */
export const ConsoleV1SegmentsControllerGenRemoveSegmentsStatus$inboundSchema: z.ZodNativeEnum<
    typeof ConsoleV1SegmentsControllerGenRemoveSegmentsStatus
> = z.nativeEnum(ConsoleV1SegmentsControllerGenRemoveSegmentsStatus);

/** @internal */
export const ConsoleV1SegmentsControllerGenRemoveSegmentsStatus$outboundSchema: z.ZodNativeEnum<
    typeof ConsoleV1SegmentsControllerGenRemoveSegmentsStatus
> = ConsoleV1SegmentsControllerGenRemoveSegmentsStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConsoleV1SegmentsControllerGenRemoveSegmentsStatus$ {
    /** @deprecated use `ConsoleV1SegmentsControllerGenRemoveSegmentsStatus$inboundSchema` instead. */
    export const inboundSchema = ConsoleV1SegmentsControllerGenRemoveSegmentsStatus$inboundSchema;
    /** @deprecated use `ConsoleV1SegmentsControllerGenRemoveSegmentsStatus$outboundSchema` instead. */
    export const outboundSchema = ConsoleV1SegmentsControllerGenRemoveSegmentsStatus$outboundSchema;
}

/** @internal */
export const ConsoleV1SegmentsControllerGenRemoveSegmentsResponseBody$inboundSchema: z.ZodType<
    ConsoleV1SegmentsControllerGenRemoveSegmentsResponseBody,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        status: ConsoleV1SegmentsControllerGenRemoveSegmentsStatus$inboundSchema,
        message: z.string(),
    })
    .transform((v) => {
        return new ConsoleV1SegmentsControllerGenRemoveSegmentsResponseBody(v);
    });

/** @internal */
export type ConsoleV1SegmentsControllerGenRemoveSegmentsResponseBody$Outbound = {
    status: number;
    message: string;
};

/** @internal */
export const ConsoleV1SegmentsControllerGenRemoveSegmentsResponseBody$outboundSchema: z.ZodType<
    ConsoleV1SegmentsControllerGenRemoveSegmentsResponseBody$Outbound,
    z.ZodTypeDef,
    ConsoleV1SegmentsControllerGenRemoveSegmentsResponseBody
> = z
    .instanceof(ConsoleV1SegmentsControllerGenRemoveSegmentsResponseBody)
    .transform((v) => v.data$)
    .pipe(
        z.object({
            status: ConsoleV1SegmentsControllerGenRemoveSegmentsStatus$outboundSchema,
            message: z.string(),
        })
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConsoleV1SegmentsControllerGenRemoveSegmentsResponseBody$ {
    /** @deprecated use `ConsoleV1SegmentsControllerGenRemoveSegmentsResponseBody$inboundSchema` instead. */
    export const inboundSchema =
        ConsoleV1SegmentsControllerGenRemoveSegmentsResponseBody$inboundSchema;
    /** @deprecated use `ConsoleV1SegmentsControllerGenRemoveSegmentsResponseBody$outboundSchema` instead. */
    export const outboundSchema =
        ConsoleV1SegmentsControllerGenRemoveSegmentsResponseBody$outboundSchema;
    /** @deprecated use `ConsoleV1SegmentsControllerGenRemoveSegmentsResponseBody$Outbound` instead. */
    export type Outbound = ConsoleV1SegmentsControllerGenRemoveSegmentsResponseBody$Outbound;
}

/** @internal */
export const ConsoleV1SegmentsControllerGenRemoveStatus$inboundSchema: z.ZodNativeEnum<
    typeof ConsoleV1SegmentsControllerGenRemoveStatus
> = z.nativeEnum(ConsoleV1SegmentsControllerGenRemoveStatus);

/** @internal */
export const ConsoleV1SegmentsControllerGenRemoveStatus$outboundSchema: z.ZodNativeEnum<
    typeof ConsoleV1SegmentsControllerGenRemoveStatus
> = ConsoleV1SegmentsControllerGenRemoveStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConsoleV1SegmentsControllerGenRemoveStatus$ {
    /** @deprecated use `ConsoleV1SegmentsControllerGenRemoveStatus$inboundSchema` instead. */
    export const inboundSchema = ConsoleV1SegmentsControllerGenRemoveStatus$inboundSchema;
    /** @deprecated use `ConsoleV1SegmentsControllerGenRemoveStatus$outboundSchema` instead. */
    export const outboundSchema = ConsoleV1SegmentsControllerGenRemoveStatus$outboundSchema;
}

/** @internal */
export const ConsoleV1SegmentsControllerGenRemoveResponseBody$inboundSchema: z.ZodType<
    ConsoleV1SegmentsControllerGenRemoveResponseBody,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        status: ConsoleV1SegmentsControllerGenRemoveStatus$inboundSchema,
        message: z.string(),
    })
    .transform((v) => {
        return new ConsoleV1SegmentsControllerGenRemoveResponseBody(v);
    });

/** @internal */
export type ConsoleV1SegmentsControllerGenRemoveResponseBody$Outbound = {
    status: number;
    message: string;
};

/** @internal */
export const ConsoleV1SegmentsControllerGenRemoveResponseBody$outboundSchema: z.ZodType<
    ConsoleV1SegmentsControllerGenRemoveResponseBody$Outbound,
    z.ZodTypeDef,
    ConsoleV1SegmentsControllerGenRemoveResponseBody
> = z
    .instanceof(ConsoleV1SegmentsControllerGenRemoveResponseBody)
    .transform((v) => v.data$)
    .pipe(
        z.object({
            status: ConsoleV1SegmentsControllerGenRemoveStatus$outboundSchema,
            message: z.string(),
        })
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConsoleV1SegmentsControllerGenRemoveResponseBody$ {
    /** @deprecated use `ConsoleV1SegmentsControllerGenRemoveResponseBody$inboundSchema` instead. */
    export const inboundSchema = ConsoleV1SegmentsControllerGenRemoveResponseBody$inboundSchema;
    /** @deprecated use `ConsoleV1SegmentsControllerGenRemoveResponseBody$outboundSchema` instead. */
    export const outboundSchema = ConsoleV1SegmentsControllerGenRemoveResponseBody$outboundSchema;
    /** @deprecated use `ConsoleV1SegmentsControllerGenRemoveResponseBody$Outbound` instead. */
    export type Outbound = ConsoleV1SegmentsControllerGenRemoveResponseBody$Outbound;
}

/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

export const ConsoleV1UsageControllerGenReportUsageStatus = {
    FourHundredAndOne: 401,
} as const;
export type ConsoleV1UsageControllerGenReportUsageStatus = ClosedEnum<
    typeof ConsoleV1UsageControllerGenReportUsageStatus
>;

/**
 * This endpoint only accepts an active CONSOLE key, but an invalid key was sent. Key: console-xxxXXXxxxXXXxxx
 */
export type ConsoleV1UsageControllerGenReportUsageResponseBodyData = {
    status: ConsoleV1UsageControllerGenReportUsageStatus;
    message: string;
};

/**
 * This endpoint only accepts an active CONSOLE key, but an invalid key was sent. Key: console-xxxXXXxxxXXXxxx
 */
export class ConsoleV1UsageControllerGenReportUsageResponseBody extends Error {
    status: ConsoleV1UsageControllerGenReportUsageStatus;

    /** The original data that was passed to this error instance. */
    data$: ConsoleV1UsageControllerGenReportUsageResponseBodyData;

    constructor(err: ConsoleV1UsageControllerGenReportUsageResponseBodyData) {
        const message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : `API error occurred: ${JSON.stringify(err)}`;
        super(message);
        this.data$ = err;

        this.status = err.status;

        this.name = "ConsoleV1UsageControllerGenReportUsageResponseBody";
    }
}

export const ConsoleV1UsageControllerGenReportStatus = {
    FourHundred: 400,
} as const;
export type ConsoleV1UsageControllerGenReportStatus = ClosedEnum<
    typeof ConsoleV1UsageControllerGenReportStatus
>;

/**
 * Data is not available
 */
export type ConsoleV1UsageControllerGenReportResponseBodyData = {
    status: ConsoleV1UsageControllerGenReportStatus;
    message: string;
};

/**
 * Data is not available
 */
export class ConsoleV1UsageControllerGenReportResponseBody extends Error {
    status: ConsoleV1UsageControllerGenReportStatus;

    /** The original data that was passed to this error instance. */
    data$: ConsoleV1UsageControllerGenReportResponseBodyData;

    constructor(err: ConsoleV1UsageControllerGenReportResponseBodyData) {
        const message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : `API error occurred: ${JSON.stringify(err)}`;
        super(message);
        this.data$ = err;

        this.status = err.status;

        this.name = "ConsoleV1UsageControllerGenReportResponseBody";
    }
}

/** @internal */
export const ConsoleV1UsageControllerGenReportUsageStatus$inboundSchema: z.ZodNativeEnum<
    typeof ConsoleV1UsageControllerGenReportUsageStatus
> = z.nativeEnum(ConsoleV1UsageControllerGenReportUsageStatus);

/** @internal */
export const ConsoleV1UsageControllerGenReportUsageStatus$outboundSchema: z.ZodNativeEnum<
    typeof ConsoleV1UsageControllerGenReportUsageStatus
> = ConsoleV1UsageControllerGenReportUsageStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConsoleV1UsageControllerGenReportUsageStatus$ {
    /** @deprecated use `ConsoleV1UsageControllerGenReportUsageStatus$inboundSchema` instead. */
    export const inboundSchema = ConsoleV1UsageControllerGenReportUsageStatus$inboundSchema;
    /** @deprecated use `ConsoleV1UsageControllerGenReportUsageStatus$outboundSchema` instead. */
    export const outboundSchema = ConsoleV1UsageControllerGenReportUsageStatus$outboundSchema;
}

/** @internal */
export const ConsoleV1UsageControllerGenReportUsageResponseBody$inboundSchema: z.ZodType<
    ConsoleV1UsageControllerGenReportUsageResponseBody,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        status: ConsoleV1UsageControllerGenReportUsageStatus$inboundSchema,
        message: z.string(),
    })
    .transform((v) => {
        return new ConsoleV1UsageControllerGenReportUsageResponseBody(v);
    });

/** @internal */
export type ConsoleV1UsageControllerGenReportUsageResponseBody$Outbound = {
    status: number;
    message: string;
};

/** @internal */
export const ConsoleV1UsageControllerGenReportUsageResponseBody$outboundSchema: z.ZodType<
    ConsoleV1UsageControllerGenReportUsageResponseBody$Outbound,
    z.ZodTypeDef,
    ConsoleV1UsageControllerGenReportUsageResponseBody
> = z
    .instanceof(ConsoleV1UsageControllerGenReportUsageResponseBody)
    .transform((v) => v.data$)
    .pipe(
        z.object({
            status: ConsoleV1UsageControllerGenReportUsageStatus$outboundSchema,
            message: z.string(),
        })
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConsoleV1UsageControllerGenReportUsageResponseBody$ {
    /** @deprecated use `ConsoleV1UsageControllerGenReportUsageResponseBody$inboundSchema` instead. */
    export const inboundSchema = ConsoleV1UsageControllerGenReportUsageResponseBody$inboundSchema;
    /** @deprecated use `ConsoleV1UsageControllerGenReportUsageResponseBody$outboundSchema` instead. */
    export const outboundSchema = ConsoleV1UsageControllerGenReportUsageResponseBody$outboundSchema;
    /** @deprecated use `ConsoleV1UsageControllerGenReportUsageResponseBody$Outbound` instead. */
    export type Outbound = ConsoleV1UsageControllerGenReportUsageResponseBody$Outbound;
}

/** @internal */
export const ConsoleV1UsageControllerGenReportStatus$inboundSchema: z.ZodNativeEnum<
    typeof ConsoleV1UsageControllerGenReportStatus
> = z.nativeEnum(ConsoleV1UsageControllerGenReportStatus);

/** @internal */
export const ConsoleV1UsageControllerGenReportStatus$outboundSchema: z.ZodNativeEnum<
    typeof ConsoleV1UsageControllerGenReportStatus
> = ConsoleV1UsageControllerGenReportStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConsoleV1UsageControllerGenReportStatus$ {
    /** @deprecated use `ConsoleV1UsageControllerGenReportStatus$inboundSchema` instead. */
    export const inboundSchema = ConsoleV1UsageControllerGenReportStatus$inboundSchema;
    /** @deprecated use `ConsoleV1UsageControllerGenReportStatus$outboundSchema` instead. */
    export const outboundSchema = ConsoleV1UsageControllerGenReportStatus$outboundSchema;
}

/** @internal */
export const ConsoleV1UsageControllerGenReportResponseBody$inboundSchema: z.ZodType<
    ConsoleV1UsageControllerGenReportResponseBody,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        status: ConsoleV1UsageControllerGenReportStatus$inboundSchema,
        message: z.string(),
    })
    .transform((v) => {
        return new ConsoleV1UsageControllerGenReportResponseBody(v);
    });

/** @internal */
export type ConsoleV1UsageControllerGenReportResponseBody$Outbound = {
    status: number;
    message: string;
};

/** @internal */
export const ConsoleV1UsageControllerGenReportResponseBody$outboundSchema: z.ZodType<
    ConsoleV1UsageControllerGenReportResponseBody$Outbound,
    z.ZodTypeDef,
    ConsoleV1UsageControllerGenReportResponseBody
> = z
    .instanceof(ConsoleV1UsageControllerGenReportResponseBody)
    .transform((v) => v.data$)
    .pipe(
        z.object({
            status: ConsoleV1UsageControllerGenReportStatus$outboundSchema,
            message: z.string(),
        })
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConsoleV1UsageControllerGenReportResponseBody$ {
    /** @deprecated use `ConsoleV1UsageControllerGenReportResponseBody$inboundSchema` instead. */
    export const inboundSchema = ConsoleV1UsageControllerGenReportResponseBody$inboundSchema;
    /** @deprecated use `ConsoleV1UsageControllerGenReportResponseBody$outboundSchema` instead. */
    export const outboundSchema = ConsoleV1UsageControllerGenReportResponseBody$outboundSchema;
    /** @deprecated use `ConsoleV1UsageControllerGenReportResponseBody$Outbound` instead. */
    export type Outbound = ConsoleV1UsageControllerGenReportResponseBody$Outbound;
}

/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

export const ConsoleV1UsersControllerInviteUsersUsersStatus = {
    FourHundredAndOne: 401,
} as const;
export type ConsoleV1UsersControllerInviteUsersUsersStatus = ClosedEnum<
    typeof ConsoleV1UsersControllerInviteUsersUsersStatus
>;

/**
 * This endpoint only accepts an active CONSOLE key, but an invalid key was sent. Key: console-xxxXXXxxxXXXxxx
 */
export type ConsoleV1UsersControllerInviteUsersUsersResponseBodyData = {
    status: ConsoleV1UsersControllerInviteUsersUsersStatus;
    message: string;
};

/**
 * This endpoint only accepts an active CONSOLE key, but an invalid key was sent. Key: console-xxxXXXxxxXXXxxx
 */
export class ConsoleV1UsersControllerInviteUsersUsersResponseBody extends Error {
    status: ConsoleV1UsersControllerInviteUsersUsersStatus;

    /** The original data that was passed to this error instance. */
    data$: ConsoleV1UsersControllerInviteUsersUsersResponseBodyData;

    constructor(err: ConsoleV1UsersControllerInviteUsersUsersResponseBodyData) {
        const message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : `API error occurred: ${JSON.stringify(err)}`;
        super(message);
        this.data$ = err;

        this.status = err.status;

        this.name = "ConsoleV1UsersControllerInviteUsersUsersResponseBody";
    }
}

export const ConsoleV1UsersControllerInviteUsersStatus = {
    FourHundred: 400,
} as const;
export type ConsoleV1UsersControllerInviteUsersStatus = ClosedEnum<
    typeof ConsoleV1UsersControllerInviteUsersStatus
>;

/**
 * Invalid request. Please check the request input and try again.
 */
export type ConsoleV1UsersControllerInviteUsersResponseBodyData = {
    status: ConsoleV1UsersControllerInviteUsersStatus;
    message: string;
};

/**
 * Invalid request. Please check the request input and try again.
 */
export class ConsoleV1UsersControllerInviteUsersResponseBody extends Error {
    status: ConsoleV1UsersControllerInviteUsersStatus;

    /** The original data that was passed to this error instance. */
    data$: ConsoleV1UsersControllerInviteUsersResponseBodyData;

    constructor(err: ConsoleV1UsersControllerInviteUsersResponseBodyData) {
        const message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : `API error occurred: ${JSON.stringify(err)}`;
        super(message);
        this.data$ = err;

        this.status = err.status;

        this.name = "ConsoleV1UsersControllerInviteUsersResponseBody";
    }
}

/** @internal */
export const ConsoleV1UsersControllerInviteUsersUsersStatus$inboundSchema: z.ZodNativeEnum<
    typeof ConsoleV1UsersControllerInviteUsersUsersStatus
> = z.nativeEnum(ConsoleV1UsersControllerInviteUsersUsersStatus);

/** @internal */
export const ConsoleV1UsersControllerInviteUsersUsersStatus$outboundSchema: z.ZodNativeEnum<
    typeof ConsoleV1UsersControllerInviteUsersUsersStatus
> = ConsoleV1UsersControllerInviteUsersUsersStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConsoleV1UsersControllerInviteUsersUsersStatus$ {
    /** @deprecated use `ConsoleV1UsersControllerInviteUsersUsersStatus$inboundSchema` instead. */
    export const inboundSchema = ConsoleV1UsersControllerInviteUsersUsersStatus$inboundSchema;
    /** @deprecated use `ConsoleV1UsersControllerInviteUsersUsersStatus$outboundSchema` instead. */
    export const outboundSchema = ConsoleV1UsersControllerInviteUsersUsersStatus$outboundSchema;
}

/** @internal */
export const ConsoleV1UsersControllerInviteUsersUsersResponseBody$inboundSchema: z.ZodType<
    ConsoleV1UsersControllerInviteUsersUsersResponseBody,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        status: ConsoleV1UsersControllerInviteUsersUsersStatus$inboundSchema,
        message: z.string(),
    })
    .transform((v) => {
        return new ConsoleV1UsersControllerInviteUsersUsersResponseBody(v);
    });

/** @internal */
export type ConsoleV1UsersControllerInviteUsersUsersResponseBody$Outbound = {
    status: number;
    message: string;
};

/** @internal */
export const ConsoleV1UsersControllerInviteUsersUsersResponseBody$outboundSchema: z.ZodType<
    ConsoleV1UsersControllerInviteUsersUsersResponseBody$Outbound,
    z.ZodTypeDef,
    ConsoleV1UsersControllerInviteUsersUsersResponseBody
> = z
    .instanceof(ConsoleV1UsersControllerInviteUsersUsersResponseBody)
    .transform((v) => v.data$)
    .pipe(
        z.object({
            status: ConsoleV1UsersControllerInviteUsersUsersStatus$outboundSchema,
            message: z.string(),
        })
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConsoleV1UsersControllerInviteUsersUsersResponseBody$ {
    /** @deprecated use `ConsoleV1UsersControllerInviteUsersUsersResponseBody$inboundSchema` instead. */
    export const inboundSchema = ConsoleV1UsersControllerInviteUsersUsersResponseBody$inboundSchema;
    /** @deprecated use `ConsoleV1UsersControllerInviteUsersUsersResponseBody$outboundSchema` instead. */
    export const outboundSchema =
        ConsoleV1UsersControllerInviteUsersUsersResponseBody$outboundSchema;
    /** @deprecated use `ConsoleV1UsersControllerInviteUsersUsersResponseBody$Outbound` instead. */
    export type Outbound = ConsoleV1UsersControllerInviteUsersUsersResponseBody$Outbound;
}

/** @internal */
export const ConsoleV1UsersControllerInviteUsersStatus$inboundSchema: z.ZodNativeEnum<
    typeof ConsoleV1UsersControllerInviteUsersStatus
> = z.nativeEnum(ConsoleV1UsersControllerInviteUsersStatus);

/** @internal */
export const ConsoleV1UsersControllerInviteUsersStatus$outboundSchema: z.ZodNativeEnum<
    typeof ConsoleV1UsersControllerInviteUsersStatus
> = ConsoleV1UsersControllerInviteUsersStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConsoleV1UsersControllerInviteUsersStatus$ {
    /** @deprecated use `ConsoleV1UsersControllerInviteUsersStatus$inboundSchema` instead. */
    export const inboundSchema = ConsoleV1UsersControllerInviteUsersStatus$inboundSchema;
    /** @deprecated use `ConsoleV1UsersControllerInviteUsersStatus$outboundSchema` instead. */
    export const outboundSchema = ConsoleV1UsersControllerInviteUsersStatus$outboundSchema;
}

/** @internal */
export const ConsoleV1UsersControllerInviteUsersResponseBody$inboundSchema: z.ZodType<
    ConsoleV1UsersControllerInviteUsersResponseBody,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        status: ConsoleV1UsersControllerInviteUsersStatus$inboundSchema,
        message: z.string(),
    })
    .transform((v) => {
        return new ConsoleV1UsersControllerInviteUsersResponseBody(v);
    });

/** @internal */
export type ConsoleV1UsersControllerInviteUsersResponseBody$Outbound = {
    status: number;
    message: string;
};

/** @internal */
export const ConsoleV1UsersControllerInviteUsersResponseBody$outboundSchema: z.ZodType<
    ConsoleV1UsersControllerInviteUsersResponseBody$Outbound,
    z.ZodTypeDef,
    ConsoleV1UsersControllerInviteUsersResponseBody
> = z
    .instanceof(ConsoleV1UsersControllerInviteUsersResponseBody)
    .transform((v) => v.data$)
    .pipe(
        z.object({
            status: ConsoleV1UsersControllerInviteUsersStatus$outboundSchema,
            message: z.string(),
        })
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConsoleV1UsersControllerInviteUsersResponseBody$ {
    /** @deprecated use `ConsoleV1UsersControllerInviteUsersResponseBody$inboundSchema` instead. */
    export const inboundSchema = ConsoleV1UsersControllerInviteUsersResponseBody$inboundSchema;
    /** @deprecated use `ConsoleV1UsersControllerInviteUsersResponseBody$outboundSchema` instead. */
    export const outboundSchema = ConsoleV1UsersControllerInviteUsersResponseBody$outboundSchema;
    /** @deprecated use `ConsoleV1UsersControllerInviteUsersResponseBody$Outbound` instead. */
    export type Outbound = ConsoleV1UsersControllerInviteUsersResponseBody$Outbound;
}

/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

export const ConsoleV1UsersControllerGenReadTeamTeamsStatus = {
    FourHundredAndOne: 401,
} as const;
export type ConsoleV1UsersControllerGenReadTeamTeamsStatus = ClosedEnum<
    typeof ConsoleV1UsersControllerGenReadTeamTeamsStatus
>;

/**
 * This endpoint only accepts an active CONSOLE key, but an invalid key was sent. Key: console-xxxXXXxxxXXXxxx
 */
export type ConsoleV1UsersControllerGenReadTeamTeamsResponseBodyData = {
    status: ConsoleV1UsersControllerGenReadTeamTeamsStatus;
    message: string;
};

/**
 * This endpoint only accepts an active CONSOLE key, but an invalid key was sent. Key: console-xxxXXXxxxXXXxxx
 */
export class ConsoleV1UsersControllerGenReadTeamTeamsResponseBody extends Error {
    status: ConsoleV1UsersControllerGenReadTeamTeamsStatus;

    /** The original data that was passed to this error instance. */
    data$: ConsoleV1UsersControllerGenReadTeamTeamsResponseBodyData;

    constructor(err: ConsoleV1UsersControllerGenReadTeamTeamsResponseBodyData) {
        const message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : `API error occurred: ${JSON.stringify(err)}`;
        super(message);
        this.data$ = err;

        this.status = err.status;

        this.name = "ConsoleV1UsersControllerGenReadTeamTeamsResponseBody";
    }
}

export const ConsoleV1UsersControllerGenReadTeamStatus = {
    FourHundred: 400,
} as const;
export type ConsoleV1UsersControllerGenReadTeamStatus = ClosedEnum<
    typeof ConsoleV1UsersControllerGenReadTeamStatus
>;

/**
 * Invalid request. Please check the request input and try again.
 */
export type ConsoleV1UsersControllerGenReadTeamResponseBodyData = {
    status: ConsoleV1UsersControllerGenReadTeamStatus;
    message: string;
};

/**
 * Invalid request. Please check the request input and try again.
 */
export class ConsoleV1UsersControllerGenReadTeamResponseBody extends Error {
    status: ConsoleV1UsersControllerGenReadTeamStatus;

    /** The original data that was passed to this error instance. */
    data$: ConsoleV1UsersControllerGenReadTeamResponseBodyData;

    constructor(err: ConsoleV1UsersControllerGenReadTeamResponseBodyData) {
        const message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : `API error occurred: ${JSON.stringify(err)}`;
        super(message);
        this.data$ = err;

        this.status = err.status;

        this.name = "ConsoleV1UsersControllerGenReadTeamResponseBody";
    }
}

/** @internal */
export const ConsoleV1UsersControllerGenReadTeamTeamsStatus$inboundSchema: z.ZodNativeEnum<
    typeof ConsoleV1UsersControllerGenReadTeamTeamsStatus
> = z.nativeEnum(ConsoleV1UsersControllerGenReadTeamTeamsStatus);

/** @internal */
export const ConsoleV1UsersControllerGenReadTeamTeamsStatus$outboundSchema: z.ZodNativeEnum<
    typeof ConsoleV1UsersControllerGenReadTeamTeamsStatus
> = ConsoleV1UsersControllerGenReadTeamTeamsStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConsoleV1UsersControllerGenReadTeamTeamsStatus$ {
    /** @deprecated use `ConsoleV1UsersControllerGenReadTeamTeamsStatus$inboundSchema` instead. */
    export const inboundSchema = ConsoleV1UsersControllerGenReadTeamTeamsStatus$inboundSchema;
    /** @deprecated use `ConsoleV1UsersControllerGenReadTeamTeamsStatus$outboundSchema` instead. */
    export const outboundSchema = ConsoleV1UsersControllerGenReadTeamTeamsStatus$outboundSchema;
}

/** @internal */
export const ConsoleV1UsersControllerGenReadTeamTeamsResponseBody$inboundSchema: z.ZodType<
    ConsoleV1UsersControllerGenReadTeamTeamsResponseBody,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        status: ConsoleV1UsersControllerGenReadTeamTeamsStatus$inboundSchema,
        message: z.string(),
    })
    .transform((v) => {
        return new ConsoleV1UsersControllerGenReadTeamTeamsResponseBody(v);
    });

/** @internal */
export type ConsoleV1UsersControllerGenReadTeamTeamsResponseBody$Outbound = {
    status: number;
    message: string;
};

/** @internal */
export const ConsoleV1UsersControllerGenReadTeamTeamsResponseBody$outboundSchema: z.ZodType<
    ConsoleV1UsersControllerGenReadTeamTeamsResponseBody$Outbound,
    z.ZodTypeDef,
    ConsoleV1UsersControllerGenReadTeamTeamsResponseBody
> = z
    .instanceof(ConsoleV1UsersControllerGenReadTeamTeamsResponseBody)
    .transform((v) => v.data$)
    .pipe(
        z.object({
            status: ConsoleV1UsersControllerGenReadTeamTeamsStatus$outboundSchema,
            message: z.string(),
        })
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConsoleV1UsersControllerGenReadTeamTeamsResponseBody$ {
    /** @deprecated use `ConsoleV1UsersControllerGenReadTeamTeamsResponseBody$inboundSchema` instead. */
    export const inboundSchema = ConsoleV1UsersControllerGenReadTeamTeamsResponseBody$inboundSchema;
    /** @deprecated use `ConsoleV1UsersControllerGenReadTeamTeamsResponseBody$outboundSchema` instead. */
    export const outboundSchema =
        ConsoleV1UsersControllerGenReadTeamTeamsResponseBody$outboundSchema;
    /** @deprecated use `ConsoleV1UsersControllerGenReadTeamTeamsResponseBody$Outbound` instead. */
    export type Outbound = ConsoleV1UsersControllerGenReadTeamTeamsResponseBody$Outbound;
}

/** @internal */
export const ConsoleV1UsersControllerGenReadTeamStatus$inboundSchema: z.ZodNativeEnum<
    typeof ConsoleV1UsersControllerGenReadTeamStatus
> = z.nativeEnum(ConsoleV1UsersControllerGenReadTeamStatus);

/** @internal */
export const ConsoleV1UsersControllerGenReadTeamStatus$outboundSchema: z.ZodNativeEnum<
    typeof ConsoleV1UsersControllerGenReadTeamStatus
> = ConsoleV1UsersControllerGenReadTeamStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConsoleV1UsersControllerGenReadTeamStatus$ {
    /** @deprecated use `ConsoleV1UsersControllerGenReadTeamStatus$inboundSchema` instead. */
    export const inboundSchema = ConsoleV1UsersControllerGenReadTeamStatus$inboundSchema;
    /** @deprecated use `ConsoleV1UsersControllerGenReadTeamStatus$outboundSchema` instead. */
    export const outboundSchema = ConsoleV1UsersControllerGenReadTeamStatus$outboundSchema;
}

/** @internal */
export const ConsoleV1UsersControllerGenReadTeamResponseBody$inboundSchema: z.ZodType<
    ConsoleV1UsersControllerGenReadTeamResponseBody,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        status: ConsoleV1UsersControllerGenReadTeamStatus$inboundSchema,
        message: z.string(),
    })
    .transform((v) => {
        return new ConsoleV1UsersControllerGenReadTeamResponseBody(v);
    });

/** @internal */
export type ConsoleV1UsersControllerGenReadTeamResponseBody$Outbound = {
    status: number;
    message: string;
};

/** @internal */
export const ConsoleV1UsersControllerGenReadTeamResponseBody$outboundSchema: z.ZodType<
    ConsoleV1UsersControllerGenReadTeamResponseBody$Outbound,
    z.ZodTypeDef,
    ConsoleV1UsersControllerGenReadTeamResponseBody
> = z
    .instanceof(ConsoleV1UsersControllerGenReadTeamResponseBody)
    .transform((v) => v.data$)
    .pipe(
        z.object({
            status: ConsoleV1UsersControllerGenReadTeamStatus$outboundSchema,
            message: z.string(),
        })
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConsoleV1UsersControllerGenReadTeamResponseBody$ {
    /** @deprecated use `ConsoleV1UsersControllerGenReadTeamResponseBody$inboundSchema` instead. */
    export const inboundSchema = ConsoleV1UsersControllerGenReadTeamResponseBody$inboundSchema;
    /** @deprecated use `ConsoleV1UsersControllerGenReadTeamResponseBody$outboundSchema` instead. */
    export const outboundSchema = ConsoleV1UsersControllerGenReadTeamResponseBody$outboundSchema;
    /** @deprecated use `ConsoleV1UsersControllerGenReadTeamResponseBody$Outbound` instead. */
    export type Outbound = ConsoleV1UsersControllerGenReadTeamResponseBody$Outbound;
}

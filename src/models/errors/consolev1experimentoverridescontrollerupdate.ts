/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

export const ConsoleV1ExperimentOverridesControllerUpdateExperimentsStatus = {
    FourHundredAndFour: 404,
} as const;
export type ConsoleV1ExperimentOverridesControllerUpdateExperimentsStatus = ClosedEnum<
    typeof ConsoleV1ExperimentOverridesControllerUpdateExperimentsStatus
>;

/**
 * Experiment not found.
 */
export type ConsoleV1ExperimentOverridesControllerUpdateExperimentsResponseBodyData = {
    status: ConsoleV1ExperimentOverridesControllerUpdateExperimentsStatus;
    message: string;
};

/**
 * Experiment not found.
 */
export class ConsoleV1ExperimentOverridesControllerUpdateExperimentsResponseBody extends Error {
    status: ConsoleV1ExperimentOverridesControllerUpdateExperimentsStatus;

    /** The original data that was passed to this error instance. */
    data$: ConsoleV1ExperimentOverridesControllerUpdateExperimentsResponseBodyData;

    constructor(err: ConsoleV1ExperimentOverridesControllerUpdateExperimentsResponseBodyData) {
        const message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : `API error occurred: ${JSON.stringify(err)}`;
        super(message);
        this.data$ = err;

        this.status = err.status;

        this.name = "ConsoleV1ExperimentOverridesControllerUpdateExperimentsResponseBody";
    }
}

export const ConsoleV1ExperimentOverridesControllerUpdateStatus = {
    FourHundredAndOne: 401,
} as const;
export type ConsoleV1ExperimentOverridesControllerUpdateStatus = ClosedEnum<
    typeof ConsoleV1ExperimentOverridesControllerUpdateStatus
>;

/**
 * This endpoint only accepts an active CONSOLE key, but an invalid key was sent. Key: console-xxxXXXxxxXXXxxx
 */
export type ConsoleV1ExperimentOverridesControllerUpdateResponseBodyData = {
    status: ConsoleV1ExperimentOverridesControllerUpdateStatus;
    message: string;
};

/**
 * This endpoint only accepts an active CONSOLE key, but an invalid key was sent. Key: console-xxxXXXxxxXXXxxx
 */
export class ConsoleV1ExperimentOverridesControllerUpdateResponseBody extends Error {
    status: ConsoleV1ExperimentOverridesControllerUpdateStatus;

    /** The original data that was passed to this error instance. */
    data$: ConsoleV1ExperimentOverridesControllerUpdateResponseBodyData;

    constructor(err: ConsoleV1ExperimentOverridesControllerUpdateResponseBodyData) {
        const message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : `API error occurred: ${JSON.stringify(err)}`;
        super(message);
        this.data$ = err;

        this.status = err.status;

        this.name = "ConsoleV1ExperimentOverridesControllerUpdateResponseBody";
    }
}

/** @internal */
export const ConsoleV1ExperimentOverridesControllerUpdateExperimentsStatus$inboundSchema: z.ZodNativeEnum<
    typeof ConsoleV1ExperimentOverridesControllerUpdateExperimentsStatus
> = z.nativeEnum(ConsoleV1ExperimentOverridesControllerUpdateExperimentsStatus);

/** @internal */
export const ConsoleV1ExperimentOverridesControllerUpdateExperimentsStatus$outboundSchema: z.ZodNativeEnum<
    typeof ConsoleV1ExperimentOverridesControllerUpdateExperimentsStatus
> = ConsoleV1ExperimentOverridesControllerUpdateExperimentsStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConsoleV1ExperimentOverridesControllerUpdateExperimentsStatus$ {
    /** @deprecated use `ConsoleV1ExperimentOverridesControllerUpdateExperimentsStatus$inboundSchema` instead. */
    export const inboundSchema =
        ConsoleV1ExperimentOverridesControllerUpdateExperimentsStatus$inboundSchema;
    /** @deprecated use `ConsoleV1ExperimentOverridesControllerUpdateExperimentsStatus$outboundSchema` instead. */
    export const outboundSchema =
        ConsoleV1ExperimentOverridesControllerUpdateExperimentsStatus$outboundSchema;
}

/** @internal */
export const ConsoleV1ExperimentOverridesControllerUpdateExperimentsResponseBody$inboundSchema: z.ZodType<
    ConsoleV1ExperimentOverridesControllerUpdateExperimentsResponseBody,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        status: ConsoleV1ExperimentOverridesControllerUpdateExperimentsStatus$inboundSchema,
        message: z.string(),
    })
    .transform((v) => {
        return new ConsoleV1ExperimentOverridesControllerUpdateExperimentsResponseBody(v);
    });

/** @internal */
export type ConsoleV1ExperimentOverridesControllerUpdateExperimentsResponseBody$Outbound = {
    status: number;
    message: string;
};

/** @internal */
export const ConsoleV1ExperimentOverridesControllerUpdateExperimentsResponseBody$outboundSchema: z.ZodType<
    ConsoleV1ExperimentOverridesControllerUpdateExperimentsResponseBody$Outbound,
    z.ZodTypeDef,
    ConsoleV1ExperimentOverridesControllerUpdateExperimentsResponseBody
> = z
    .instanceof(ConsoleV1ExperimentOverridesControllerUpdateExperimentsResponseBody)
    .transform((v) => v.data$)
    .pipe(
        z.object({
            status: ConsoleV1ExperimentOverridesControllerUpdateExperimentsStatus$outboundSchema,
            message: z.string(),
        })
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConsoleV1ExperimentOverridesControllerUpdateExperimentsResponseBody$ {
    /** @deprecated use `ConsoleV1ExperimentOverridesControllerUpdateExperimentsResponseBody$inboundSchema` instead. */
    export const inboundSchema =
        ConsoleV1ExperimentOverridesControllerUpdateExperimentsResponseBody$inboundSchema;
    /** @deprecated use `ConsoleV1ExperimentOverridesControllerUpdateExperimentsResponseBody$outboundSchema` instead. */
    export const outboundSchema =
        ConsoleV1ExperimentOverridesControllerUpdateExperimentsResponseBody$outboundSchema;
    /** @deprecated use `ConsoleV1ExperimentOverridesControllerUpdateExperimentsResponseBody$Outbound` instead. */
    export type Outbound =
        ConsoleV1ExperimentOverridesControllerUpdateExperimentsResponseBody$Outbound;
}

/** @internal */
export const ConsoleV1ExperimentOverridesControllerUpdateStatus$inboundSchema: z.ZodNativeEnum<
    typeof ConsoleV1ExperimentOverridesControllerUpdateStatus
> = z.nativeEnum(ConsoleV1ExperimentOverridesControllerUpdateStatus);

/** @internal */
export const ConsoleV1ExperimentOverridesControllerUpdateStatus$outboundSchema: z.ZodNativeEnum<
    typeof ConsoleV1ExperimentOverridesControllerUpdateStatus
> = ConsoleV1ExperimentOverridesControllerUpdateStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConsoleV1ExperimentOverridesControllerUpdateStatus$ {
    /** @deprecated use `ConsoleV1ExperimentOverridesControllerUpdateStatus$inboundSchema` instead. */
    export const inboundSchema = ConsoleV1ExperimentOverridesControllerUpdateStatus$inboundSchema;
    /** @deprecated use `ConsoleV1ExperimentOverridesControllerUpdateStatus$outboundSchema` instead. */
    export const outboundSchema = ConsoleV1ExperimentOverridesControllerUpdateStatus$outboundSchema;
}

/** @internal */
export const ConsoleV1ExperimentOverridesControllerUpdateResponseBody$inboundSchema: z.ZodType<
    ConsoleV1ExperimentOverridesControllerUpdateResponseBody,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        status: ConsoleV1ExperimentOverridesControllerUpdateStatus$inboundSchema,
        message: z.string(),
    })
    .transform((v) => {
        return new ConsoleV1ExperimentOverridesControllerUpdateResponseBody(v);
    });

/** @internal */
export type ConsoleV1ExperimentOverridesControllerUpdateResponseBody$Outbound = {
    status: number;
    message: string;
};

/** @internal */
export const ConsoleV1ExperimentOverridesControllerUpdateResponseBody$outboundSchema: z.ZodType<
    ConsoleV1ExperimentOverridesControllerUpdateResponseBody$Outbound,
    z.ZodTypeDef,
    ConsoleV1ExperimentOverridesControllerUpdateResponseBody
> = z
    .instanceof(ConsoleV1ExperimentOverridesControllerUpdateResponseBody)
    .transform((v) => v.data$)
    .pipe(
        z.object({
            status: ConsoleV1ExperimentOverridesControllerUpdateStatus$outboundSchema,
            message: z.string(),
        })
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConsoleV1ExperimentOverridesControllerUpdateResponseBody$ {
    /** @deprecated use `ConsoleV1ExperimentOverridesControllerUpdateResponseBody$inboundSchema` instead. */
    export const inboundSchema =
        ConsoleV1ExperimentOverridesControllerUpdateResponseBody$inboundSchema;
    /** @deprecated use `ConsoleV1ExperimentOverridesControllerUpdateResponseBody$outboundSchema` instead. */
    export const outboundSchema =
        ConsoleV1ExperimentOverridesControllerUpdateResponseBody$outboundSchema;
    /** @deprecated use `ConsoleV1ExperimentOverridesControllerUpdateResponseBody$Outbound` instead. */
    export type Outbound = ConsoleV1ExperimentOverridesControllerUpdateResponseBody$Outbound;
}

/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

export const ConsoleV1ExposureCountsControllerGenExposureCountConfigsStatus = {
    FourHundredAndOne: 401,
} as const;
export type ConsoleV1ExposureCountsControllerGenExposureCountConfigsStatus = ClosedEnum<
    typeof ConsoleV1ExposureCountsControllerGenExposureCountConfigsStatus
>;

/**
 * This endpoint only accepts an active CONSOLE key, but an invalid key was sent. Key: console-xxxXXXxxxXXXxxx
 */
export type ConsoleV1ExposureCountsControllerGenExposureCountConfigsResponseBodyData = {
    status: ConsoleV1ExposureCountsControllerGenExposureCountConfigsStatus;
    message: string;
};

/**
 * This endpoint only accepts an active CONSOLE key, but an invalid key was sent. Key: console-xxxXXXxxxXXXxxx
 */
export class ConsoleV1ExposureCountsControllerGenExposureCountConfigsResponseBody extends Error {
    status: ConsoleV1ExposureCountsControllerGenExposureCountConfigsStatus;

    /** The original data that was passed to this error instance. */
    data$: ConsoleV1ExposureCountsControllerGenExposureCountConfigsResponseBodyData;

    constructor(err: ConsoleV1ExposureCountsControllerGenExposureCountConfigsResponseBodyData) {
        const message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : `API error occurred: ${JSON.stringify(err)}`;
        super(message);
        this.data$ = err;

        this.status = err.status;

        this.name = "ConsoleV1ExposureCountsControllerGenExposureCountConfigsResponseBody";
    }
}

export const ConsoleV1ExposureCountsControllerGenExposureCountStatus = {
    FourHundred: 400,
} as const;
export type ConsoleV1ExposureCountsControllerGenExposureCountStatus = ClosedEnum<
    typeof ConsoleV1ExposureCountsControllerGenExposureCountStatus
>;

/**
 * Invalid request. Please check the request input and try again.
 */
export type ConsoleV1ExposureCountsControllerGenExposureCountResponseBodyData = {
    status: ConsoleV1ExposureCountsControllerGenExposureCountStatus;
    message: string;
};

/**
 * Invalid request. Please check the request input and try again.
 */
export class ConsoleV1ExposureCountsControllerGenExposureCountResponseBody extends Error {
    status: ConsoleV1ExposureCountsControllerGenExposureCountStatus;

    /** The original data that was passed to this error instance. */
    data$: ConsoleV1ExposureCountsControllerGenExposureCountResponseBodyData;

    constructor(err: ConsoleV1ExposureCountsControllerGenExposureCountResponseBodyData) {
        const message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : `API error occurred: ${JSON.stringify(err)}`;
        super(message);
        this.data$ = err;

        this.status = err.status;

        this.name = "ConsoleV1ExposureCountsControllerGenExposureCountResponseBody";
    }
}

/** @internal */
export const ConsoleV1ExposureCountsControllerGenExposureCountConfigsStatus$inboundSchema: z.ZodNativeEnum<
    typeof ConsoleV1ExposureCountsControllerGenExposureCountConfigsStatus
> = z.nativeEnum(ConsoleV1ExposureCountsControllerGenExposureCountConfigsStatus);

/** @internal */
export const ConsoleV1ExposureCountsControllerGenExposureCountConfigsStatus$outboundSchema: z.ZodNativeEnum<
    typeof ConsoleV1ExposureCountsControllerGenExposureCountConfigsStatus
> = ConsoleV1ExposureCountsControllerGenExposureCountConfigsStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConsoleV1ExposureCountsControllerGenExposureCountConfigsStatus$ {
    /** @deprecated use `ConsoleV1ExposureCountsControllerGenExposureCountConfigsStatus$inboundSchema` instead. */
    export const inboundSchema =
        ConsoleV1ExposureCountsControllerGenExposureCountConfigsStatus$inboundSchema;
    /** @deprecated use `ConsoleV1ExposureCountsControllerGenExposureCountConfigsStatus$outboundSchema` instead. */
    export const outboundSchema =
        ConsoleV1ExposureCountsControllerGenExposureCountConfigsStatus$outboundSchema;
}

/** @internal */
export const ConsoleV1ExposureCountsControllerGenExposureCountConfigsResponseBody$inboundSchema: z.ZodType<
    ConsoleV1ExposureCountsControllerGenExposureCountConfigsResponseBody,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        status: ConsoleV1ExposureCountsControllerGenExposureCountConfigsStatus$inboundSchema,
        message: z.string(),
    })
    .transform((v) => {
        return new ConsoleV1ExposureCountsControllerGenExposureCountConfigsResponseBody(v);
    });

/** @internal */
export type ConsoleV1ExposureCountsControllerGenExposureCountConfigsResponseBody$Outbound = {
    status: number;
    message: string;
};

/** @internal */
export const ConsoleV1ExposureCountsControllerGenExposureCountConfigsResponseBody$outboundSchema: z.ZodType<
    ConsoleV1ExposureCountsControllerGenExposureCountConfigsResponseBody$Outbound,
    z.ZodTypeDef,
    ConsoleV1ExposureCountsControllerGenExposureCountConfigsResponseBody
> = z
    .instanceof(ConsoleV1ExposureCountsControllerGenExposureCountConfigsResponseBody)
    .transform((v) => v.data$)
    .pipe(
        z.object({
            status: ConsoleV1ExposureCountsControllerGenExposureCountConfigsStatus$outboundSchema,
            message: z.string(),
        })
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConsoleV1ExposureCountsControllerGenExposureCountConfigsResponseBody$ {
    /** @deprecated use `ConsoleV1ExposureCountsControllerGenExposureCountConfigsResponseBody$inboundSchema` instead. */
    export const inboundSchema =
        ConsoleV1ExposureCountsControllerGenExposureCountConfigsResponseBody$inboundSchema;
    /** @deprecated use `ConsoleV1ExposureCountsControllerGenExposureCountConfigsResponseBody$outboundSchema` instead. */
    export const outboundSchema =
        ConsoleV1ExposureCountsControllerGenExposureCountConfigsResponseBody$outboundSchema;
    /** @deprecated use `ConsoleV1ExposureCountsControllerGenExposureCountConfigsResponseBody$Outbound` instead. */
    export type Outbound =
        ConsoleV1ExposureCountsControllerGenExposureCountConfigsResponseBody$Outbound;
}

/** @internal */
export const ConsoleV1ExposureCountsControllerGenExposureCountStatus$inboundSchema: z.ZodNativeEnum<
    typeof ConsoleV1ExposureCountsControllerGenExposureCountStatus
> = z.nativeEnum(ConsoleV1ExposureCountsControllerGenExposureCountStatus);

/** @internal */
export const ConsoleV1ExposureCountsControllerGenExposureCountStatus$outboundSchema: z.ZodNativeEnum<
    typeof ConsoleV1ExposureCountsControllerGenExposureCountStatus
> = ConsoleV1ExposureCountsControllerGenExposureCountStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConsoleV1ExposureCountsControllerGenExposureCountStatus$ {
    /** @deprecated use `ConsoleV1ExposureCountsControllerGenExposureCountStatus$inboundSchema` instead. */
    export const inboundSchema =
        ConsoleV1ExposureCountsControllerGenExposureCountStatus$inboundSchema;
    /** @deprecated use `ConsoleV1ExposureCountsControllerGenExposureCountStatus$outboundSchema` instead. */
    export const outboundSchema =
        ConsoleV1ExposureCountsControllerGenExposureCountStatus$outboundSchema;
}

/** @internal */
export const ConsoleV1ExposureCountsControllerGenExposureCountResponseBody$inboundSchema: z.ZodType<
    ConsoleV1ExposureCountsControllerGenExposureCountResponseBody,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        status: ConsoleV1ExposureCountsControllerGenExposureCountStatus$inboundSchema,
        message: z.string(),
    })
    .transform((v) => {
        return new ConsoleV1ExposureCountsControllerGenExposureCountResponseBody(v);
    });

/** @internal */
export type ConsoleV1ExposureCountsControllerGenExposureCountResponseBody$Outbound = {
    status: number;
    message: string;
};

/** @internal */
export const ConsoleV1ExposureCountsControllerGenExposureCountResponseBody$outboundSchema: z.ZodType<
    ConsoleV1ExposureCountsControllerGenExposureCountResponseBody$Outbound,
    z.ZodTypeDef,
    ConsoleV1ExposureCountsControllerGenExposureCountResponseBody
> = z
    .instanceof(ConsoleV1ExposureCountsControllerGenExposureCountResponseBody)
    .transform((v) => v.data$)
    .pipe(
        z.object({
            status: ConsoleV1ExposureCountsControllerGenExposureCountStatus$outboundSchema,
            message: z.string(),
        })
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConsoleV1ExposureCountsControllerGenExposureCountResponseBody$ {
    /** @deprecated use `ConsoleV1ExposureCountsControllerGenExposureCountResponseBody$inboundSchema` instead. */
    export const inboundSchema =
        ConsoleV1ExposureCountsControllerGenExposureCountResponseBody$inboundSchema;
    /** @deprecated use `ConsoleV1ExposureCountsControllerGenExposureCountResponseBody$outboundSchema` instead. */
    export const outboundSchema =
        ConsoleV1ExposureCountsControllerGenExposureCountResponseBody$outboundSchema;
    /** @deprecated use `ConsoleV1ExposureCountsControllerGenExposureCountResponseBody$Outbound` instead. */
    export type Outbound = ConsoleV1ExposureCountsControllerGenExposureCountResponseBody$Outbound;
}

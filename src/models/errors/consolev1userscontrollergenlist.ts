/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

export const ConsoleV1UsersControllerGenListUsersStatus = {
    FourHundredAndOne: 401,
} as const;
export type ConsoleV1UsersControllerGenListUsersStatus = ClosedEnum<
    typeof ConsoleV1UsersControllerGenListUsersStatus
>;

/**
 * This endpoint only accepts an active CONSOLE key, but an invalid key was sent. Key: console-xxxXXXxxxXXXxxx
 */
export type ConsoleV1UsersControllerGenListUsersResponseBodyData = {
    status: ConsoleV1UsersControllerGenListUsersStatus;
    message: string;
};

/**
 * This endpoint only accepts an active CONSOLE key, but an invalid key was sent. Key: console-xxxXXXxxxXXXxxx
 */
export class ConsoleV1UsersControllerGenListUsersResponseBody extends Error {
    status: ConsoleV1UsersControllerGenListUsersStatus;

    /** The original data that was passed to this error instance. */
    data$: ConsoleV1UsersControllerGenListUsersResponseBodyData;

    constructor(err: ConsoleV1UsersControllerGenListUsersResponseBodyData) {
        const message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : `API error occurred: ${JSON.stringify(err)}`;
        super(message);
        this.data$ = err;

        this.status = err.status;

        this.name = "ConsoleV1UsersControllerGenListUsersResponseBody";
    }
}

export const ConsoleV1UsersControllerGenListStatus = {
    FourHundred: 400,
} as const;
export type ConsoleV1UsersControllerGenListStatus = ClosedEnum<
    typeof ConsoleV1UsersControllerGenListStatus
>;

/**
 * Invalid request. Please check the request input and try again.
 */
export type ConsoleV1UsersControllerGenListResponseBodyData = {
    status: ConsoleV1UsersControllerGenListStatus;
    message: string;
};

/**
 * Invalid request. Please check the request input and try again.
 */
export class ConsoleV1UsersControllerGenListResponseBody extends Error {
    status: ConsoleV1UsersControllerGenListStatus;

    /** The original data that was passed to this error instance. */
    data$: ConsoleV1UsersControllerGenListResponseBodyData;

    constructor(err: ConsoleV1UsersControllerGenListResponseBodyData) {
        const message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : `API error occurred: ${JSON.stringify(err)}`;
        super(message);
        this.data$ = err;

        this.status = err.status;

        this.name = "ConsoleV1UsersControllerGenListResponseBody";
    }
}

/** @internal */
export const ConsoleV1UsersControllerGenListUsersStatus$inboundSchema: z.ZodNativeEnum<
    typeof ConsoleV1UsersControllerGenListUsersStatus
> = z.nativeEnum(ConsoleV1UsersControllerGenListUsersStatus);

/** @internal */
export const ConsoleV1UsersControllerGenListUsersStatus$outboundSchema: z.ZodNativeEnum<
    typeof ConsoleV1UsersControllerGenListUsersStatus
> = ConsoleV1UsersControllerGenListUsersStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConsoleV1UsersControllerGenListUsersStatus$ {
    /** @deprecated use `ConsoleV1UsersControllerGenListUsersStatus$inboundSchema` instead. */
    export const inboundSchema = ConsoleV1UsersControllerGenListUsersStatus$inboundSchema;
    /** @deprecated use `ConsoleV1UsersControllerGenListUsersStatus$outboundSchema` instead. */
    export const outboundSchema = ConsoleV1UsersControllerGenListUsersStatus$outboundSchema;
}

/** @internal */
export const ConsoleV1UsersControllerGenListUsersResponseBody$inboundSchema: z.ZodType<
    ConsoleV1UsersControllerGenListUsersResponseBody,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        status: ConsoleV1UsersControllerGenListUsersStatus$inboundSchema,
        message: z.string(),
    })
    .transform((v) => {
        return new ConsoleV1UsersControllerGenListUsersResponseBody(v);
    });

/** @internal */
export type ConsoleV1UsersControllerGenListUsersResponseBody$Outbound = {
    status: number;
    message: string;
};

/** @internal */
export const ConsoleV1UsersControllerGenListUsersResponseBody$outboundSchema: z.ZodType<
    ConsoleV1UsersControllerGenListUsersResponseBody$Outbound,
    z.ZodTypeDef,
    ConsoleV1UsersControllerGenListUsersResponseBody
> = z
    .instanceof(ConsoleV1UsersControllerGenListUsersResponseBody)
    .transform((v) => v.data$)
    .pipe(
        z.object({
            status: ConsoleV1UsersControllerGenListUsersStatus$outboundSchema,
            message: z.string(),
        })
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConsoleV1UsersControllerGenListUsersResponseBody$ {
    /** @deprecated use `ConsoleV1UsersControllerGenListUsersResponseBody$inboundSchema` instead. */
    export const inboundSchema = ConsoleV1UsersControllerGenListUsersResponseBody$inboundSchema;
    /** @deprecated use `ConsoleV1UsersControllerGenListUsersResponseBody$outboundSchema` instead. */
    export const outboundSchema = ConsoleV1UsersControllerGenListUsersResponseBody$outboundSchema;
    /** @deprecated use `ConsoleV1UsersControllerGenListUsersResponseBody$Outbound` instead. */
    export type Outbound = ConsoleV1UsersControllerGenListUsersResponseBody$Outbound;
}

/** @internal */
export const ConsoleV1UsersControllerGenListStatus$inboundSchema: z.ZodNativeEnum<
    typeof ConsoleV1UsersControllerGenListStatus
> = z.nativeEnum(ConsoleV1UsersControllerGenListStatus);

/** @internal */
export const ConsoleV1UsersControllerGenListStatus$outboundSchema: z.ZodNativeEnum<
    typeof ConsoleV1UsersControllerGenListStatus
> = ConsoleV1UsersControllerGenListStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConsoleV1UsersControllerGenListStatus$ {
    /** @deprecated use `ConsoleV1UsersControllerGenListStatus$inboundSchema` instead. */
    export const inboundSchema = ConsoleV1UsersControllerGenListStatus$inboundSchema;
    /** @deprecated use `ConsoleV1UsersControllerGenListStatus$outboundSchema` instead. */
    export const outboundSchema = ConsoleV1UsersControllerGenListStatus$outboundSchema;
}

/** @internal */
export const ConsoleV1UsersControllerGenListResponseBody$inboundSchema: z.ZodType<
    ConsoleV1UsersControllerGenListResponseBody,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        status: ConsoleV1UsersControllerGenListStatus$inboundSchema,
        message: z.string(),
    })
    .transform((v) => {
        return new ConsoleV1UsersControllerGenListResponseBody(v);
    });

/** @internal */
export type ConsoleV1UsersControllerGenListResponseBody$Outbound = {
    status: number;
    message: string;
};

/** @internal */
export const ConsoleV1UsersControllerGenListResponseBody$outboundSchema: z.ZodType<
    ConsoleV1UsersControllerGenListResponseBody$Outbound,
    z.ZodTypeDef,
    ConsoleV1UsersControllerGenListResponseBody
> = z
    .instanceof(ConsoleV1UsersControllerGenListResponseBody)
    .transform((v) => v.data$)
    .pipe(
        z.object({
            status: ConsoleV1UsersControllerGenListStatus$outboundSchema,
            message: z.string(),
        })
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConsoleV1UsersControllerGenListResponseBody$ {
    /** @deprecated use `ConsoleV1UsersControllerGenListResponseBody$inboundSchema` instead. */
    export const inboundSchema = ConsoleV1UsersControllerGenListResponseBody$inboundSchema;
    /** @deprecated use `ConsoleV1UsersControllerGenListResponseBody$outboundSchema` instead. */
    export const outboundSchema = ConsoleV1UsersControllerGenListResponseBody$outboundSchema;
    /** @deprecated use `ConsoleV1UsersControllerGenListResponseBody$Outbound` instead. */
    export type Outbound = ConsoleV1UsersControllerGenListResponseBody$Outbound;
}

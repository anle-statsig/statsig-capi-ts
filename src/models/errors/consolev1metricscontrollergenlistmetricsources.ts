/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

export const ConsoleV1MetricsControllerGenListMetricSourcesMetricSourcesStatus = {
    FourHundredAndOne: 401,
} as const;
export type ConsoleV1MetricsControllerGenListMetricSourcesMetricSourcesStatus = ClosedEnum<
    typeof ConsoleV1MetricsControllerGenListMetricSourcesMetricSourcesStatus
>;

/**
 * This endpoint only accepts an active CONSOLE key, but an invalid key was sent. Key: console-xxxXXXxxxXXXxxx
 */
export type ConsoleV1MetricsControllerGenListMetricSourcesMetricSourcesResponseBodyData = {
    status: ConsoleV1MetricsControllerGenListMetricSourcesMetricSourcesStatus;
    message: string;
};

/**
 * This endpoint only accepts an active CONSOLE key, but an invalid key was sent. Key: console-xxxXXXxxxXXXxxx
 */
export class ConsoleV1MetricsControllerGenListMetricSourcesMetricSourcesResponseBody extends Error {
    status: ConsoleV1MetricsControllerGenListMetricSourcesMetricSourcesStatus;

    /** The original data that was passed to this error instance. */
    data$: ConsoleV1MetricsControllerGenListMetricSourcesMetricSourcesResponseBodyData;

    constructor(err: ConsoleV1MetricsControllerGenListMetricSourcesMetricSourcesResponseBodyData) {
        const message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : `API error occurred: ${JSON.stringify(err)}`;
        super(message);
        this.data$ = err;

        this.status = err.status;

        this.name = "ConsoleV1MetricsControllerGenListMetricSourcesMetricSourcesResponseBody";
    }
}

export const ConsoleV1MetricsControllerGenListMetricSourcesStatus = {
    FourHundred: 400,
} as const;
export type ConsoleV1MetricsControllerGenListMetricSourcesStatus = ClosedEnum<
    typeof ConsoleV1MetricsControllerGenListMetricSourcesStatus
>;

/**
 * Invalid request. Please check the request input and try again.
 */
export type ConsoleV1MetricsControllerGenListMetricSourcesResponseBodyData = {
    status: ConsoleV1MetricsControllerGenListMetricSourcesStatus;
    message: string;
};

/**
 * Invalid request. Please check the request input and try again.
 */
export class ConsoleV1MetricsControllerGenListMetricSourcesResponseBody extends Error {
    status: ConsoleV1MetricsControllerGenListMetricSourcesStatus;

    /** The original data that was passed to this error instance. */
    data$: ConsoleV1MetricsControllerGenListMetricSourcesResponseBodyData;

    constructor(err: ConsoleV1MetricsControllerGenListMetricSourcesResponseBodyData) {
        const message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : `API error occurred: ${JSON.stringify(err)}`;
        super(message);
        this.data$ = err;

        this.status = err.status;

        this.name = "ConsoleV1MetricsControllerGenListMetricSourcesResponseBody";
    }
}

/** @internal */
export const ConsoleV1MetricsControllerGenListMetricSourcesMetricSourcesStatus$inboundSchema: z.ZodNativeEnum<
    typeof ConsoleV1MetricsControllerGenListMetricSourcesMetricSourcesStatus
> = z.nativeEnum(ConsoleV1MetricsControllerGenListMetricSourcesMetricSourcesStatus);

/** @internal */
export const ConsoleV1MetricsControllerGenListMetricSourcesMetricSourcesStatus$outboundSchema: z.ZodNativeEnum<
    typeof ConsoleV1MetricsControllerGenListMetricSourcesMetricSourcesStatus
> = ConsoleV1MetricsControllerGenListMetricSourcesMetricSourcesStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConsoleV1MetricsControllerGenListMetricSourcesMetricSourcesStatus$ {
    /** @deprecated use `ConsoleV1MetricsControllerGenListMetricSourcesMetricSourcesStatus$inboundSchema` instead. */
    export const inboundSchema =
        ConsoleV1MetricsControllerGenListMetricSourcesMetricSourcesStatus$inboundSchema;
    /** @deprecated use `ConsoleV1MetricsControllerGenListMetricSourcesMetricSourcesStatus$outboundSchema` instead. */
    export const outboundSchema =
        ConsoleV1MetricsControllerGenListMetricSourcesMetricSourcesStatus$outboundSchema;
}

/** @internal */
export const ConsoleV1MetricsControllerGenListMetricSourcesMetricSourcesResponseBody$inboundSchema: z.ZodType<
    ConsoleV1MetricsControllerGenListMetricSourcesMetricSourcesResponseBody,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        status: ConsoleV1MetricsControllerGenListMetricSourcesMetricSourcesStatus$inboundSchema,
        message: z.string(),
    })
    .transform((v) => {
        return new ConsoleV1MetricsControllerGenListMetricSourcesMetricSourcesResponseBody(v);
    });

/** @internal */
export type ConsoleV1MetricsControllerGenListMetricSourcesMetricSourcesResponseBody$Outbound = {
    status: number;
    message: string;
};

/** @internal */
export const ConsoleV1MetricsControllerGenListMetricSourcesMetricSourcesResponseBody$outboundSchema: z.ZodType<
    ConsoleV1MetricsControllerGenListMetricSourcesMetricSourcesResponseBody$Outbound,
    z.ZodTypeDef,
    ConsoleV1MetricsControllerGenListMetricSourcesMetricSourcesResponseBody
> = z
    .instanceof(ConsoleV1MetricsControllerGenListMetricSourcesMetricSourcesResponseBody)
    .transform((v) => v.data$)
    .pipe(
        z.object({
            status: ConsoleV1MetricsControllerGenListMetricSourcesMetricSourcesStatus$outboundSchema,
            message: z.string(),
        })
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConsoleV1MetricsControllerGenListMetricSourcesMetricSourcesResponseBody$ {
    /** @deprecated use `ConsoleV1MetricsControllerGenListMetricSourcesMetricSourcesResponseBody$inboundSchema` instead. */
    export const inboundSchema =
        ConsoleV1MetricsControllerGenListMetricSourcesMetricSourcesResponseBody$inboundSchema;
    /** @deprecated use `ConsoleV1MetricsControllerGenListMetricSourcesMetricSourcesResponseBody$outboundSchema` instead. */
    export const outboundSchema =
        ConsoleV1MetricsControllerGenListMetricSourcesMetricSourcesResponseBody$outboundSchema;
    /** @deprecated use `ConsoleV1MetricsControllerGenListMetricSourcesMetricSourcesResponseBody$Outbound` instead. */
    export type Outbound =
        ConsoleV1MetricsControllerGenListMetricSourcesMetricSourcesResponseBody$Outbound;
}

/** @internal */
export const ConsoleV1MetricsControllerGenListMetricSourcesStatus$inboundSchema: z.ZodNativeEnum<
    typeof ConsoleV1MetricsControllerGenListMetricSourcesStatus
> = z.nativeEnum(ConsoleV1MetricsControllerGenListMetricSourcesStatus);

/** @internal */
export const ConsoleV1MetricsControllerGenListMetricSourcesStatus$outboundSchema: z.ZodNativeEnum<
    typeof ConsoleV1MetricsControllerGenListMetricSourcesStatus
> = ConsoleV1MetricsControllerGenListMetricSourcesStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConsoleV1MetricsControllerGenListMetricSourcesStatus$ {
    /** @deprecated use `ConsoleV1MetricsControllerGenListMetricSourcesStatus$inboundSchema` instead. */
    export const inboundSchema = ConsoleV1MetricsControllerGenListMetricSourcesStatus$inboundSchema;
    /** @deprecated use `ConsoleV1MetricsControllerGenListMetricSourcesStatus$outboundSchema` instead. */
    export const outboundSchema =
        ConsoleV1MetricsControllerGenListMetricSourcesStatus$outboundSchema;
}

/** @internal */
export const ConsoleV1MetricsControllerGenListMetricSourcesResponseBody$inboundSchema: z.ZodType<
    ConsoleV1MetricsControllerGenListMetricSourcesResponseBody,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        status: ConsoleV1MetricsControllerGenListMetricSourcesStatus$inboundSchema,
        message: z.string(),
    })
    .transform((v) => {
        return new ConsoleV1MetricsControllerGenListMetricSourcesResponseBody(v);
    });

/** @internal */
export type ConsoleV1MetricsControllerGenListMetricSourcesResponseBody$Outbound = {
    status: number;
    message: string;
};

/** @internal */
export const ConsoleV1MetricsControllerGenListMetricSourcesResponseBody$outboundSchema: z.ZodType<
    ConsoleV1MetricsControllerGenListMetricSourcesResponseBody$Outbound,
    z.ZodTypeDef,
    ConsoleV1MetricsControllerGenListMetricSourcesResponseBody
> = z
    .instanceof(ConsoleV1MetricsControllerGenListMetricSourcesResponseBody)
    .transform((v) => v.data$)
    .pipe(
        z.object({
            status: ConsoleV1MetricsControllerGenListMetricSourcesStatus$outboundSchema,
            message: z.string(),
        })
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConsoleV1MetricsControllerGenListMetricSourcesResponseBody$ {
    /** @deprecated use `ConsoleV1MetricsControllerGenListMetricSourcesResponseBody$inboundSchema` instead. */
    export const inboundSchema =
        ConsoleV1MetricsControllerGenListMetricSourcesResponseBody$inboundSchema;
    /** @deprecated use `ConsoleV1MetricsControllerGenListMetricSourcesResponseBody$outboundSchema` instead. */
    export const outboundSchema =
        ConsoleV1MetricsControllerGenListMetricSourcesResponseBody$outboundSchema;
    /** @deprecated use `ConsoleV1MetricsControllerGenListMetricSourcesResponseBody$Outbound` instead. */
    export type Outbound = ConsoleV1MetricsControllerGenListMetricSourcesResponseBody$Outbound;
}

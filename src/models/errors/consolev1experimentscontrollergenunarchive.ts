/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

export const ConsoleV1ExperimentsControllerGenUnarchiveExperimentsStatus = {
    FourHundredAndFour: 404,
} as const;
export type ConsoleV1ExperimentsControllerGenUnarchiveExperimentsStatus = ClosedEnum<
    typeof ConsoleV1ExperimentsControllerGenUnarchiveExperimentsStatus
>;

/**
 * Experiment not found.
 */
export type ConsoleV1ExperimentsControllerGenUnarchiveExperimentsResponseBodyData = {
    status: ConsoleV1ExperimentsControllerGenUnarchiveExperimentsStatus;
    message: string;
};

/**
 * Experiment not found.
 */
export class ConsoleV1ExperimentsControllerGenUnarchiveExperimentsResponseBody extends Error {
    status: ConsoleV1ExperimentsControllerGenUnarchiveExperimentsStatus;

    /** The original data that was passed to this error instance. */
    data$: ConsoleV1ExperimentsControllerGenUnarchiveExperimentsResponseBodyData;

    constructor(err: ConsoleV1ExperimentsControllerGenUnarchiveExperimentsResponseBodyData) {
        const message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : `API error occurred: ${JSON.stringify(err)}`;
        super(message);
        this.data$ = err;

        this.status = err.status;

        this.name = "ConsoleV1ExperimentsControllerGenUnarchiveExperimentsResponseBody";
    }
}

export const ConsoleV1ExperimentsControllerGenUnarchiveStatus = {
    FourHundredAndOne: 401,
} as const;
export type ConsoleV1ExperimentsControllerGenUnarchiveStatus = ClosedEnum<
    typeof ConsoleV1ExperimentsControllerGenUnarchiveStatus
>;

/**
 * This endpoint only accepts an active CONSOLE key, but an invalid key was sent. Key: console-xxxXXXxxxXXXxxx
 */
export type ConsoleV1ExperimentsControllerGenUnarchiveResponseBodyData = {
    status: ConsoleV1ExperimentsControllerGenUnarchiveStatus;
    message: string;
};

/**
 * This endpoint only accepts an active CONSOLE key, but an invalid key was sent. Key: console-xxxXXXxxxXXXxxx
 */
export class ConsoleV1ExperimentsControllerGenUnarchiveResponseBody extends Error {
    status: ConsoleV1ExperimentsControllerGenUnarchiveStatus;

    /** The original data that was passed to this error instance. */
    data$: ConsoleV1ExperimentsControllerGenUnarchiveResponseBodyData;

    constructor(err: ConsoleV1ExperimentsControllerGenUnarchiveResponseBodyData) {
        const message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : `API error occurred: ${JSON.stringify(err)}`;
        super(message);
        this.data$ = err;

        this.status = err.status;

        this.name = "ConsoleV1ExperimentsControllerGenUnarchiveResponseBody";
    }
}

/** @internal */
export const ConsoleV1ExperimentsControllerGenUnarchiveExperimentsStatus$inboundSchema: z.ZodNativeEnum<
    typeof ConsoleV1ExperimentsControllerGenUnarchiveExperimentsStatus
> = z.nativeEnum(ConsoleV1ExperimentsControllerGenUnarchiveExperimentsStatus);

/** @internal */
export const ConsoleV1ExperimentsControllerGenUnarchiveExperimentsStatus$outboundSchema: z.ZodNativeEnum<
    typeof ConsoleV1ExperimentsControllerGenUnarchiveExperimentsStatus
> = ConsoleV1ExperimentsControllerGenUnarchiveExperimentsStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConsoleV1ExperimentsControllerGenUnarchiveExperimentsStatus$ {
    /** @deprecated use `ConsoleV1ExperimentsControllerGenUnarchiveExperimentsStatus$inboundSchema` instead. */
    export const inboundSchema =
        ConsoleV1ExperimentsControllerGenUnarchiveExperimentsStatus$inboundSchema;
    /** @deprecated use `ConsoleV1ExperimentsControllerGenUnarchiveExperimentsStatus$outboundSchema` instead. */
    export const outboundSchema =
        ConsoleV1ExperimentsControllerGenUnarchiveExperimentsStatus$outboundSchema;
}

/** @internal */
export const ConsoleV1ExperimentsControllerGenUnarchiveExperimentsResponseBody$inboundSchema: z.ZodType<
    ConsoleV1ExperimentsControllerGenUnarchiveExperimentsResponseBody,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        status: ConsoleV1ExperimentsControllerGenUnarchiveExperimentsStatus$inboundSchema,
        message: z.string(),
    })
    .transform((v) => {
        return new ConsoleV1ExperimentsControllerGenUnarchiveExperimentsResponseBody(v);
    });

/** @internal */
export type ConsoleV1ExperimentsControllerGenUnarchiveExperimentsResponseBody$Outbound = {
    status: number;
    message: string;
};

/** @internal */
export const ConsoleV1ExperimentsControllerGenUnarchiveExperimentsResponseBody$outboundSchema: z.ZodType<
    ConsoleV1ExperimentsControllerGenUnarchiveExperimentsResponseBody$Outbound,
    z.ZodTypeDef,
    ConsoleV1ExperimentsControllerGenUnarchiveExperimentsResponseBody
> = z
    .instanceof(ConsoleV1ExperimentsControllerGenUnarchiveExperimentsResponseBody)
    .transform((v) => v.data$)
    .pipe(
        z.object({
            status: ConsoleV1ExperimentsControllerGenUnarchiveExperimentsStatus$outboundSchema,
            message: z.string(),
        })
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConsoleV1ExperimentsControllerGenUnarchiveExperimentsResponseBody$ {
    /** @deprecated use `ConsoleV1ExperimentsControllerGenUnarchiveExperimentsResponseBody$inboundSchema` instead. */
    export const inboundSchema =
        ConsoleV1ExperimentsControllerGenUnarchiveExperimentsResponseBody$inboundSchema;
    /** @deprecated use `ConsoleV1ExperimentsControllerGenUnarchiveExperimentsResponseBody$outboundSchema` instead. */
    export const outboundSchema =
        ConsoleV1ExperimentsControllerGenUnarchiveExperimentsResponseBody$outboundSchema;
    /** @deprecated use `ConsoleV1ExperimentsControllerGenUnarchiveExperimentsResponseBody$Outbound` instead. */
    export type Outbound =
        ConsoleV1ExperimentsControllerGenUnarchiveExperimentsResponseBody$Outbound;
}

/** @internal */
export const ConsoleV1ExperimentsControllerGenUnarchiveStatus$inboundSchema: z.ZodNativeEnum<
    typeof ConsoleV1ExperimentsControllerGenUnarchiveStatus
> = z.nativeEnum(ConsoleV1ExperimentsControllerGenUnarchiveStatus);

/** @internal */
export const ConsoleV1ExperimentsControllerGenUnarchiveStatus$outboundSchema: z.ZodNativeEnum<
    typeof ConsoleV1ExperimentsControllerGenUnarchiveStatus
> = ConsoleV1ExperimentsControllerGenUnarchiveStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConsoleV1ExperimentsControllerGenUnarchiveStatus$ {
    /** @deprecated use `ConsoleV1ExperimentsControllerGenUnarchiveStatus$inboundSchema` instead. */
    export const inboundSchema = ConsoleV1ExperimentsControllerGenUnarchiveStatus$inboundSchema;
    /** @deprecated use `ConsoleV1ExperimentsControllerGenUnarchiveStatus$outboundSchema` instead. */
    export const outboundSchema = ConsoleV1ExperimentsControllerGenUnarchiveStatus$outboundSchema;
}

/** @internal */
export const ConsoleV1ExperimentsControllerGenUnarchiveResponseBody$inboundSchema: z.ZodType<
    ConsoleV1ExperimentsControllerGenUnarchiveResponseBody,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        status: ConsoleV1ExperimentsControllerGenUnarchiveStatus$inboundSchema,
        message: z.string(),
    })
    .transform((v) => {
        return new ConsoleV1ExperimentsControllerGenUnarchiveResponseBody(v);
    });

/** @internal */
export type ConsoleV1ExperimentsControllerGenUnarchiveResponseBody$Outbound = {
    status: number;
    message: string;
};

/** @internal */
export const ConsoleV1ExperimentsControllerGenUnarchiveResponseBody$outboundSchema: z.ZodType<
    ConsoleV1ExperimentsControllerGenUnarchiveResponseBody$Outbound,
    z.ZodTypeDef,
    ConsoleV1ExperimentsControllerGenUnarchiveResponseBody
> = z
    .instanceof(ConsoleV1ExperimentsControllerGenUnarchiveResponseBody)
    .transform((v) => v.data$)
    .pipe(
        z.object({
            status: ConsoleV1ExperimentsControllerGenUnarchiveStatus$outboundSchema,
            message: z.string(),
        })
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConsoleV1ExperimentsControllerGenUnarchiveResponseBody$ {
    /** @deprecated use `ConsoleV1ExperimentsControllerGenUnarchiveResponseBody$inboundSchema` instead. */
    export const inboundSchema =
        ConsoleV1ExperimentsControllerGenUnarchiveResponseBody$inboundSchema;
    /** @deprecated use `ConsoleV1ExperimentsControllerGenUnarchiveResponseBody$outboundSchema` instead. */
    export const outboundSchema =
        ConsoleV1ExperimentsControllerGenUnarchiveResponseBody$outboundSchema;
    /** @deprecated use `ConsoleV1ExperimentsControllerGenUnarchiveResponseBody$Outbound` instead. */
    export type Outbound = ConsoleV1ExperimentsControllerGenUnarchiveResponseBody$Outbound;
}

/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

export const ConsoleV1SegmentsControllerGenReadSegmentsStatus = {
    FourHundredAndFour: 404,
} as const;
export type ConsoleV1SegmentsControllerGenReadSegmentsStatus = ClosedEnum<
    typeof ConsoleV1SegmentsControllerGenReadSegmentsStatus
>;

/**
 * Segment not found.
 */
export type ConsoleV1SegmentsControllerGenReadSegmentsResponseBodyData = {
    status: ConsoleV1SegmentsControllerGenReadSegmentsStatus;
    message: string;
};

/**
 * Segment not found.
 */
export class ConsoleV1SegmentsControllerGenReadSegmentsResponseBody extends Error {
    status: ConsoleV1SegmentsControllerGenReadSegmentsStatus;

    /** The original data that was passed to this error instance. */
    data$: ConsoleV1SegmentsControllerGenReadSegmentsResponseBodyData;

    constructor(err: ConsoleV1SegmentsControllerGenReadSegmentsResponseBodyData) {
        const message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : `API error occurred: ${JSON.stringify(err)}`;
        super(message);
        this.data$ = err;

        this.status = err.status;

        this.name = "ConsoleV1SegmentsControllerGenReadSegmentsResponseBody";
    }
}

export const ConsoleV1SegmentsControllerGenReadStatus = {
    FourHundredAndOne: 401,
} as const;
export type ConsoleV1SegmentsControllerGenReadStatus = ClosedEnum<
    typeof ConsoleV1SegmentsControllerGenReadStatus
>;

/**
 * This endpoint only accepts an active CONSOLE key, but an invalid key was sent. Key: console-xxxXXXxxxXXXxxx
 */
export type ConsoleV1SegmentsControllerGenReadResponseBodyData = {
    status: ConsoleV1SegmentsControllerGenReadStatus;
    message: string;
};

/**
 * This endpoint only accepts an active CONSOLE key, but an invalid key was sent. Key: console-xxxXXXxxxXXXxxx
 */
export class ConsoleV1SegmentsControllerGenReadResponseBody extends Error {
    status: ConsoleV1SegmentsControllerGenReadStatus;

    /** The original data that was passed to this error instance. */
    data$: ConsoleV1SegmentsControllerGenReadResponseBodyData;

    constructor(err: ConsoleV1SegmentsControllerGenReadResponseBodyData) {
        const message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : `API error occurred: ${JSON.stringify(err)}`;
        super(message);
        this.data$ = err;

        this.status = err.status;

        this.name = "ConsoleV1SegmentsControllerGenReadResponseBody";
    }
}

/** @internal */
export const ConsoleV1SegmentsControllerGenReadSegmentsStatus$inboundSchema: z.ZodNativeEnum<
    typeof ConsoleV1SegmentsControllerGenReadSegmentsStatus
> = z.nativeEnum(ConsoleV1SegmentsControllerGenReadSegmentsStatus);

/** @internal */
export const ConsoleV1SegmentsControllerGenReadSegmentsStatus$outboundSchema: z.ZodNativeEnum<
    typeof ConsoleV1SegmentsControllerGenReadSegmentsStatus
> = ConsoleV1SegmentsControllerGenReadSegmentsStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConsoleV1SegmentsControllerGenReadSegmentsStatus$ {
    /** @deprecated use `ConsoleV1SegmentsControllerGenReadSegmentsStatus$inboundSchema` instead. */
    export const inboundSchema = ConsoleV1SegmentsControllerGenReadSegmentsStatus$inboundSchema;
    /** @deprecated use `ConsoleV1SegmentsControllerGenReadSegmentsStatus$outboundSchema` instead. */
    export const outboundSchema = ConsoleV1SegmentsControllerGenReadSegmentsStatus$outboundSchema;
}

/** @internal */
export const ConsoleV1SegmentsControllerGenReadSegmentsResponseBody$inboundSchema: z.ZodType<
    ConsoleV1SegmentsControllerGenReadSegmentsResponseBody,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        status: ConsoleV1SegmentsControllerGenReadSegmentsStatus$inboundSchema,
        message: z.string(),
    })
    .transform((v) => {
        return new ConsoleV1SegmentsControllerGenReadSegmentsResponseBody(v);
    });

/** @internal */
export type ConsoleV1SegmentsControllerGenReadSegmentsResponseBody$Outbound = {
    status: number;
    message: string;
};

/** @internal */
export const ConsoleV1SegmentsControllerGenReadSegmentsResponseBody$outboundSchema: z.ZodType<
    ConsoleV1SegmentsControllerGenReadSegmentsResponseBody$Outbound,
    z.ZodTypeDef,
    ConsoleV1SegmentsControllerGenReadSegmentsResponseBody
> = z
    .instanceof(ConsoleV1SegmentsControllerGenReadSegmentsResponseBody)
    .transform((v) => v.data$)
    .pipe(
        z.object({
            status: ConsoleV1SegmentsControllerGenReadSegmentsStatus$outboundSchema,
            message: z.string(),
        })
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConsoleV1SegmentsControllerGenReadSegmentsResponseBody$ {
    /** @deprecated use `ConsoleV1SegmentsControllerGenReadSegmentsResponseBody$inboundSchema` instead. */
    export const inboundSchema =
        ConsoleV1SegmentsControllerGenReadSegmentsResponseBody$inboundSchema;
    /** @deprecated use `ConsoleV1SegmentsControllerGenReadSegmentsResponseBody$outboundSchema` instead. */
    export const outboundSchema =
        ConsoleV1SegmentsControllerGenReadSegmentsResponseBody$outboundSchema;
    /** @deprecated use `ConsoleV1SegmentsControllerGenReadSegmentsResponseBody$Outbound` instead. */
    export type Outbound = ConsoleV1SegmentsControllerGenReadSegmentsResponseBody$Outbound;
}

/** @internal */
export const ConsoleV1SegmentsControllerGenReadStatus$inboundSchema: z.ZodNativeEnum<
    typeof ConsoleV1SegmentsControllerGenReadStatus
> = z.nativeEnum(ConsoleV1SegmentsControllerGenReadStatus);

/** @internal */
export const ConsoleV1SegmentsControllerGenReadStatus$outboundSchema: z.ZodNativeEnum<
    typeof ConsoleV1SegmentsControllerGenReadStatus
> = ConsoleV1SegmentsControllerGenReadStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConsoleV1SegmentsControllerGenReadStatus$ {
    /** @deprecated use `ConsoleV1SegmentsControllerGenReadStatus$inboundSchema` instead. */
    export const inboundSchema = ConsoleV1SegmentsControllerGenReadStatus$inboundSchema;
    /** @deprecated use `ConsoleV1SegmentsControllerGenReadStatus$outboundSchema` instead. */
    export const outboundSchema = ConsoleV1SegmentsControllerGenReadStatus$outboundSchema;
}

/** @internal */
export const ConsoleV1SegmentsControllerGenReadResponseBody$inboundSchema: z.ZodType<
    ConsoleV1SegmentsControllerGenReadResponseBody,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        status: ConsoleV1SegmentsControllerGenReadStatus$inboundSchema,
        message: z.string(),
    })
    .transform((v) => {
        return new ConsoleV1SegmentsControllerGenReadResponseBody(v);
    });

/** @internal */
export type ConsoleV1SegmentsControllerGenReadResponseBody$Outbound = {
    status: number;
    message: string;
};

/** @internal */
export const ConsoleV1SegmentsControllerGenReadResponseBody$outboundSchema: z.ZodType<
    ConsoleV1SegmentsControllerGenReadResponseBody$Outbound,
    z.ZodTypeDef,
    ConsoleV1SegmentsControllerGenReadResponseBody
> = z
    .instanceof(ConsoleV1SegmentsControllerGenReadResponseBody)
    .transform((v) => v.data$)
    .pipe(
        z.object({
            status: ConsoleV1SegmentsControllerGenReadStatus$outboundSchema,
            message: z.string(),
        })
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConsoleV1SegmentsControllerGenReadResponseBody$ {
    /** @deprecated use `ConsoleV1SegmentsControllerGenReadResponseBody$inboundSchema` instead. */
    export const inboundSchema = ConsoleV1SegmentsControllerGenReadResponseBody$inboundSchema;
    /** @deprecated use `ConsoleV1SegmentsControllerGenReadResponseBody$outboundSchema` instead. */
    export const outboundSchema = ConsoleV1SegmentsControllerGenReadResponseBody$outboundSchema;
    /** @deprecated use `ConsoleV1SegmentsControllerGenReadResponseBody$Outbound` instead. */
    export type Outbound = ConsoleV1SegmentsControllerGenReadResponseBody$Outbound;
}

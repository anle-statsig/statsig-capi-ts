/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

export const ConsoleV1ExperimentsControllerGenMakeDecisionExperimentsResponseStatus = {
    FourHundredAndFour: 404,
} as const;
export type ConsoleV1ExperimentsControllerGenMakeDecisionExperimentsResponseStatus = ClosedEnum<
    typeof ConsoleV1ExperimentsControllerGenMakeDecisionExperimentsResponseStatus
>;

/**
 * Experiment not found.
 */
export type ConsoleV1ExperimentsControllerGenMakeDecisionExperimentsResponseResponseBodyData = {
    status: ConsoleV1ExperimentsControllerGenMakeDecisionExperimentsResponseStatus;
    message: string;
};

/**
 * Experiment not found.
 */
export class ConsoleV1ExperimentsControllerGenMakeDecisionExperimentsResponseResponseBody extends Error {
    status: ConsoleV1ExperimentsControllerGenMakeDecisionExperimentsResponseStatus;

    /** The original data that was passed to this error instance. */
    data$: ConsoleV1ExperimentsControllerGenMakeDecisionExperimentsResponseResponseBodyData;

    constructor(
        err: ConsoleV1ExperimentsControllerGenMakeDecisionExperimentsResponseResponseBodyData
    ) {
        const message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : `API error occurred: ${JSON.stringify(err)}`;
        super(message);
        this.data$ = err;

        this.status = err.status;

        this.name = "ConsoleV1ExperimentsControllerGenMakeDecisionExperimentsResponseResponseBody";
    }
}

export const ConsoleV1ExperimentsControllerGenMakeDecisionExperimentsStatus = {
    FourHundredAndOne: 401,
} as const;
export type ConsoleV1ExperimentsControllerGenMakeDecisionExperimentsStatus = ClosedEnum<
    typeof ConsoleV1ExperimentsControllerGenMakeDecisionExperimentsStatus
>;

/**
 * This endpoint only accepts an active CONSOLE key, but an invalid key was sent. Key: console-xxxXXXxxxXXXxxx
 */
export type ConsoleV1ExperimentsControllerGenMakeDecisionExperimentsResponseBodyData = {
    status: ConsoleV1ExperimentsControllerGenMakeDecisionExperimentsStatus;
    message: string;
};

/**
 * This endpoint only accepts an active CONSOLE key, but an invalid key was sent. Key: console-xxxXXXxxxXXXxxx
 */
export class ConsoleV1ExperimentsControllerGenMakeDecisionExperimentsResponseBody extends Error {
    status: ConsoleV1ExperimentsControllerGenMakeDecisionExperimentsStatus;

    /** The original data that was passed to this error instance. */
    data$: ConsoleV1ExperimentsControllerGenMakeDecisionExperimentsResponseBodyData;

    constructor(err: ConsoleV1ExperimentsControllerGenMakeDecisionExperimentsResponseBodyData) {
        const message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : `API error occurred: ${JSON.stringify(err)}`;
        super(message);
        this.data$ = err;

        this.status = err.status;

        this.name = "ConsoleV1ExperimentsControllerGenMakeDecisionExperimentsResponseBody";
    }
}

export const ConsoleV1ExperimentsControllerGenMakeDecisionStatus = {
    FourHundred: 400,
} as const;
export type ConsoleV1ExperimentsControllerGenMakeDecisionStatus = ClosedEnum<
    typeof ConsoleV1ExperimentsControllerGenMakeDecisionStatus
>;

/**
 * Experiment has not yet started
 */
export type ConsoleV1ExperimentsControllerGenMakeDecisionResponseBodyData = {
    status: ConsoleV1ExperimentsControllerGenMakeDecisionStatus;
    message: string;
};

/**
 * Experiment has not yet started
 */
export class ConsoleV1ExperimentsControllerGenMakeDecisionResponseBody extends Error {
    status: ConsoleV1ExperimentsControllerGenMakeDecisionStatus;

    /** The original data that was passed to this error instance. */
    data$: ConsoleV1ExperimentsControllerGenMakeDecisionResponseBodyData;

    constructor(err: ConsoleV1ExperimentsControllerGenMakeDecisionResponseBodyData) {
        const message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : `API error occurred: ${JSON.stringify(err)}`;
        super(message);
        this.data$ = err;

        this.status = err.status;

        this.name = "ConsoleV1ExperimentsControllerGenMakeDecisionResponseBody";
    }
}

/** @internal */
export const ConsoleV1ExperimentsControllerGenMakeDecisionExperimentsResponseStatus$inboundSchema: z.ZodNativeEnum<
    typeof ConsoleV1ExperimentsControllerGenMakeDecisionExperimentsResponseStatus
> = z.nativeEnum(ConsoleV1ExperimentsControllerGenMakeDecisionExperimentsResponseStatus);

/** @internal */
export const ConsoleV1ExperimentsControllerGenMakeDecisionExperimentsResponseStatus$outboundSchema: z.ZodNativeEnum<
    typeof ConsoleV1ExperimentsControllerGenMakeDecisionExperimentsResponseStatus
> = ConsoleV1ExperimentsControllerGenMakeDecisionExperimentsResponseStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConsoleV1ExperimentsControllerGenMakeDecisionExperimentsResponseStatus$ {
    /** @deprecated use `ConsoleV1ExperimentsControllerGenMakeDecisionExperimentsResponseStatus$inboundSchema` instead. */
    export const inboundSchema =
        ConsoleV1ExperimentsControllerGenMakeDecisionExperimentsResponseStatus$inboundSchema;
    /** @deprecated use `ConsoleV1ExperimentsControllerGenMakeDecisionExperimentsResponseStatus$outboundSchema` instead. */
    export const outboundSchema =
        ConsoleV1ExperimentsControllerGenMakeDecisionExperimentsResponseStatus$outboundSchema;
}

/** @internal */
export const ConsoleV1ExperimentsControllerGenMakeDecisionExperimentsResponseResponseBody$inboundSchema: z.ZodType<
    ConsoleV1ExperimentsControllerGenMakeDecisionExperimentsResponseResponseBody,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        status: ConsoleV1ExperimentsControllerGenMakeDecisionExperimentsResponseStatus$inboundSchema,
        message: z.string(),
    })
    .transform((v) => {
        return new ConsoleV1ExperimentsControllerGenMakeDecisionExperimentsResponseResponseBody(v);
    });

/** @internal */
export type ConsoleV1ExperimentsControllerGenMakeDecisionExperimentsResponseResponseBody$Outbound =
    {
        status: number;
        message: string;
    };

/** @internal */
export const ConsoleV1ExperimentsControllerGenMakeDecisionExperimentsResponseResponseBody$outboundSchema: z.ZodType<
    ConsoleV1ExperimentsControllerGenMakeDecisionExperimentsResponseResponseBody$Outbound,
    z.ZodTypeDef,
    ConsoleV1ExperimentsControllerGenMakeDecisionExperimentsResponseResponseBody
> = z
    .instanceof(ConsoleV1ExperimentsControllerGenMakeDecisionExperimentsResponseResponseBody)
    .transform((v) => v.data$)
    .pipe(
        z.object({
            status: ConsoleV1ExperimentsControllerGenMakeDecisionExperimentsResponseStatus$outboundSchema,
            message: z.string(),
        })
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConsoleV1ExperimentsControllerGenMakeDecisionExperimentsResponseResponseBody$ {
    /** @deprecated use `ConsoleV1ExperimentsControllerGenMakeDecisionExperimentsResponseResponseBody$inboundSchema` instead. */
    export const inboundSchema =
        ConsoleV1ExperimentsControllerGenMakeDecisionExperimentsResponseResponseBody$inboundSchema;
    /** @deprecated use `ConsoleV1ExperimentsControllerGenMakeDecisionExperimentsResponseResponseBody$outboundSchema` instead. */
    export const outboundSchema =
        ConsoleV1ExperimentsControllerGenMakeDecisionExperimentsResponseResponseBody$outboundSchema;
    /** @deprecated use `ConsoleV1ExperimentsControllerGenMakeDecisionExperimentsResponseResponseBody$Outbound` instead. */
    export type Outbound =
        ConsoleV1ExperimentsControllerGenMakeDecisionExperimentsResponseResponseBody$Outbound;
}

/** @internal */
export const ConsoleV1ExperimentsControllerGenMakeDecisionExperimentsStatus$inboundSchema: z.ZodNativeEnum<
    typeof ConsoleV1ExperimentsControllerGenMakeDecisionExperimentsStatus
> = z.nativeEnum(ConsoleV1ExperimentsControllerGenMakeDecisionExperimentsStatus);

/** @internal */
export const ConsoleV1ExperimentsControllerGenMakeDecisionExperimentsStatus$outboundSchema: z.ZodNativeEnum<
    typeof ConsoleV1ExperimentsControllerGenMakeDecisionExperimentsStatus
> = ConsoleV1ExperimentsControllerGenMakeDecisionExperimentsStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConsoleV1ExperimentsControllerGenMakeDecisionExperimentsStatus$ {
    /** @deprecated use `ConsoleV1ExperimentsControllerGenMakeDecisionExperimentsStatus$inboundSchema` instead. */
    export const inboundSchema =
        ConsoleV1ExperimentsControllerGenMakeDecisionExperimentsStatus$inboundSchema;
    /** @deprecated use `ConsoleV1ExperimentsControllerGenMakeDecisionExperimentsStatus$outboundSchema` instead. */
    export const outboundSchema =
        ConsoleV1ExperimentsControllerGenMakeDecisionExperimentsStatus$outboundSchema;
}

/** @internal */
export const ConsoleV1ExperimentsControllerGenMakeDecisionExperimentsResponseBody$inboundSchema: z.ZodType<
    ConsoleV1ExperimentsControllerGenMakeDecisionExperimentsResponseBody,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        status: ConsoleV1ExperimentsControllerGenMakeDecisionExperimentsStatus$inboundSchema,
        message: z.string(),
    })
    .transform((v) => {
        return new ConsoleV1ExperimentsControllerGenMakeDecisionExperimentsResponseBody(v);
    });

/** @internal */
export type ConsoleV1ExperimentsControllerGenMakeDecisionExperimentsResponseBody$Outbound = {
    status: number;
    message: string;
};

/** @internal */
export const ConsoleV1ExperimentsControllerGenMakeDecisionExperimentsResponseBody$outboundSchema: z.ZodType<
    ConsoleV1ExperimentsControllerGenMakeDecisionExperimentsResponseBody$Outbound,
    z.ZodTypeDef,
    ConsoleV1ExperimentsControllerGenMakeDecisionExperimentsResponseBody
> = z
    .instanceof(ConsoleV1ExperimentsControllerGenMakeDecisionExperimentsResponseBody)
    .transform((v) => v.data$)
    .pipe(
        z.object({
            status: ConsoleV1ExperimentsControllerGenMakeDecisionExperimentsStatus$outboundSchema,
            message: z.string(),
        })
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConsoleV1ExperimentsControllerGenMakeDecisionExperimentsResponseBody$ {
    /** @deprecated use `ConsoleV1ExperimentsControllerGenMakeDecisionExperimentsResponseBody$inboundSchema` instead. */
    export const inboundSchema =
        ConsoleV1ExperimentsControllerGenMakeDecisionExperimentsResponseBody$inboundSchema;
    /** @deprecated use `ConsoleV1ExperimentsControllerGenMakeDecisionExperimentsResponseBody$outboundSchema` instead. */
    export const outboundSchema =
        ConsoleV1ExperimentsControllerGenMakeDecisionExperimentsResponseBody$outboundSchema;
    /** @deprecated use `ConsoleV1ExperimentsControllerGenMakeDecisionExperimentsResponseBody$Outbound` instead. */
    export type Outbound =
        ConsoleV1ExperimentsControllerGenMakeDecisionExperimentsResponseBody$Outbound;
}

/** @internal */
export const ConsoleV1ExperimentsControllerGenMakeDecisionStatus$inboundSchema: z.ZodNativeEnum<
    typeof ConsoleV1ExperimentsControllerGenMakeDecisionStatus
> = z.nativeEnum(ConsoleV1ExperimentsControllerGenMakeDecisionStatus);

/** @internal */
export const ConsoleV1ExperimentsControllerGenMakeDecisionStatus$outboundSchema: z.ZodNativeEnum<
    typeof ConsoleV1ExperimentsControllerGenMakeDecisionStatus
> = ConsoleV1ExperimentsControllerGenMakeDecisionStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConsoleV1ExperimentsControllerGenMakeDecisionStatus$ {
    /** @deprecated use `ConsoleV1ExperimentsControllerGenMakeDecisionStatus$inboundSchema` instead. */
    export const inboundSchema = ConsoleV1ExperimentsControllerGenMakeDecisionStatus$inboundSchema;
    /** @deprecated use `ConsoleV1ExperimentsControllerGenMakeDecisionStatus$outboundSchema` instead. */
    export const outboundSchema =
        ConsoleV1ExperimentsControllerGenMakeDecisionStatus$outboundSchema;
}

/** @internal */
export const ConsoleV1ExperimentsControllerGenMakeDecisionResponseBody$inboundSchema: z.ZodType<
    ConsoleV1ExperimentsControllerGenMakeDecisionResponseBody,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        status: ConsoleV1ExperimentsControllerGenMakeDecisionStatus$inboundSchema,
        message: z.string(),
    })
    .transform((v) => {
        return new ConsoleV1ExperimentsControllerGenMakeDecisionResponseBody(v);
    });

/** @internal */
export type ConsoleV1ExperimentsControllerGenMakeDecisionResponseBody$Outbound = {
    status: number;
    message: string;
};

/** @internal */
export const ConsoleV1ExperimentsControllerGenMakeDecisionResponseBody$outboundSchema: z.ZodType<
    ConsoleV1ExperimentsControllerGenMakeDecisionResponseBody$Outbound,
    z.ZodTypeDef,
    ConsoleV1ExperimentsControllerGenMakeDecisionResponseBody
> = z
    .instanceof(ConsoleV1ExperimentsControllerGenMakeDecisionResponseBody)
    .transform((v) => v.data$)
    .pipe(
        z.object({
            status: ConsoleV1ExperimentsControllerGenMakeDecisionStatus$outboundSchema,
            message: z.string(),
        })
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConsoleV1ExperimentsControllerGenMakeDecisionResponseBody$ {
    /** @deprecated use `ConsoleV1ExperimentsControllerGenMakeDecisionResponseBody$inboundSchema` instead. */
    export const inboundSchema =
        ConsoleV1ExperimentsControllerGenMakeDecisionResponseBody$inboundSchema;
    /** @deprecated use `ConsoleV1ExperimentsControllerGenMakeDecisionResponseBody$outboundSchema` instead. */
    export const outboundSchema =
        ConsoleV1ExperimentsControllerGenMakeDecisionResponseBody$outboundSchema;
    /** @deprecated use `ConsoleV1ExperimentsControllerGenMakeDecisionResponseBody$Outbound` instead. */
    export type Outbound = ConsoleV1ExperimentsControllerGenMakeDecisionResponseBody$Outbound;
}

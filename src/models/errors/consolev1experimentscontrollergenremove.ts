/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

export const ConsoleV1ExperimentsControllerGenRemoveExperimentsStatus = {
    FourHundredAndFour: 404,
} as const;
export type ConsoleV1ExperimentsControllerGenRemoveExperimentsStatus = ClosedEnum<
    typeof ConsoleV1ExperimentsControllerGenRemoveExperimentsStatus
>;

/**
 * Experiment not found.
 */
export type ConsoleV1ExperimentsControllerGenRemoveExperimentsResponseBodyData = {
    status: ConsoleV1ExperimentsControllerGenRemoveExperimentsStatus;
    message: string;
};

/**
 * Experiment not found.
 */
export class ConsoleV1ExperimentsControllerGenRemoveExperimentsResponseBody extends Error {
    status: ConsoleV1ExperimentsControllerGenRemoveExperimentsStatus;

    /** The original data that was passed to this error instance. */
    data$: ConsoleV1ExperimentsControllerGenRemoveExperimentsResponseBodyData;

    constructor(err: ConsoleV1ExperimentsControllerGenRemoveExperimentsResponseBodyData) {
        const message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : `API error occurred: ${JSON.stringify(err)}`;
        super(message);
        this.data$ = err;

        this.status = err.status;

        this.name = "ConsoleV1ExperimentsControllerGenRemoveExperimentsResponseBody";
    }
}

export const ConsoleV1ExperimentsControllerGenRemoveStatus = {
    FourHundredAndOne: 401,
} as const;
export type ConsoleV1ExperimentsControllerGenRemoveStatus = ClosedEnum<
    typeof ConsoleV1ExperimentsControllerGenRemoveStatus
>;

/**
 * This endpoint only accepts an active CONSOLE key, but an invalid key was sent. Key: console-xxxXXXxxxXXXxxx
 */
export type ConsoleV1ExperimentsControllerGenRemoveResponseBodyData = {
    status: ConsoleV1ExperimentsControllerGenRemoveStatus;
    message: string;
};

/**
 * This endpoint only accepts an active CONSOLE key, but an invalid key was sent. Key: console-xxxXXXxxxXXXxxx
 */
export class ConsoleV1ExperimentsControllerGenRemoveResponseBody extends Error {
    status: ConsoleV1ExperimentsControllerGenRemoveStatus;

    /** The original data that was passed to this error instance. */
    data$: ConsoleV1ExperimentsControllerGenRemoveResponseBodyData;

    constructor(err: ConsoleV1ExperimentsControllerGenRemoveResponseBodyData) {
        const message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : `API error occurred: ${JSON.stringify(err)}`;
        super(message);
        this.data$ = err;

        this.status = err.status;

        this.name = "ConsoleV1ExperimentsControllerGenRemoveResponseBody";
    }
}

/** @internal */
export const ConsoleV1ExperimentsControllerGenRemoveExperimentsStatus$inboundSchema: z.ZodNativeEnum<
    typeof ConsoleV1ExperimentsControllerGenRemoveExperimentsStatus
> = z.nativeEnum(ConsoleV1ExperimentsControllerGenRemoveExperimentsStatus);

/** @internal */
export const ConsoleV1ExperimentsControllerGenRemoveExperimentsStatus$outboundSchema: z.ZodNativeEnum<
    typeof ConsoleV1ExperimentsControllerGenRemoveExperimentsStatus
> = ConsoleV1ExperimentsControllerGenRemoveExperimentsStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConsoleV1ExperimentsControllerGenRemoveExperimentsStatus$ {
    /** @deprecated use `ConsoleV1ExperimentsControllerGenRemoveExperimentsStatus$inboundSchema` instead. */
    export const inboundSchema =
        ConsoleV1ExperimentsControllerGenRemoveExperimentsStatus$inboundSchema;
    /** @deprecated use `ConsoleV1ExperimentsControllerGenRemoveExperimentsStatus$outboundSchema` instead. */
    export const outboundSchema =
        ConsoleV1ExperimentsControllerGenRemoveExperimentsStatus$outboundSchema;
}

/** @internal */
export const ConsoleV1ExperimentsControllerGenRemoveExperimentsResponseBody$inboundSchema: z.ZodType<
    ConsoleV1ExperimentsControllerGenRemoveExperimentsResponseBody,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        status: ConsoleV1ExperimentsControllerGenRemoveExperimentsStatus$inboundSchema,
        message: z.string(),
    })
    .transform((v) => {
        return new ConsoleV1ExperimentsControllerGenRemoveExperimentsResponseBody(v);
    });

/** @internal */
export type ConsoleV1ExperimentsControllerGenRemoveExperimentsResponseBody$Outbound = {
    status: number;
    message: string;
};

/** @internal */
export const ConsoleV1ExperimentsControllerGenRemoveExperimentsResponseBody$outboundSchema: z.ZodType<
    ConsoleV1ExperimentsControllerGenRemoveExperimentsResponseBody$Outbound,
    z.ZodTypeDef,
    ConsoleV1ExperimentsControllerGenRemoveExperimentsResponseBody
> = z
    .instanceof(ConsoleV1ExperimentsControllerGenRemoveExperimentsResponseBody)
    .transform((v) => v.data$)
    .pipe(
        z.object({
            status: ConsoleV1ExperimentsControllerGenRemoveExperimentsStatus$outboundSchema,
            message: z.string(),
        })
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConsoleV1ExperimentsControllerGenRemoveExperimentsResponseBody$ {
    /** @deprecated use `ConsoleV1ExperimentsControllerGenRemoveExperimentsResponseBody$inboundSchema` instead. */
    export const inboundSchema =
        ConsoleV1ExperimentsControllerGenRemoveExperimentsResponseBody$inboundSchema;
    /** @deprecated use `ConsoleV1ExperimentsControllerGenRemoveExperimentsResponseBody$outboundSchema` instead. */
    export const outboundSchema =
        ConsoleV1ExperimentsControllerGenRemoveExperimentsResponseBody$outboundSchema;
    /** @deprecated use `ConsoleV1ExperimentsControllerGenRemoveExperimentsResponseBody$Outbound` instead. */
    export type Outbound = ConsoleV1ExperimentsControllerGenRemoveExperimentsResponseBody$Outbound;
}

/** @internal */
export const ConsoleV1ExperimentsControllerGenRemoveStatus$inboundSchema: z.ZodNativeEnum<
    typeof ConsoleV1ExperimentsControllerGenRemoveStatus
> = z.nativeEnum(ConsoleV1ExperimentsControllerGenRemoveStatus);

/** @internal */
export const ConsoleV1ExperimentsControllerGenRemoveStatus$outboundSchema: z.ZodNativeEnum<
    typeof ConsoleV1ExperimentsControllerGenRemoveStatus
> = ConsoleV1ExperimentsControllerGenRemoveStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConsoleV1ExperimentsControllerGenRemoveStatus$ {
    /** @deprecated use `ConsoleV1ExperimentsControllerGenRemoveStatus$inboundSchema` instead. */
    export const inboundSchema = ConsoleV1ExperimentsControllerGenRemoveStatus$inboundSchema;
    /** @deprecated use `ConsoleV1ExperimentsControllerGenRemoveStatus$outboundSchema` instead. */
    export const outboundSchema = ConsoleV1ExperimentsControllerGenRemoveStatus$outboundSchema;
}

/** @internal */
export const ConsoleV1ExperimentsControllerGenRemoveResponseBody$inboundSchema: z.ZodType<
    ConsoleV1ExperimentsControllerGenRemoveResponseBody,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        status: ConsoleV1ExperimentsControllerGenRemoveStatus$inboundSchema,
        message: z.string(),
    })
    .transform((v) => {
        return new ConsoleV1ExperimentsControllerGenRemoveResponseBody(v);
    });

/** @internal */
export type ConsoleV1ExperimentsControllerGenRemoveResponseBody$Outbound = {
    status: number;
    message: string;
};

/** @internal */
export const ConsoleV1ExperimentsControllerGenRemoveResponseBody$outboundSchema: z.ZodType<
    ConsoleV1ExperimentsControllerGenRemoveResponseBody$Outbound,
    z.ZodTypeDef,
    ConsoleV1ExperimentsControllerGenRemoveResponseBody
> = z
    .instanceof(ConsoleV1ExperimentsControllerGenRemoveResponseBody)
    .transform((v) => v.data$)
    .pipe(
        z.object({
            status: ConsoleV1ExperimentsControllerGenRemoveStatus$outboundSchema,
            message: z.string(),
        })
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConsoleV1ExperimentsControllerGenRemoveResponseBody$ {
    /** @deprecated use `ConsoleV1ExperimentsControllerGenRemoveResponseBody$inboundSchema` instead. */
    export const inboundSchema = ConsoleV1ExperimentsControllerGenRemoveResponseBody$inboundSchema;
    /** @deprecated use `ConsoleV1ExperimentsControllerGenRemoveResponseBody$outboundSchema` instead. */
    export const outboundSchema =
        ConsoleV1ExperimentsControllerGenRemoveResponseBody$outboundSchema;
    /** @deprecated use `ConsoleV1ExperimentsControllerGenRemoveResponseBody$Outbound` instead. */
    export type Outbound = ConsoleV1ExperimentsControllerGenRemoveResponseBody$Outbound;
}

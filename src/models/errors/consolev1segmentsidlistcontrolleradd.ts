/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

export const ConsoleV1SegmentsIDListControllerAddSegmentsResponseStatus = {
    FourHundredAndFour: 404,
} as const;
export type ConsoleV1SegmentsIDListControllerAddSegmentsResponseStatus = ClosedEnum<
    typeof ConsoleV1SegmentsIDListControllerAddSegmentsResponseStatus
>;

/**
 * Segment not found.
 */
export type ConsoleV1SegmentsIDListControllerAddSegmentsResponseResponseBodyData = {
    status: ConsoleV1SegmentsIDListControllerAddSegmentsResponseStatus;
    message: string;
};

/**
 * Segment not found.
 */
export class ConsoleV1SegmentsIDListControllerAddSegmentsResponseResponseBody extends Error {
    status: ConsoleV1SegmentsIDListControllerAddSegmentsResponseStatus;

    /** The original data that was passed to this error instance. */
    data$: ConsoleV1SegmentsIDListControllerAddSegmentsResponseResponseBodyData;

    constructor(err: ConsoleV1SegmentsIDListControllerAddSegmentsResponseResponseBodyData) {
        const message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : `API error occurred: ${JSON.stringify(err)}`;
        super(message);
        this.data$ = err;

        this.status = err.status;

        this.name = "ConsoleV1SegmentsIDListControllerAddSegmentsResponseResponseBody";
    }
}

export const ConsoleV1SegmentsIDListControllerAddSegmentsStatus = {
    FourHundredAndOne: 401,
} as const;
export type ConsoleV1SegmentsIDListControllerAddSegmentsStatus = ClosedEnum<
    typeof ConsoleV1SegmentsIDListControllerAddSegmentsStatus
>;

/**
 * This endpoint only accepts an active CONSOLE key, but an invalid key was sent. Key: console-xxxXXXxxxXXXxxx
 */
export type ConsoleV1SegmentsIDListControllerAddSegmentsResponseBodyData = {
    status: ConsoleV1SegmentsIDListControllerAddSegmentsStatus;
    message: string;
};

/**
 * This endpoint only accepts an active CONSOLE key, but an invalid key was sent. Key: console-xxxXXXxxxXXXxxx
 */
export class ConsoleV1SegmentsIDListControllerAddSegmentsResponseBody extends Error {
    status: ConsoleV1SegmentsIDListControllerAddSegmentsStatus;

    /** The original data that was passed to this error instance. */
    data$: ConsoleV1SegmentsIDListControllerAddSegmentsResponseBodyData;

    constructor(err: ConsoleV1SegmentsIDListControllerAddSegmentsResponseBodyData) {
        const message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : `API error occurred: ${JSON.stringify(err)}`;
        super(message);
        this.data$ = err;

        this.status = err.status;

        this.name = "ConsoleV1SegmentsIDListControllerAddSegmentsResponseBody";
    }
}

export const ConsoleV1SegmentsIDListControllerAddStatus = {
    FourHundred: 400,
} as const;
export type ConsoleV1SegmentsIDListControllerAddStatus = ClosedEnum<
    typeof ConsoleV1SegmentsIDListControllerAddStatus
>;

/**
 * Segment must be of type 'id_list' to be modified on this endpoint
 */
export type ConsoleV1SegmentsIDListControllerAddResponseBodyData = {
    status: ConsoleV1SegmentsIDListControllerAddStatus;
    message: string;
};

/**
 * Segment must be of type 'id_list' to be modified on this endpoint
 */
export class ConsoleV1SegmentsIDListControllerAddResponseBody extends Error {
    status: ConsoleV1SegmentsIDListControllerAddStatus;

    /** The original data that was passed to this error instance. */
    data$: ConsoleV1SegmentsIDListControllerAddResponseBodyData;

    constructor(err: ConsoleV1SegmentsIDListControllerAddResponseBodyData) {
        const message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : `API error occurred: ${JSON.stringify(err)}`;
        super(message);
        this.data$ = err;

        this.status = err.status;

        this.name = "ConsoleV1SegmentsIDListControllerAddResponseBody";
    }
}

/** @internal */
export const ConsoleV1SegmentsIDListControllerAddSegmentsResponseStatus$inboundSchema: z.ZodNativeEnum<
    typeof ConsoleV1SegmentsIDListControllerAddSegmentsResponseStatus
> = z.nativeEnum(ConsoleV1SegmentsIDListControllerAddSegmentsResponseStatus);

/** @internal */
export const ConsoleV1SegmentsIDListControllerAddSegmentsResponseStatus$outboundSchema: z.ZodNativeEnum<
    typeof ConsoleV1SegmentsIDListControllerAddSegmentsResponseStatus
> = ConsoleV1SegmentsIDListControllerAddSegmentsResponseStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConsoleV1SegmentsIDListControllerAddSegmentsResponseStatus$ {
    /** @deprecated use `ConsoleV1SegmentsIDListControllerAddSegmentsResponseStatus$inboundSchema` instead. */
    export const inboundSchema =
        ConsoleV1SegmentsIDListControllerAddSegmentsResponseStatus$inboundSchema;
    /** @deprecated use `ConsoleV1SegmentsIDListControllerAddSegmentsResponseStatus$outboundSchema` instead. */
    export const outboundSchema =
        ConsoleV1SegmentsIDListControllerAddSegmentsResponseStatus$outboundSchema;
}

/** @internal */
export const ConsoleV1SegmentsIDListControllerAddSegmentsResponseResponseBody$inboundSchema: z.ZodType<
    ConsoleV1SegmentsIDListControllerAddSegmentsResponseResponseBody,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        status: ConsoleV1SegmentsIDListControllerAddSegmentsResponseStatus$inboundSchema,
        message: z.string(),
    })
    .transform((v) => {
        return new ConsoleV1SegmentsIDListControllerAddSegmentsResponseResponseBody(v);
    });

/** @internal */
export type ConsoleV1SegmentsIDListControllerAddSegmentsResponseResponseBody$Outbound = {
    status: number;
    message: string;
};

/** @internal */
export const ConsoleV1SegmentsIDListControllerAddSegmentsResponseResponseBody$outboundSchema: z.ZodType<
    ConsoleV1SegmentsIDListControllerAddSegmentsResponseResponseBody$Outbound,
    z.ZodTypeDef,
    ConsoleV1SegmentsIDListControllerAddSegmentsResponseResponseBody
> = z
    .instanceof(ConsoleV1SegmentsIDListControllerAddSegmentsResponseResponseBody)
    .transform((v) => v.data$)
    .pipe(
        z.object({
            status: ConsoleV1SegmentsIDListControllerAddSegmentsResponseStatus$outboundSchema,
            message: z.string(),
        })
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConsoleV1SegmentsIDListControllerAddSegmentsResponseResponseBody$ {
    /** @deprecated use `ConsoleV1SegmentsIDListControllerAddSegmentsResponseResponseBody$inboundSchema` instead. */
    export const inboundSchema =
        ConsoleV1SegmentsIDListControllerAddSegmentsResponseResponseBody$inboundSchema;
    /** @deprecated use `ConsoleV1SegmentsIDListControllerAddSegmentsResponseResponseBody$outboundSchema` instead. */
    export const outboundSchema =
        ConsoleV1SegmentsIDListControllerAddSegmentsResponseResponseBody$outboundSchema;
    /** @deprecated use `ConsoleV1SegmentsIDListControllerAddSegmentsResponseResponseBody$Outbound` instead. */
    export type Outbound =
        ConsoleV1SegmentsIDListControllerAddSegmentsResponseResponseBody$Outbound;
}

/** @internal */
export const ConsoleV1SegmentsIDListControllerAddSegmentsStatus$inboundSchema: z.ZodNativeEnum<
    typeof ConsoleV1SegmentsIDListControllerAddSegmentsStatus
> = z.nativeEnum(ConsoleV1SegmentsIDListControllerAddSegmentsStatus);

/** @internal */
export const ConsoleV1SegmentsIDListControllerAddSegmentsStatus$outboundSchema: z.ZodNativeEnum<
    typeof ConsoleV1SegmentsIDListControllerAddSegmentsStatus
> = ConsoleV1SegmentsIDListControllerAddSegmentsStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConsoleV1SegmentsIDListControllerAddSegmentsStatus$ {
    /** @deprecated use `ConsoleV1SegmentsIDListControllerAddSegmentsStatus$inboundSchema` instead. */
    export const inboundSchema = ConsoleV1SegmentsIDListControllerAddSegmentsStatus$inboundSchema;
    /** @deprecated use `ConsoleV1SegmentsIDListControllerAddSegmentsStatus$outboundSchema` instead. */
    export const outboundSchema = ConsoleV1SegmentsIDListControllerAddSegmentsStatus$outboundSchema;
}

/** @internal */
export const ConsoleV1SegmentsIDListControllerAddSegmentsResponseBody$inboundSchema: z.ZodType<
    ConsoleV1SegmentsIDListControllerAddSegmentsResponseBody,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        status: ConsoleV1SegmentsIDListControllerAddSegmentsStatus$inboundSchema,
        message: z.string(),
    })
    .transform((v) => {
        return new ConsoleV1SegmentsIDListControllerAddSegmentsResponseBody(v);
    });

/** @internal */
export type ConsoleV1SegmentsIDListControllerAddSegmentsResponseBody$Outbound = {
    status: number;
    message: string;
};

/** @internal */
export const ConsoleV1SegmentsIDListControllerAddSegmentsResponseBody$outboundSchema: z.ZodType<
    ConsoleV1SegmentsIDListControllerAddSegmentsResponseBody$Outbound,
    z.ZodTypeDef,
    ConsoleV1SegmentsIDListControllerAddSegmentsResponseBody
> = z
    .instanceof(ConsoleV1SegmentsIDListControllerAddSegmentsResponseBody)
    .transform((v) => v.data$)
    .pipe(
        z.object({
            status: ConsoleV1SegmentsIDListControllerAddSegmentsStatus$outboundSchema,
            message: z.string(),
        })
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConsoleV1SegmentsIDListControllerAddSegmentsResponseBody$ {
    /** @deprecated use `ConsoleV1SegmentsIDListControllerAddSegmentsResponseBody$inboundSchema` instead. */
    export const inboundSchema =
        ConsoleV1SegmentsIDListControllerAddSegmentsResponseBody$inboundSchema;
    /** @deprecated use `ConsoleV1SegmentsIDListControllerAddSegmentsResponseBody$outboundSchema` instead. */
    export const outboundSchema =
        ConsoleV1SegmentsIDListControllerAddSegmentsResponseBody$outboundSchema;
    /** @deprecated use `ConsoleV1SegmentsIDListControllerAddSegmentsResponseBody$Outbound` instead. */
    export type Outbound = ConsoleV1SegmentsIDListControllerAddSegmentsResponseBody$Outbound;
}

/** @internal */
export const ConsoleV1SegmentsIDListControllerAddStatus$inboundSchema: z.ZodNativeEnum<
    typeof ConsoleV1SegmentsIDListControllerAddStatus
> = z.nativeEnum(ConsoleV1SegmentsIDListControllerAddStatus);

/** @internal */
export const ConsoleV1SegmentsIDListControllerAddStatus$outboundSchema: z.ZodNativeEnum<
    typeof ConsoleV1SegmentsIDListControllerAddStatus
> = ConsoleV1SegmentsIDListControllerAddStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConsoleV1SegmentsIDListControllerAddStatus$ {
    /** @deprecated use `ConsoleV1SegmentsIDListControllerAddStatus$inboundSchema` instead. */
    export const inboundSchema = ConsoleV1SegmentsIDListControllerAddStatus$inboundSchema;
    /** @deprecated use `ConsoleV1SegmentsIDListControllerAddStatus$outboundSchema` instead. */
    export const outboundSchema = ConsoleV1SegmentsIDListControllerAddStatus$outboundSchema;
}

/** @internal */
export const ConsoleV1SegmentsIDListControllerAddResponseBody$inboundSchema: z.ZodType<
    ConsoleV1SegmentsIDListControllerAddResponseBody,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        status: ConsoleV1SegmentsIDListControllerAddStatus$inboundSchema,
        message: z.string(),
    })
    .transform((v) => {
        return new ConsoleV1SegmentsIDListControllerAddResponseBody(v);
    });

/** @internal */
export type ConsoleV1SegmentsIDListControllerAddResponseBody$Outbound = {
    status: number;
    message: string;
};

/** @internal */
export const ConsoleV1SegmentsIDListControllerAddResponseBody$outboundSchema: z.ZodType<
    ConsoleV1SegmentsIDListControllerAddResponseBody$Outbound,
    z.ZodTypeDef,
    ConsoleV1SegmentsIDListControllerAddResponseBody
> = z
    .instanceof(ConsoleV1SegmentsIDListControllerAddResponseBody)
    .transform((v) => v.data$)
    .pipe(
        z.object({
            status: ConsoleV1SegmentsIDListControllerAddStatus$outboundSchema,
            message: z.string(),
        })
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConsoleV1SegmentsIDListControllerAddResponseBody$ {
    /** @deprecated use `ConsoleV1SegmentsIDListControllerAddResponseBody$inboundSchema` instead. */
    export const inboundSchema = ConsoleV1SegmentsIDListControllerAddResponseBody$inboundSchema;
    /** @deprecated use `ConsoleV1SegmentsIDListControllerAddResponseBody$outboundSchema` instead. */
    export const outboundSchema = ConsoleV1SegmentsIDListControllerAddResponseBody$outboundSchema;
    /** @deprecated use `ConsoleV1SegmentsIDListControllerAddResponseBody$Outbound` instead. */
    export type Outbound = ConsoleV1SegmentsIDListControllerAddResponseBody$Outbound;
}

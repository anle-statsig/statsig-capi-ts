/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

export const ConsoleV1MetricsControllerReloadMetricMetricsStatus = {
    FourHundredAndFour: 404,
} as const;
export type ConsoleV1MetricsControllerReloadMetricMetricsStatus = ClosedEnum<
    typeof ConsoleV1MetricsControllerReloadMetricMetricsStatus
>;

/**
 * Not Found. The requested resource could not be found.
 */
export type ConsoleV1MetricsControllerReloadMetricMetricsResponseBodyData = {
    status: ConsoleV1MetricsControllerReloadMetricMetricsStatus;
    message: string;
};

/**
 * Not Found. The requested resource could not be found.
 */
export class ConsoleV1MetricsControllerReloadMetricMetricsResponseBody extends Error {
    status: ConsoleV1MetricsControllerReloadMetricMetricsStatus;

    /** The original data that was passed to this error instance. */
    data$: ConsoleV1MetricsControllerReloadMetricMetricsResponseBodyData;

    constructor(err: ConsoleV1MetricsControllerReloadMetricMetricsResponseBodyData) {
        const message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : `API error occurred: ${JSON.stringify(err)}`;
        super(message);
        this.data$ = err;

        this.status = err.status;

        this.name = "ConsoleV1MetricsControllerReloadMetricMetricsResponseBody";
    }
}

export const ConsoleV1MetricsControllerReloadMetricStatus = {
    FourHundredAndOne: 401,
} as const;
export type ConsoleV1MetricsControllerReloadMetricStatus = ClosedEnum<
    typeof ConsoleV1MetricsControllerReloadMetricStatus
>;

/**
 * This endpoint only accepts an active CONSOLE key, but an invalid key was sent. Key: console-xxxXXXxxxXXXxxx
 */
export type ConsoleV1MetricsControllerReloadMetricResponseBodyData = {
    status: ConsoleV1MetricsControllerReloadMetricStatus;
    message: string;
};

/**
 * This endpoint only accepts an active CONSOLE key, but an invalid key was sent. Key: console-xxxXXXxxxXXXxxx
 */
export class ConsoleV1MetricsControllerReloadMetricResponseBody extends Error {
    status: ConsoleV1MetricsControllerReloadMetricStatus;

    /** The original data that was passed to this error instance. */
    data$: ConsoleV1MetricsControllerReloadMetricResponseBodyData;

    constructor(err: ConsoleV1MetricsControllerReloadMetricResponseBodyData) {
        const message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : `API error occurred: ${JSON.stringify(err)}`;
        super(message);
        this.data$ = err;

        this.status = err.status;

        this.name = "ConsoleV1MetricsControllerReloadMetricResponseBody";
    }
}

/** @internal */
export const ConsoleV1MetricsControllerReloadMetricMetricsStatus$inboundSchema: z.ZodNativeEnum<
    typeof ConsoleV1MetricsControllerReloadMetricMetricsStatus
> = z.nativeEnum(ConsoleV1MetricsControllerReloadMetricMetricsStatus);

/** @internal */
export const ConsoleV1MetricsControllerReloadMetricMetricsStatus$outboundSchema: z.ZodNativeEnum<
    typeof ConsoleV1MetricsControllerReloadMetricMetricsStatus
> = ConsoleV1MetricsControllerReloadMetricMetricsStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConsoleV1MetricsControllerReloadMetricMetricsStatus$ {
    /** @deprecated use `ConsoleV1MetricsControllerReloadMetricMetricsStatus$inboundSchema` instead. */
    export const inboundSchema = ConsoleV1MetricsControllerReloadMetricMetricsStatus$inboundSchema;
    /** @deprecated use `ConsoleV1MetricsControllerReloadMetricMetricsStatus$outboundSchema` instead. */
    export const outboundSchema =
        ConsoleV1MetricsControllerReloadMetricMetricsStatus$outboundSchema;
}

/** @internal */
export const ConsoleV1MetricsControllerReloadMetricMetricsResponseBody$inboundSchema: z.ZodType<
    ConsoleV1MetricsControllerReloadMetricMetricsResponseBody,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        status: ConsoleV1MetricsControllerReloadMetricMetricsStatus$inboundSchema,
        message: z.string(),
    })
    .transform((v) => {
        return new ConsoleV1MetricsControllerReloadMetricMetricsResponseBody(v);
    });

/** @internal */
export type ConsoleV1MetricsControllerReloadMetricMetricsResponseBody$Outbound = {
    status: number;
    message: string;
};

/** @internal */
export const ConsoleV1MetricsControllerReloadMetricMetricsResponseBody$outboundSchema: z.ZodType<
    ConsoleV1MetricsControllerReloadMetricMetricsResponseBody$Outbound,
    z.ZodTypeDef,
    ConsoleV1MetricsControllerReloadMetricMetricsResponseBody
> = z
    .instanceof(ConsoleV1MetricsControllerReloadMetricMetricsResponseBody)
    .transform((v) => v.data$)
    .pipe(
        z.object({
            status: ConsoleV1MetricsControllerReloadMetricMetricsStatus$outboundSchema,
            message: z.string(),
        })
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConsoleV1MetricsControllerReloadMetricMetricsResponseBody$ {
    /** @deprecated use `ConsoleV1MetricsControllerReloadMetricMetricsResponseBody$inboundSchema` instead. */
    export const inboundSchema =
        ConsoleV1MetricsControllerReloadMetricMetricsResponseBody$inboundSchema;
    /** @deprecated use `ConsoleV1MetricsControllerReloadMetricMetricsResponseBody$outboundSchema` instead. */
    export const outboundSchema =
        ConsoleV1MetricsControllerReloadMetricMetricsResponseBody$outboundSchema;
    /** @deprecated use `ConsoleV1MetricsControllerReloadMetricMetricsResponseBody$Outbound` instead. */
    export type Outbound = ConsoleV1MetricsControllerReloadMetricMetricsResponseBody$Outbound;
}

/** @internal */
export const ConsoleV1MetricsControllerReloadMetricStatus$inboundSchema: z.ZodNativeEnum<
    typeof ConsoleV1MetricsControllerReloadMetricStatus
> = z.nativeEnum(ConsoleV1MetricsControllerReloadMetricStatus);

/** @internal */
export const ConsoleV1MetricsControllerReloadMetricStatus$outboundSchema: z.ZodNativeEnum<
    typeof ConsoleV1MetricsControllerReloadMetricStatus
> = ConsoleV1MetricsControllerReloadMetricStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConsoleV1MetricsControllerReloadMetricStatus$ {
    /** @deprecated use `ConsoleV1MetricsControllerReloadMetricStatus$inboundSchema` instead. */
    export const inboundSchema = ConsoleV1MetricsControllerReloadMetricStatus$inboundSchema;
    /** @deprecated use `ConsoleV1MetricsControllerReloadMetricStatus$outboundSchema` instead. */
    export const outboundSchema = ConsoleV1MetricsControllerReloadMetricStatus$outboundSchema;
}

/** @internal */
export const ConsoleV1MetricsControllerReloadMetricResponseBody$inboundSchema: z.ZodType<
    ConsoleV1MetricsControllerReloadMetricResponseBody,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        status: ConsoleV1MetricsControllerReloadMetricStatus$inboundSchema,
        message: z.string(),
    })
    .transform((v) => {
        return new ConsoleV1MetricsControllerReloadMetricResponseBody(v);
    });

/** @internal */
export type ConsoleV1MetricsControllerReloadMetricResponseBody$Outbound = {
    status: number;
    message: string;
};

/** @internal */
export const ConsoleV1MetricsControllerReloadMetricResponseBody$outboundSchema: z.ZodType<
    ConsoleV1MetricsControllerReloadMetricResponseBody$Outbound,
    z.ZodTypeDef,
    ConsoleV1MetricsControllerReloadMetricResponseBody
> = z
    .instanceof(ConsoleV1MetricsControllerReloadMetricResponseBody)
    .transform((v) => v.data$)
    .pipe(
        z.object({
            status: ConsoleV1MetricsControllerReloadMetricStatus$outboundSchema,
            message: z.string(),
        })
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConsoleV1MetricsControllerReloadMetricResponseBody$ {
    /** @deprecated use `ConsoleV1MetricsControllerReloadMetricResponseBody$inboundSchema` instead. */
    export const inboundSchema = ConsoleV1MetricsControllerReloadMetricResponseBody$inboundSchema;
    /** @deprecated use `ConsoleV1MetricsControllerReloadMetricResponseBody$outboundSchema` instead. */
    export const outboundSchema = ConsoleV1MetricsControllerReloadMetricResponseBody$outboundSchema;
    /** @deprecated use `ConsoleV1MetricsControllerReloadMetricResponseBody$Outbound` instead. */
    export type Outbound = ConsoleV1MetricsControllerReloadMetricResponseBody$Outbound;
}

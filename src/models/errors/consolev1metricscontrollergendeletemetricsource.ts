/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

export const ConsoleV1MetricsControllerGenDeleteMetricSourceMetricSourcesStatus = {
    FourHundredAndOne: 401,
} as const;
export type ConsoleV1MetricsControllerGenDeleteMetricSourceMetricSourcesStatus = ClosedEnum<
    typeof ConsoleV1MetricsControllerGenDeleteMetricSourceMetricSourcesStatus
>;

/**
 * This endpoint only accepts an active CONSOLE key, but an invalid key was sent. Key: console-xxxXXXxxxXXXxxx
 */
export type ConsoleV1MetricsControllerGenDeleteMetricSourceMetricSourcesResponseBodyData = {
    status: ConsoleV1MetricsControllerGenDeleteMetricSourceMetricSourcesStatus;
    message: string;
};

/**
 * This endpoint only accepts an active CONSOLE key, but an invalid key was sent. Key: console-xxxXXXxxxXXXxxx
 */
export class ConsoleV1MetricsControllerGenDeleteMetricSourceMetricSourcesResponseBody extends Error {
    status: ConsoleV1MetricsControllerGenDeleteMetricSourceMetricSourcesStatus;

    /** The original data that was passed to this error instance. */
    data$: ConsoleV1MetricsControllerGenDeleteMetricSourceMetricSourcesResponseBodyData;

    constructor(err: ConsoleV1MetricsControllerGenDeleteMetricSourceMetricSourcesResponseBodyData) {
        const message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : `API error occurred: ${JSON.stringify(err)}`;
        super(message);
        this.data$ = err;

        this.status = err.status;

        this.name = "ConsoleV1MetricsControllerGenDeleteMetricSourceMetricSourcesResponseBody";
    }
}

export const ConsoleV1MetricsControllerGenDeleteMetricSourceStatus = {
    FourHundred: 400,
} as const;
export type ConsoleV1MetricsControllerGenDeleteMetricSourceStatus = ClosedEnum<
    typeof ConsoleV1MetricsControllerGenDeleteMetricSourceStatus
>;

/**
 * Invalid request. Please check the request input and try again.
 */
export type ConsoleV1MetricsControllerGenDeleteMetricSourceResponseBodyData = {
    status: ConsoleV1MetricsControllerGenDeleteMetricSourceStatus;
    message: string;
};

/**
 * Invalid request. Please check the request input and try again.
 */
export class ConsoleV1MetricsControllerGenDeleteMetricSourceResponseBody extends Error {
    status: ConsoleV1MetricsControllerGenDeleteMetricSourceStatus;

    /** The original data that was passed to this error instance. */
    data$: ConsoleV1MetricsControllerGenDeleteMetricSourceResponseBodyData;

    constructor(err: ConsoleV1MetricsControllerGenDeleteMetricSourceResponseBodyData) {
        const message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : `API error occurred: ${JSON.stringify(err)}`;
        super(message);
        this.data$ = err;

        this.status = err.status;

        this.name = "ConsoleV1MetricsControllerGenDeleteMetricSourceResponseBody";
    }
}

/** @internal */
export const ConsoleV1MetricsControllerGenDeleteMetricSourceMetricSourcesStatus$inboundSchema: z.ZodNativeEnum<
    typeof ConsoleV1MetricsControllerGenDeleteMetricSourceMetricSourcesStatus
> = z.nativeEnum(ConsoleV1MetricsControllerGenDeleteMetricSourceMetricSourcesStatus);

/** @internal */
export const ConsoleV1MetricsControllerGenDeleteMetricSourceMetricSourcesStatus$outboundSchema: z.ZodNativeEnum<
    typeof ConsoleV1MetricsControllerGenDeleteMetricSourceMetricSourcesStatus
> = ConsoleV1MetricsControllerGenDeleteMetricSourceMetricSourcesStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConsoleV1MetricsControllerGenDeleteMetricSourceMetricSourcesStatus$ {
    /** @deprecated use `ConsoleV1MetricsControllerGenDeleteMetricSourceMetricSourcesStatus$inboundSchema` instead. */
    export const inboundSchema =
        ConsoleV1MetricsControllerGenDeleteMetricSourceMetricSourcesStatus$inboundSchema;
    /** @deprecated use `ConsoleV1MetricsControllerGenDeleteMetricSourceMetricSourcesStatus$outboundSchema` instead. */
    export const outboundSchema =
        ConsoleV1MetricsControllerGenDeleteMetricSourceMetricSourcesStatus$outboundSchema;
}

/** @internal */
export const ConsoleV1MetricsControllerGenDeleteMetricSourceMetricSourcesResponseBody$inboundSchema: z.ZodType<
    ConsoleV1MetricsControllerGenDeleteMetricSourceMetricSourcesResponseBody,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        status: ConsoleV1MetricsControllerGenDeleteMetricSourceMetricSourcesStatus$inboundSchema,
        message: z.string(),
    })
    .transform((v) => {
        return new ConsoleV1MetricsControllerGenDeleteMetricSourceMetricSourcesResponseBody(v);
    });

/** @internal */
export type ConsoleV1MetricsControllerGenDeleteMetricSourceMetricSourcesResponseBody$Outbound = {
    status: number;
    message: string;
};

/** @internal */
export const ConsoleV1MetricsControllerGenDeleteMetricSourceMetricSourcesResponseBody$outboundSchema: z.ZodType<
    ConsoleV1MetricsControllerGenDeleteMetricSourceMetricSourcesResponseBody$Outbound,
    z.ZodTypeDef,
    ConsoleV1MetricsControllerGenDeleteMetricSourceMetricSourcesResponseBody
> = z
    .instanceof(ConsoleV1MetricsControllerGenDeleteMetricSourceMetricSourcesResponseBody)
    .transform((v) => v.data$)
    .pipe(
        z.object({
            status: ConsoleV1MetricsControllerGenDeleteMetricSourceMetricSourcesStatus$outboundSchema,
            message: z.string(),
        })
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConsoleV1MetricsControllerGenDeleteMetricSourceMetricSourcesResponseBody$ {
    /** @deprecated use `ConsoleV1MetricsControllerGenDeleteMetricSourceMetricSourcesResponseBody$inboundSchema` instead. */
    export const inboundSchema =
        ConsoleV1MetricsControllerGenDeleteMetricSourceMetricSourcesResponseBody$inboundSchema;
    /** @deprecated use `ConsoleV1MetricsControllerGenDeleteMetricSourceMetricSourcesResponseBody$outboundSchema` instead. */
    export const outboundSchema =
        ConsoleV1MetricsControllerGenDeleteMetricSourceMetricSourcesResponseBody$outboundSchema;
    /** @deprecated use `ConsoleV1MetricsControllerGenDeleteMetricSourceMetricSourcesResponseBody$Outbound` instead. */
    export type Outbound =
        ConsoleV1MetricsControllerGenDeleteMetricSourceMetricSourcesResponseBody$Outbound;
}

/** @internal */
export const ConsoleV1MetricsControllerGenDeleteMetricSourceStatus$inboundSchema: z.ZodNativeEnum<
    typeof ConsoleV1MetricsControllerGenDeleteMetricSourceStatus
> = z.nativeEnum(ConsoleV1MetricsControllerGenDeleteMetricSourceStatus);

/** @internal */
export const ConsoleV1MetricsControllerGenDeleteMetricSourceStatus$outboundSchema: z.ZodNativeEnum<
    typeof ConsoleV1MetricsControllerGenDeleteMetricSourceStatus
> = ConsoleV1MetricsControllerGenDeleteMetricSourceStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConsoleV1MetricsControllerGenDeleteMetricSourceStatus$ {
    /** @deprecated use `ConsoleV1MetricsControllerGenDeleteMetricSourceStatus$inboundSchema` instead. */
    export const inboundSchema =
        ConsoleV1MetricsControllerGenDeleteMetricSourceStatus$inboundSchema;
    /** @deprecated use `ConsoleV1MetricsControllerGenDeleteMetricSourceStatus$outboundSchema` instead. */
    export const outboundSchema =
        ConsoleV1MetricsControllerGenDeleteMetricSourceStatus$outboundSchema;
}

/** @internal */
export const ConsoleV1MetricsControllerGenDeleteMetricSourceResponseBody$inboundSchema: z.ZodType<
    ConsoleV1MetricsControllerGenDeleteMetricSourceResponseBody,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        status: ConsoleV1MetricsControllerGenDeleteMetricSourceStatus$inboundSchema,
        message: z.string(),
    })
    .transform((v) => {
        return new ConsoleV1MetricsControllerGenDeleteMetricSourceResponseBody(v);
    });

/** @internal */
export type ConsoleV1MetricsControllerGenDeleteMetricSourceResponseBody$Outbound = {
    status: number;
    message: string;
};

/** @internal */
export const ConsoleV1MetricsControllerGenDeleteMetricSourceResponseBody$outboundSchema: z.ZodType<
    ConsoleV1MetricsControllerGenDeleteMetricSourceResponseBody$Outbound,
    z.ZodTypeDef,
    ConsoleV1MetricsControllerGenDeleteMetricSourceResponseBody
> = z
    .instanceof(ConsoleV1MetricsControllerGenDeleteMetricSourceResponseBody)
    .transform((v) => v.data$)
    .pipe(
        z.object({
            status: ConsoleV1MetricsControllerGenDeleteMetricSourceStatus$outboundSchema,
            message: z.string(),
        })
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConsoleV1MetricsControllerGenDeleteMetricSourceResponseBody$ {
    /** @deprecated use `ConsoleV1MetricsControllerGenDeleteMetricSourceResponseBody$inboundSchema` instead. */
    export const inboundSchema =
        ConsoleV1MetricsControllerGenDeleteMetricSourceResponseBody$inboundSchema;
    /** @deprecated use `ConsoleV1MetricsControllerGenDeleteMetricSourceResponseBody$outboundSchema` instead. */
    export const outboundSchema =
        ConsoleV1MetricsControllerGenDeleteMetricSourceResponseBody$outboundSchema;
    /** @deprecated use `ConsoleV1MetricsControllerGenDeleteMetricSourceResponseBody$Outbound` instead. */
    export type Outbound = ConsoleV1MetricsControllerGenDeleteMetricSourceResponseBody$Outbound;
}

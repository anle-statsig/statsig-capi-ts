/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

export const ConsoleV1ExperimentsControllerGenResetExperimentsResponseStatus = {
    FourHundredAndFour: 404,
} as const;
export type ConsoleV1ExperimentsControllerGenResetExperimentsResponseStatus = ClosedEnum<
    typeof ConsoleV1ExperimentsControllerGenResetExperimentsResponseStatus
>;

/**
 * Experiment not found.
 */
export type ConsoleV1ExperimentsControllerGenResetExperimentsResponseResponseBodyData = {
    status: ConsoleV1ExperimentsControllerGenResetExperimentsResponseStatus;
    message: string;
};

/**
 * Experiment not found.
 */
export class ConsoleV1ExperimentsControllerGenResetExperimentsResponseResponseBody extends Error {
    status: ConsoleV1ExperimentsControllerGenResetExperimentsResponseStatus;

    /** The original data that was passed to this error instance. */
    data$: ConsoleV1ExperimentsControllerGenResetExperimentsResponseResponseBodyData;

    constructor(err: ConsoleV1ExperimentsControllerGenResetExperimentsResponseResponseBodyData) {
        const message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : `API error occurred: ${JSON.stringify(err)}`;
        super(message);
        this.data$ = err;

        this.status = err.status;

        this.name = "ConsoleV1ExperimentsControllerGenResetExperimentsResponseResponseBody";
    }
}

export const ConsoleV1ExperimentsControllerGenResetExperimentsStatus = {
    FourHundredAndOne: 401,
} as const;
export type ConsoleV1ExperimentsControllerGenResetExperimentsStatus = ClosedEnum<
    typeof ConsoleV1ExperimentsControllerGenResetExperimentsStatus
>;

/**
 * This endpoint only accepts an active CONSOLE key, but an invalid key was sent. Key: console-xxxXXXxxxXXXxxx
 */
export type ConsoleV1ExperimentsControllerGenResetExperimentsResponseBodyData = {
    status: ConsoleV1ExperimentsControllerGenResetExperimentsStatus;
    message: string;
};

/**
 * This endpoint only accepts an active CONSOLE key, but an invalid key was sent. Key: console-xxxXXXxxxXXXxxx
 */
export class ConsoleV1ExperimentsControllerGenResetExperimentsResponseBody extends Error {
    status: ConsoleV1ExperimentsControllerGenResetExperimentsStatus;

    /** The original data that was passed to this error instance. */
    data$: ConsoleV1ExperimentsControllerGenResetExperimentsResponseBodyData;

    constructor(err: ConsoleV1ExperimentsControllerGenResetExperimentsResponseBodyData) {
        const message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : `API error occurred: ${JSON.stringify(err)}`;
        super(message);
        this.data$ = err;

        this.status = err.status;

        this.name = "ConsoleV1ExperimentsControllerGenResetExperimentsResponseBody";
    }
}

export const ConsoleV1ExperimentsControllerGenResetStatus = {
    FourHundred: 400,
} as const;
export type ConsoleV1ExperimentsControllerGenResetStatus = ClosedEnum<
    typeof ConsoleV1ExperimentsControllerGenResetStatus
>;

/**
 * Experiment has not yet started
 */
export type ConsoleV1ExperimentsControllerGenResetResponseBodyData = {
    status: ConsoleV1ExperimentsControllerGenResetStatus;
    message: string;
};

/**
 * Experiment has not yet started
 */
export class ConsoleV1ExperimentsControllerGenResetResponseBody extends Error {
    status: ConsoleV1ExperimentsControllerGenResetStatus;

    /** The original data that was passed to this error instance. */
    data$: ConsoleV1ExperimentsControllerGenResetResponseBodyData;

    constructor(err: ConsoleV1ExperimentsControllerGenResetResponseBodyData) {
        const message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : `API error occurred: ${JSON.stringify(err)}`;
        super(message);
        this.data$ = err;

        this.status = err.status;

        this.name = "ConsoleV1ExperimentsControllerGenResetResponseBody";
    }
}

/** @internal */
export const ConsoleV1ExperimentsControllerGenResetExperimentsResponseStatus$inboundSchema: z.ZodNativeEnum<
    typeof ConsoleV1ExperimentsControllerGenResetExperimentsResponseStatus
> = z.nativeEnum(ConsoleV1ExperimentsControllerGenResetExperimentsResponseStatus);

/** @internal */
export const ConsoleV1ExperimentsControllerGenResetExperimentsResponseStatus$outboundSchema: z.ZodNativeEnum<
    typeof ConsoleV1ExperimentsControllerGenResetExperimentsResponseStatus
> = ConsoleV1ExperimentsControllerGenResetExperimentsResponseStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConsoleV1ExperimentsControllerGenResetExperimentsResponseStatus$ {
    /** @deprecated use `ConsoleV1ExperimentsControllerGenResetExperimentsResponseStatus$inboundSchema` instead. */
    export const inboundSchema =
        ConsoleV1ExperimentsControllerGenResetExperimentsResponseStatus$inboundSchema;
    /** @deprecated use `ConsoleV1ExperimentsControllerGenResetExperimentsResponseStatus$outboundSchema` instead. */
    export const outboundSchema =
        ConsoleV1ExperimentsControllerGenResetExperimentsResponseStatus$outboundSchema;
}

/** @internal */
export const ConsoleV1ExperimentsControllerGenResetExperimentsResponseResponseBody$inboundSchema: z.ZodType<
    ConsoleV1ExperimentsControllerGenResetExperimentsResponseResponseBody,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        status: ConsoleV1ExperimentsControllerGenResetExperimentsResponseStatus$inboundSchema,
        message: z.string(),
    })
    .transform((v) => {
        return new ConsoleV1ExperimentsControllerGenResetExperimentsResponseResponseBody(v);
    });

/** @internal */
export type ConsoleV1ExperimentsControllerGenResetExperimentsResponseResponseBody$Outbound = {
    status: number;
    message: string;
};

/** @internal */
export const ConsoleV1ExperimentsControllerGenResetExperimentsResponseResponseBody$outboundSchema: z.ZodType<
    ConsoleV1ExperimentsControllerGenResetExperimentsResponseResponseBody$Outbound,
    z.ZodTypeDef,
    ConsoleV1ExperimentsControllerGenResetExperimentsResponseResponseBody
> = z
    .instanceof(ConsoleV1ExperimentsControllerGenResetExperimentsResponseResponseBody)
    .transform((v) => v.data$)
    .pipe(
        z.object({
            status: ConsoleV1ExperimentsControllerGenResetExperimentsResponseStatus$outboundSchema,
            message: z.string(),
        })
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConsoleV1ExperimentsControllerGenResetExperimentsResponseResponseBody$ {
    /** @deprecated use `ConsoleV1ExperimentsControllerGenResetExperimentsResponseResponseBody$inboundSchema` instead. */
    export const inboundSchema =
        ConsoleV1ExperimentsControllerGenResetExperimentsResponseResponseBody$inboundSchema;
    /** @deprecated use `ConsoleV1ExperimentsControllerGenResetExperimentsResponseResponseBody$outboundSchema` instead. */
    export const outboundSchema =
        ConsoleV1ExperimentsControllerGenResetExperimentsResponseResponseBody$outboundSchema;
    /** @deprecated use `ConsoleV1ExperimentsControllerGenResetExperimentsResponseResponseBody$Outbound` instead. */
    export type Outbound =
        ConsoleV1ExperimentsControllerGenResetExperimentsResponseResponseBody$Outbound;
}

/** @internal */
export const ConsoleV1ExperimentsControllerGenResetExperimentsStatus$inboundSchema: z.ZodNativeEnum<
    typeof ConsoleV1ExperimentsControllerGenResetExperimentsStatus
> = z.nativeEnum(ConsoleV1ExperimentsControllerGenResetExperimentsStatus);

/** @internal */
export const ConsoleV1ExperimentsControllerGenResetExperimentsStatus$outboundSchema: z.ZodNativeEnum<
    typeof ConsoleV1ExperimentsControllerGenResetExperimentsStatus
> = ConsoleV1ExperimentsControllerGenResetExperimentsStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConsoleV1ExperimentsControllerGenResetExperimentsStatus$ {
    /** @deprecated use `ConsoleV1ExperimentsControllerGenResetExperimentsStatus$inboundSchema` instead. */
    export const inboundSchema =
        ConsoleV1ExperimentsControllerGenResetExperimentsStatus$inboundSchema;
    /** @deprecated use `ConsoleV1ExperimentsControllerGenResetExperimentsStatus$outboundSchema` instead. */
    export const outboundSchema =
        ConsoleV1ExperimentsControllerGenResetExperimentsStatus$outboundSchema;
}

/** @internal */
export const ConsoleV1ExperimentsControllerGenResetExperimentsResponseBody$inboundSchema: z.ZodType<
    ConsoleV1ExperimentsControllerGenResetExperimentsResponseBody,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        status: ConsoleV1ExperimentsControllerGenResetExperimentsStatus$inboundSchema,
        message: z.string(),
    })
    .transform((v) => {
        return new ConsoleV1ExperimentsControllerGenResetExperimentsResponseBody(v);
    });

/** @internal */
export type ConsoleV1ExperimentsControllerGenResetExperimentsResponseBody$Outbound = {
    status: number;
    message: string;
};

/** @internal */
export const ConsoleV1ExperimentsControllerGenResetExperimentsResponseBody$outboundSchema: z.ZodType<
    ConsoleV1ExperimentsControllerGenResetExperimentsResponseBody$Outbound,
    z.ZodTypeDef,
    ConsoleV1ExperimentsControllerGenResetExperimentsResponseBody
> = z
    .instanceof(ConsoleV1ExperimentsControllerGenResetExperimentsResponseBody)
    .transform((v) => v.data$)
    .pipe(
        z.object({
            status: ConsoleV1ExperimentsControllerGenResetExperimentsStatus$outboundSchema,
            message: z.string(),
        })
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConsoleV1ExperimentsControllerGenResetExperimentsResponseBody$ {
    /** @deprecated use `ConsoleV1ExperimentsControllerGenResetExperimentsResponseBody$inboundSchema` instead. */
    export const inboundSchema =
        ConsoleV1ExperimentsControllerGenResetExperimentsResponseBody$inboundSchema;
    /** @deprecated use `ConsoleV1ExperimentsControllerGenResetExperimentsResponseBody$outboundSchema` instead. */
    export const outboundSchema =
        ConsoleV1ExperimentsControllerGenResetExperimentsResponseBody$outboundSchema;
    /** @deprecated use `ConsoleV1ExperimentsControllerGenResetExperimentsResponseBody$Outbound` instead. */
    export type Outbound = ConsoleV1ExperimentsControllerGenResetExperimentsResponseBody$Outbound;
}

/** @internal */
export const ConsoleV1ExperimentsControllerGenResetStatus$inboundSchema: z.ZodNativeEnum<
    typeof ConsoleV1ExperimentsControllerGenResetStatus
> = z.nativeEnum(ConsoleV1ExperimentsControllerGenResetStatus);

/** @internal */
export const ConsoleV1ExperimentsControllerGenResetStatus$outboundSchema: z.ZodNativeEnum<
    typeof ConsoleV1ExperimentsControllerGenResetStatus
> = ConsoleV1ExperimentsControllerGenResetStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConsoleV1ExperimentsControllerGenResetStatus$ {
    /** @deprecated use `ConsoleV1ExperimentsControllerGenResetStatus$inboundSchema` instead. */
    export const inboundSchema = ConsoleV1ExperimentsControllerGenResetStatus$inboundSchema;
    /** @deprecated use `ConsoleV1ExperimentsControllerGenResetStatus$outboundSchema` instead. */
    export const outboundSchema = ConsoleV1ExperimentsControllerGenResetStatus$outboundSchema;
}

/** @internal */
export const ConsoleV1ExperimentsControllerGenResetResponseBody$inboundSchema: z.ZodType<
    ConsoleV1ExperimentsControllerGenResetResponseBody,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        status: ConsoleV1ExperimentsControllerGenResetStatus$inboundSchema,
        message: z.string(),
    })
    .transform((v) => {
        return new ConsoleV1ExperimentsControllerGenResetResponseBody(v);
    });

/** @internal */
export type ConsoleV1ExperimentsControllerGenResetResponseBody$Outbound = {
    status: number;
    message: string;
};

/** @internal */
export const ConsoleV1ExperimentsControllerGenResetResponseBody$outboundSchema: z.ZodType<
    ConsoleV1ExperimentsControllerGenResetResponseBody$Outbound,
    z.ZodTypeDef,
    ConsoleV1ExperimentsControllerGenResetResponseBody
> = z
    .instanceof(ConsoleV1ExperimentsControllerGenResetResponseBody)
    .transform((v) => v.data$)
    .pipe(
        z.object({
            status: ConsoleV1ExperimentsControllerGenResetStatus$outboundSchema,
            message: z.string(),
        })
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConsoleV1ExperimentsControllerGenResetResponseBody$ {
    /** @deprecated use `ConsoleV1ExperimentsControllerGenResetResponseBody$inboundSchema` instead. */
    export const inboundSchema = ConsoleV1ExperimentsControllerGenResetResponseBody$inboundSchema;
    /** @deprecated use `ConsoleV1ExperimentsControllerGenResetResponseBody$outboundSchema` instead. */
    export const outboundSchema = ConsoleV1ExperimentsControllerGenResetResponseBody$outboundSchema;
    /** @deprecated use `ConsoleV1ExperimentsControllerGenResetResponseBody$Outbound` instead. */
    export type Outbound = ConsoleV1ExperimentsControllerGenResetResponseBody$Outbound;
}

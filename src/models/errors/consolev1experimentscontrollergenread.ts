/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

export const ConsoleV1ExperimentsControllerGenReadExperimentsStatus = {
    FourHundredAndFour: 404,
} as const;
export type ConsoleV1ExperimentsControllerGenReadExperimentsStatus = ClosedEnum<
    typeof ConsoleV1ExperimentsControllerGenReadExperimentsStatus
>;

/**
 * Experiment not found.
 */
export type ConsoleV1ExperimentsControllerGenReadExperimentsResponseBodyData = {
    status: ConsoleV1ExperimentsControllerGenReadExperimentsStatus;
    message: string;
};

/**
 * Experiment not found.
 */
export class ConsoleV1ExperimentsControllerGenReadExperimentsResponseBody extends Error {
    status: ConsoleV1ExperimentsControllerGenReadExperimentsStatus;

    /** The original data that was passed to this error instance. */
    data$: ConsoleV1ExperimentsControllerGenReadExperimentsResponseBodyData;

    constructor(err: ConsoleV1ExperimentsControllerGenReadExperimentsResponseBodyData) {
        const message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : `API error occurred: ${JSON.stringify(err)}`;
        super(message);
        this.data$ = err;

        this.status = err.status;

        this.name = "ConsoleV1ExperimentsControllerGenReadExperimentsResponseBody";
    }
}

export const ConsoleV1ExperimentsControllerGenReadStatus = {
    FourHundredAndOne: 401,
} as const;
export type ConsoleV1ExperimentsControllerGenReadStatus = ClosedEnum<
    typeof ConsoleV1ExperimentsControllerGenReadStatus
>;

/**
 * This endpoint only accepts an active CONSOLE key, but an invalid key was sent. Key: console-xxxXXXxxxXXXxxx
 */
export type ConsoleV1ExperimentsControllerGenReadResponseBodyData = {
    status: ConsoleV1ExperimentsControllerGenReadStatus;
    message: string;
};

/**
 * This endpoint only accepts an active CONSOLE key, but an invalid key was sent. Key: console-xxxXXXxxxXXXxxx
 */
export class ConsoleV1ExperimentsControllerGenReadResponseBody extends Error {
    status: ConsoleV1ExperimentsControllerGenReadStatus;

    /** The original data that was passed to this error instance. */
    data$: ConsoleV1ExperimentsControllerGenReadResponseBodyData;

    constructor(err: ConsoleV1ExperimentsControllerGenReadResponseBodyData) {
        const message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : `API error occurred: ${JSON.stringify(err)}`;
        super(message);
        this.data$ = err;

        this.status = err.status;

        this.name = "ConsoleV1ExperimentsControllerGenReadResponseBody";
    }
}

/** @internal */
export const ConsoleV1ExperimentsControllerGenReadExperimentsStatus$inboundSchema: z.ZodNativeEnum<
    typeof ConsoleV1ExperimentsControllerGenReadExperimentsStatus
> = z.nativeEnum(ConsoleV1ExperimentsControllerGenReadExperimentsStatus);

/** @internal */
export const ConsoleV1ExperimentsControllerGenReadExperimentsStatus$outboundSchema: z.ZodNativeEnum<
    typeof ConsoleV1ExperimentsControllerGenReadExperimentsStatus
> = ConsoleV1ExperimentsControllerGenReadExperimentsStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConsoleV1ExperimentsControllerGenReadExperimentsStatus$ {
    /** @deprecated use `ConsoleV1ExperimentsControllerGenReadExperimentsStatus$inboundSchema` instead. */
    export const inboundSchema =
        ConsoleV1ExperimentsControllerGenReadExperimentsStatus$inboundSchema;
    /** @deprecated use `ConsoleV1ExperimentsControllerGenReadExperimentsStatus$outboundSchema` instead. */
    export const outboundSchema =
        ConsoleV1ExperimentsControllerGenReadExperimentsStatus$outboundSchema;
}

/** @internal */
export const ConsoleV1ExperimentsControllerGenReadExperimentsResponseBody$inboundSchema: z.ZodType<
    ConsoleV1ExperimentsControllerGenReadExperimentsResponseBody,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        status: ConsoleV1ExperimentsControllerGenReadExperimentsStatus$inboundSchema,
        message: z.string(),
    })
    .transform((v) => {
        return new ConsoleV1ExperimentsControllerGenReadExperimentsResponseBody(v);
    });

/** @internal */
export type ConsoleV1ExperimentsControllerGenReadExperimentsResponseBody$Outbound = {
    status: number;
    message: string;
};

/** @internal */
export const ConsoleV1ExperimentsControllerGenReadExperimentsResponseBody$outboundSchema: z.ZodType<
    ConsoleV1ExperimentsControllerGenReadExperimentsResponseBody$Outbound,
    z.ZodTypeDef,
    ConsoleV1ExperimentsControllerGenReadExperimentsResponseBody
> = z
    .instanceof(ConsoleV1ExperimentsControllerGenReadExperimentsResponseBody)
    .transform((v) => v.data$)
    .pipe(
        z.object({
            status: ConsoleV1ExperimentsControllerGenReadExperimentsStatus$outboundSchema,
            message: z.string(),
        })
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConsoleV1ExperimentsControllerGenReadExperimentsResponseBody$ {
    /** @deprecated use `ConsoleV1ExperimentsControllerGenReadExperimentsResponseBody$inboundSchema` instead. */
    export const inboundSchema =
        ConsoleV1ExperimentsControllerGenReadExperimentsResponseBody$inboundSchema;
    /** @deprecated use `ConsoleV1ExperimentsControllerGenReadExperimentsResponseBody$outboundSchema` instead. */
    export const outboundSchema =
        ConsoleV1ExperimentsControllerGenReadExperimentsResponseBody$outboundSchema;
    /** @deprecated use `ConsoleV1ExperimentsControllerGenReadExperimentsResponseBody$Outbound` instead. */
    export type Outbound = ConsoleV1ExperimentsControllerGenReadExperimentsResponseBody$Outbound;
}

/** @internal */
export const ConsoleV1ExperimentsControllerGenReadStatus$inboundSchema: z.ZodNativeEnum<
    typeof ConsoleV1ExperimentsControllerGenReadStatus
> = z.nativeEnum(ConsoleV1ExperimentsControllerGenReadStatus);

/** @internal */
export const ConsoleV1ExperimentsControllerGenReadStatus$outboundSchema: z.ZodNativeEnum<
    typeof ConsoleV1ExperimentsControllerGenReadStatus
> = ConsoleV1ExperimentsControllerGenReadStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConsoleV1ExperimentsControllerGenReadStatus$ {
    /** @deprecated use `ConsoleV1ExperimentsControllerGenReadStatus$inboundSchema` instead. */
    export const inboundSchema = ConsoleV1ExperimentsControllerGenReadStatus$inboundSchema;
    /** @deprecated use `ConsoleV1ExperimentsControllerGenReadStatus$outboundSchema` instead. */
    export const outboundSchema = ConsoleV1ExperimentsControllerGenReadStatus$outboundSchema;
}

/** @internal */
export const ConsoleV1ExperimentsControllerGenReadResponseBody$inboundSchema: z.ZodType<
    ConsoleV1ExperimentsControllerGenReadResponseBody,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        status: ConsoleV1ExperimentsControllerGenReadStatus$inboundSchema,
        message: z.string(),
    })
    .transform((v) => {
        return new ConsoleV1ExperimentsControllerGenReadResponseBody(v);
    });

/** @internal */
export type ConsoleV1ExperimentsControllerGenReadResponseBody$Outbound = {
    status: number;
    message: string;
};

/** @internal */
export const ConsoleV1ExperimentsControllerGenReadResponseBody$outboundSchema: z.ZodType<
    ConsoleV1ExperimentsControllerGenReadResponseBody$Outbound,
    z.ZodTypeDef,
    ConsoleV1ExperimentsControllerGenReadResponseBody
> = z
    .instanceof(ConsoleV1ExperimentsControllerGenReadResponseBody)
    .transform((v) => v.data$)
    .pipe(
        z.object({
            status: ConsoleV1ExperimentsControllerGenReadStatus$outboundSchema,
            message: z.string(),
        })
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConsoleV1ExperimentsControllerGenReadResponseBody$ {
    /** @deprecated use `ConsoleV1ExperimentsControllerGenReadResponseBody$inboundSchema` instead. */
    export const inboundSchema = ConsoleV1ExperimentsControllerGenReadResponseBody$inboundSchema;
    /** @deprecated use `ConsoleV1ExperimentsControllerGenReadResponseBody$outboundSchema` instead. */
    export const outboundSchema = ConsoleV1ExperimentsControllerGenReadResponseBody$outboundSchema;
    /** @deprecated use `ConsoleV1ExperimentsControllerGenReadResponseBody$Outbound` instead. */
    export type Outbound = ConsoleV1ExperimentsControllerGenReadResponseBody$Outbound;
}

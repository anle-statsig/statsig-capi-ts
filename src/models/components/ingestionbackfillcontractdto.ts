/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

export const IngestionBackfillContractDtoType = {
    Redshift: "redshift",
    BigqueryV2: "bigquery-v2",
    SnowflakeV2: "snowflake-v2",
    Databricks: "databricks",
    AzureSynapse: "azure-synapse",
    S3: "s3",
    Athena: "athena",
    Adls: "adls",
} as const;
export type IngestionBackfillContractDtoType = ClosedEnum<typeof IngestionBackfillContractDtoType>;

export type Source = string | Array<string>;

export const Dataset = {
    Events: "Events",
    Metrics: "Metrics",
    ExportExposures: "export_exposures",
    EntityProperties: "entity_properties",
} as const;
export type Dataset = ClosedEnum<typeof Dataset>;

export type IngestionBackfillContractDto = {
    datestampStart: string;
    datestampEnd: string;
    type: IngestionBackfillContractDtoType;
    source?: string | Array<string> | null | undefined;
    dataset: Dataset;
};

/** @internal */
export const IngestionBackfillContractDtoType$inboundSchema: z.ZodNativeEnum<
    typeof IngestionBackfillContractDtoType
> = z.nativeEnum(IngestionBackfillContractDtoType);

/** @internal */
export const IngestionBackfillContractDtoType$outboundSchema: z.ZodNativeEnum<
    typeof IngestionBackfillContractDtoType
> = IngestionBackfillContractDtoType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IngestionBackfillContractDtoType$ {
    /** @deprecated use `IngestionBackfillContractDtoType$inboundSchema` instead. */
    export const inboundSchema = IngestionBackfillContractDtoType$inboundSchema;
    /** @deprecated use `IngestionBackfillContractDtoType$outboundSchema` instead. */
    export const outboundSchema = IngestionBackfillContractDtoType$outboundSchema;
}

/** @internal */
export const Source$inboundSchema: z.ZodType<Source, z.ZodTypeDef, unknown> = z.union([
    z.string(),
    z.array(z.string()),
]);

/** @internal */
export type Source$Outbound = string | Array<string>;

/** @internal */
export const Source$outboundSchema: z.ZodType<Source$Outbound, z.ZodTypeDef, Source> = z.union([
    z.string(),
    z.array(z.string()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Source$ {
    /** @deprecated use `Source$inboundSchema` instead. */
    export const inboundSchema = Source$inboundSchema;
    /** @deprecated use `Source$outboundSchema` instead. */
    export const outboundSchema = Source$outboundSchema;
    /** @deprecated use `Source$Outbound` instead. */
    export type Outbound = Source$Outbound;
}

/** @internal */
export const Dataset$inboundSchema: z.ZodNativeEnum<typeof Dataset> = z.nativeEnum(Dataset);

/** @internal */
export const Dataset$outboundSchema: z.ZodNativeEnum<typeof Dataset> = Dataset$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Dataset$ {
    /** @deprecated use `Dataset$inboundSchema` instead. */
    export const inboundSchema = Dataset$inboundSchema;
    /** @deprecated use `Dataset$outboundSchema` instead. */
    export const outboundSchema = Dataset$outboundSchema;
}

/** @internal */
export const IngestionBackfillContractDto$inboundSchema: z.ZodType<
    IngestionBackfillContractDto,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        datestamp_start: z.string(),
        datestamp_end: z.string(),
        type: IngestionBackfillContractDtoType$inboundSchema,
        source: z.nullable(z.union([z.string(), z.array(z.string())])).optional(),
        dataset: Dataset$inboundSchema,
    })
    .transform((v) => {
        return remap$(v, {
            datestamp_start: "datestampStart",
            datestamp_end: "datestampEnd",
        });
    });

/** @internal */
export type IngestionBackfillContractDto$Outbound = {
    datestamp_start: string;
    datestamp_end: string;
    type: string;
    source?: string | Array<string> | null | undefined;
    dataset: string;
};

/** @internal */
export const IngestionBackfillContractDto$outboundSchema: z.ZodType<
    IngestionBackfillContractDto$Outbound,
    z.ZodTypeDef,
    IngestionBackfillContractDto
> = z
    .object({
        datestampStart: z.string(),
        datestampEnd: z.string(),
        type: IngestionBackfillContractDtoType$outboundSchema,
        source: z.nullable(z.union([z.string(), z.array(z.string())])).optional(),
        dataset: Dataset$outboundSchema,
    })
    .transform((v) => {
        return remap$(v, {
            datestampStart: "datestamp_start",
            datestampEnd: "datestamp_end",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IngestionBackfillContractDto$ {
    /** @deprecated use `IngestionBackfillContractDto$inboundSchema` instead. */
    export const inboundSchema = IngestionBackfillContractDto$inboundSchema;
    /** @deprecated use `IngestionBackfillContractDto$outboundSchema` instead. */
    export const outboundSchema = IngestionBackfillContractDto$outboundSchema;
    /** @deprecated use `IngestionBackfillContractDto$Outbound` instead. */
    export type Outbound = IngestionBackfillContractDto$Outbound;
}

/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

export const KeyUpdateContractDtoScopes = {
    OmniReadOnly: "omni_read_only",
    OmniReadWrite: "omni_read_write",
    ClientDownloadConfigSpecs: "client_download_config_specs",
    NoneHashEnabled: "none_hash_enabled",
    CanAccessKeys: "can_access_keys",
} as const;
export type KeyUpdateContractDtoScopes = ClosedEnum<typeof KeyUpdateContractDtoScopes>;

export type KeyUpdateContractDto = {
    description?: string | undefined;
    scopes?: Array<KeyUpdateContractDtoScopes> | undefined;
    environments?: Array<string> | undefined;
    targetAppID?: any | null | undefined;
    secondaryTargetAppIDs?: Array<string> | null | undefined;
};

/** @internal */
export const KeyUpdateContractDtoScopes$inboundSchema: z.ZodNativeEnum<
    typeof KeyUpdateContractDtoScopes
> = z.nativeEnum(KeyUpdateContractDtoScopes);

/** @internal */
export const KeyUpdateContractDtoScopes$outboundSchema: z.ZodNativeEnum<
    typeof KeyUpdateContractDtoScopes
> = KeyUpdateContractDtoScopes$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace KeyUpdateContractDtoScopes$ {
    /** @deprecated use `KeyUpdateContractDtoScopes$inboundSchema` instead. */
    export const inboundSchema = KeyUpdateContractDtoScopes$inboundSchema;
    /** @deprecated use `KeyUpdateContractDtoScopes$outboundSchema` instead. */
    export const outboundSchema = KeyUpdateContractDtoScopes$outboundSchema;
}

/** @internal */
export const KeyUpdateContractDto$inboundSchema: z.ZodType<
    KeyUpdateContractDto,
    z.ZodTypeDef,
    unknown
> = z.object({
    description: z.string().optional(),
    scopes: z.array(KeyUpdateContractDtoScopes$inboundSchema).optional(),
    environments: z.array(z.string()).optional(),
    targetAppID: z.nullable(z.any()).optional(),
    secondaryTargetAppIDs: z.nullable(z.array(z.string())).optional(),
});

/** @internal */
export type KeyUpdateContractDto$Outbound = {
    description?: string | undefined;
    scopes?: Array<string> | undefined;
    environments?: Array<string> | undefined;
    targetAppID?: any | null | undefined;
    secondaryTargetAppIDs?: Array<string> | null | undefined;
};

/** @internal */
export const KeyUpdateContractDto$outboundSchema: z.ZodType<
    KeyUpdateContractDto$Outbound,
    z.ZodTypeDef,
    KeyUpdateContractDto
> = z.object({
    description: z.string().optional(),
    scopes: z.array(KeyUpdateContractDtoScopes$outboundSchema).optional(),
    environments: z.array(z.string()).optional(),
    targetAppID: z.nullable(z.any()).optional(),
    secondaryTargetAppIDs: z.nullable(z.array(z.string())).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace KeyUpdateContractDto$ {
    /** @deprecated use `KeyUpdateContractDto$inboundSchema` instead. */
    export const inboundSchema = KeyUpdateContractDto$inboundSchema;
    /** @deprecated use `KeyUpdateContractDto$outboundSchema` instead. */
    export const outboundSchema = KeyUpdateContractDto$outboundSchema;
    /** @deprecated use `KeyUpdateContractDto$Outbound` instead. */
    export type Outbound = KeyUpdateContractDto$Outbound;
}

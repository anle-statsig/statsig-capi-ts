/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";

export type TagUpdateDto = {
    name?: string | undefined;
    description?: string | undefined;
    isCore?: boolean | undefined;
};

/** @internal */
export const TagUpdateDto$inboundSchema: z.ZodType<TagUpdateDto, z.ZodTypeDef, unknown> = z.object({
    name: z.string().optional(),
    description: z.string().optional(),
    isCore: z.boolean().default(false),
});

/** @internal */
export type TagUpdateDto$Outbound = {
    name?: string | undefined;
    description?: string | undefined;
    isCore: boolean;
};

/** @internal */
export const TagUpdateDto$outboundSchema: z.ZodType<
    TagUpdateDto$Outbound,
    z.ZodTypeDef,
    TagUpdateDto
> = z.object({
    name: z.string().optional(),
    description: z.string().optional(),
    isCore: z.boolean().default(false),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TagUpdateDto$ {
    /** @deprecated use `TagUpdateDto$inboundSchema` instead. */
    export const inboundSchema = TagUpdateDto$inboundSchema;
    /** @deprecated use `TagUpdateDto$outboundSchema` instead. */
    export const outboundSchema = TagUpdateDto$outboundSchema;
    /** @deprecated use `TagUpdateDto$Outbound` instead. */
    export type Outbound = TagUpdateDto$Outbound;
}

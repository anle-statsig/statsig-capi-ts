/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";

export type AssignmentSourceQueryUpdateDtoIdTypeMapping = {
    /**
     * ID for the Statsig unit.
     */
    statsigUnitID: string;
    /**
     * Column name associated with the ID type mapping.
     */
    column: string;
};

export type AssignmentSourceQueryUpdateDto = {
    /**
     * Optional new name for the assignment source.
     */
    name?: string | undefined;
    /**
     * Optional updated context for the assignment source.
     */
    description?: string | undefined;
    /**
     * Marks the assignment source as verified for internal trustworthiness.
     */
    isVerified?: boolean | undefined;
    /**
     * Optional updated tags for categorization.
     */
    tags?: Array<string> | undefined;
    /**
     * SQL query defining the data source for assignments.
     */
    sql: string;
    /**
     * Column name representing the timestamp of assignments.
     */
    timestampColumn: string;
    /**
     * Column name for the experiment ID associated with the assignments.
     */
    experimentIDColumn: string;
    /**
     * Column name for the group ID linked to the assignments.
     */
    groupIDColumn: string;
    /**
     * Mappings of Statsig units to their respective columns.
     */
    idTypeMapping: Array<AssignmentSourceQueryUpdateDtoIdTypeMapping>;
};

/** @internal */
export const AssignmentSourceQueryUpdateDtoIdTypeMapping$inboundSchema: z.ZodType<
    AssignmentSourceQueryUpdateDtoIdTypeMapping,
    z.ZodTypeDef,
    unknown
> = z.object({
    statsigUnitID: z.string(),
    column: z.string(),
});

/** @internal */
export type AssignmentSourceQueryUpdateDtoIdTypeMapping$Outbound = {
    statsigUnitID: string;
    column: string;
};

/** @internal */
export const AssignmentSourceQueryUpdateDtoIdTypeMapping$outboundSchema: z.ZodType<
    AssignmentSourceQueryUpdateDtoIdTypeMapping$Outbound,
    z.ZodTypeDef,
    AssignmentSourceQueryUpdateDtoIdTypeMapping
> = z.object({
    statsigUnitID: z.string(),
    column: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AssignmentSourceQueryUpdateDtoIdTypeMapping$ {
    /** @deprecated use `AssignmentSourceQueryUpdateDtoIdTypeMapping$inboundSchema` instead. */
    export const inboundSchema = AssignmentSourceQueryUpdateDtoIdTypeMapping$inboundSchema;
    /** @deprecated use `AssignmentSourceQueryUpdateDtoIdTypeMapping$outboundSchema` instead. */
    export const outboundSchema = AssignmentSourceQueryUpdateDtoIdTypeMapping$outboundSchema;
    /** @deprecated use `AssignmentSourceQueryUpdateDtoIdTypeMapping$Outbound` instead. */
    export type Outbound = AssignmentSourceQueryUpdateDtoIdTypeMapping$Outbound;
}

/** @internal */
export const AssignmentSourceQueryUpdateDto$inboundSchema: z.ZodType<
    AssignmentSourceQueryUpdateDto,
    z.ZodTypeDef,
    unknown
> = z.object({
    name: z.string().optional(),
    description: z.string().optional(),
    isVerified: z.boolean().optional(),
    tags: z.array(z.string()).optional(),
    sql: z.string(),
    timestampColumn: z.string(),
    experimentIDColumn: z.string(),
    groupIDColumn: z.string(),
    idTypeMapping: z.array(z.lazy(() => AssignmentSourceQueryUpdateDtoIdTypeMapping$inboundSchema)),
});

/** @internal */
export type AssignmentSourceQueryUpdateDto$Outbound = {
    name?: string | undefined;
    description?: string | undefined;
    isVerified?: boolean | undefined;
    tags?: Array<string> | undefined;
    sql: string;
    timestampColumn: string;
    experimentIDColumn: string;
    groupIDColumn: string;
    idTypeMapping: Array<AssignmentSourceQueryUpdateDtoIdTypeMapping$Outbound>;
};

/** @internal */
export const AssignmentSourceQueryUpdateDto$outboundSchema: z.ZodType<
    AssignmentSourceQueryUpdateDto$Outbound,
    z.ZodTypeDef,
    AssignmentSourceQueryUpdateDto
> = z.object({
    name: z.string().optional(),
    description: z.string().optional(),
    isVerified: z.boolean().optional(),
    tags: z.array(z.string()).optional(),
    sql: z.string(),
    timestampColumn: z.string(),
    experimentIDColumn: z.string(),
    groupIDColumn: z.string(),
    idTypeMapping: z.array(
        z.lazy(() => AssignmentSourceQueryUpdateDtoIdTypeMapping$outboundSchema)
    ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AssignmentSourceQueryUpdateDto$ {
    /** @deprecated use `AssignmentSourceQueryUpdateDto$inboundSchema` instead. */
    export const inboundSchema = AssignmentSourceQueryUpdateDto$inboundSchema;
    /** @deprecated use `AssignmentSourceQueryUpdateDto$outboundSchema` instead. */
    export const outboundSchema = AssignmentSourceQueryUpdateDto$outboundSchema;
    /** @deprecated use `AssignmentSourceQueryUpdateDto$Outbound` instead. */
    export type Outbound = AssignmentSourceQueryUpdateDto$Outbound;
}

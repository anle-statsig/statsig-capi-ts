/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";

export type LoggedEventDto = {
    /**
     * The timestamp when the event occurred, represented as a string.
     */
    timestamp: string;
    /**
     * The name of the event (e.g., "add_to_cart").
     */
    name: string;
    /**
     * The source of the event, indicating where it was triggered from.
     */
    source: string;
    /**
     * The value associated with the event, providing additional context.
     */
    value: string;
    /**
     * The ID of the user who triggered the event.
     */
    userID: string;
};

/** @internal */
export const LoggedEventDto$inboundSchema: z.ZodType<LoggedEventDto, z.ZodTypeDef, unknown> =
    z.object({
        timestamp: z.string(),
        name: z.string(),
        source: z.string(),
        value: z.string(),
        userID: z.string(),
    });

/** @internal */
export type LoggedEventDto$Outbound = {
    timestamp: string;
    name: string;
    source: string;
    value: string;
    userID: string;
};

/** @internal */
export const LoggedEventDto$outboundSchema: z.ZodType<
    LoggedEventDto$Outbound,
    z.ZodTypeDef,
    LoggedEventDto
> = z.object({
    timestamp: z.string(),
    name: z.string(),
    source: z.string(),
    value: z.string(),
    userID: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LoggedEventDto$ {
    /** @deprecated use `LoggedEventDto$inboundSchema` instead. */
    export const inboundSchema = LoggedEventDto$inboundSchema;
    /** @deprecated use `LoggedEventDto$outboundSchema` instead. */
    export const outboundSchema = LoggedEventDto$outboundSchema;
    /** @deprecated use `LoggedEventDto$Outbound` instead. */
    export type Outbound = LoggedEventDto$Outbound;
}

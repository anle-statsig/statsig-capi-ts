/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as z from "zod";

export type MultipleEventDeltaDtoEvents = {
    source: string;
    event: string;
    internalCount: number;
    externalCount: number;
    hasDiff: boolean;
    threshold: number;
    lastUpdatedTime: Date;
};

export type MultipleEventDeltaDto = {
    date: string;
    events: Array<MultipleEventDeltaDtoEvents>;
};

/** @internal */
export const MultipleEventDeltaDtoEvents$inboundSchema: z.ZodType<
    MultipleEventDeltaDtoEvents,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        source: z.string(),
        event: z.string(),
        internal_count: z.number(),
        external_count: z.number(),
        has_diff: z.boolean(),
        threshold: z.number(),
        last_updated_time: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
    })
    .transform((v) => {
        return remap$(v, {
            internal_count: "internalCount",
            external_count: "externalCount",
            has_diff: "hasDiff",
            last_updated_time: "lastUpdatedTime",
        });
    });

/** @internal */
export type MultipleEventDeltaDtoEvents$Outbound = {
    source: string;
    event: string;
    internal_count: number;
    external_count: number;
    has_diff: boolean;
    threshold: number;
    last_updated_time: string;
};

/** @internal */
export const MultipleEventDeltaDtoEvents$outboundSchema: z.ZodType<
    MultipleEventDeltaDtoEvents$Outbound,
    z.ZodTypeDef,
    MultipleEventDeltaDtoEvents
> = z
    .object({
        source: z.string(),
        event: z.string(),
        internalCount: z.number(),
        externalCount: z.number(),
        hasDiff: z.boolean(),
        threshold: z.number(),
        lastUpdatedTime: z.date().transform((v) => v.toISOString()),
    })
    .transform((v) => {
        return remap$(v, {
            internalCount: "internal_count",
            externalCount: "external_count",
            hasDiff: "has_diff",
            lastUpdatedTime: "last_updated_time",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MultipleEventDeltaDtoEvents$ {
    /** @deprecated use `MultipleEventDeltaDtoEvents$inboundSchema` instead. */
    export const inboundSchema = MultipleEventDeltaDtoEvents$inboundSchema;
    /** @deprecated use `MultipleEventDeltaDtoEvents$outboundSchema` instead. */
    export const outboundSchema = MultipleEventDeltaDtoEvents$outboundSchema;
    /** @deprecated use `MultipleEventDeltaDtoEvents$Outbound` instead. */
    export type Outbound = MultipleEventDeltaDtoEvents$Outbound;
}

/** @internal */
export const MultipleEventDeltaDto$inboundSchema: z.ZodType<
    MultipleEventDeltaDto,
    z.ZodTypeDef,
    unknown
> = z.object({
    date: z.string(),
    events: z.array(z.lazy(() => MultipleEventDeltaDtoEvents$inboundSchema)),
});

/** @internal */
export type MultipleEventDeltaDto$Outbound = {
    date: string;
    events: Array<MultipleEventDeltaDtoEvents$Outbound>;
};

/** @internal */
export const MultipleEventDeltaDto$outboundSchema: z.ZodType<
    MultipleEventDeltaDto$Outbound,
    z.ZodTypeDef,
    MultipleEventDeltaDto
> = z.object({
    date: z.string(),
    events: z.array(z.lazy(() => MultipleEventDeltaDtoEvents$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MultipleEventDeltaDto$ {
    /** @deprecated use `MultipleEventDeltaDto$inboundSchema` instead. */
    export const inboundSchema = MultipleEventDeltaDto$inboundSchema;
    /** @deprecated use `MultipleEventDeltaDto$outboundSchema` instead. */
    export const outboundSchema = MultipleEventDeltaDto$outboundSchema;
    /** @deprecated use `MultipleEventDeltaDto$Outbound` instead. */
    export type Outbound = MultipleEventDeltaDto$Outbound;
}

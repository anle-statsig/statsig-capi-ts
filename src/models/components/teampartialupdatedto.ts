/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

export type TeamPartialUpdateDtoDefaultGateMetrics = {
    /**
     * The name of the metric.
     */
    name: string;
    /**
     * The type of the metric.
     */
    type: string;
};

export type TeamPartialUpdateDtoDefaultExperimentPrimaryMetrics = {
    /**
     * The name of the metric.
     */
    name: string;
    /**
     * The type of the metric.
     */
    type: string;
};

export type TeamPartialUpdateDtoDefaultExperimentSecondaryMetrics = {
    /**
     * The name of the metric.
     */
    name: string;
    /**
     * The type of the metric.
     */
    type: string;
};

export type TeamPartialUpdateDtoDefaultHoldoutMetrics = {
    /**
     * The name of the metric.
     */
    name: string;
    /**
     * The type of the metric.
     */
    type: string;
};

/**
 * Who can change team configurations: "anyone" or "team_only".
 */
export const TeamPartialUpdateDtoChangeTeamConfigs = {
    Anyone: "anyone",
    TeamOnly: "team_only",
} as const;
/**
 * Who can change team configurations: "anyone" or "team_only".
 */
export type TeamPartialUpdateDtoChangeTeamConfigs = ClosedEnum<
    typeof TeamPartialUpdateDtoChangeTeamConfigs
>;

/**
 * Who can review and approve changes: "anyone", "team_only", or "admin_only".
 */
export const TeamPartialUpdateDtoReviewApproval = {
    Anyone: "anyone",
    TeamOnly: "team_only",
    AdminOnly: "admin_only",
} as const;
/**
 * Who can review and approve changes: "anyone", "team_only", or "admin_only".
 */
export type TeamPartialUpdateDtoReviewApproval = ClosedEnum<
    typeof TeamPartialUpdateDtoReviewApproval
>;

export type TeamPartialUpdateDto = {
    /**
     * The name of the team.
     */
    name?: string | undefined;
    /**
     * Array of member email addresses in the team.
     */
    members?: Array<string> | undefined;
    /**
     * Array of admin email addresses in the team.
     */
    admins?: Array<string> | undefined;
    /**
     * Default gate metrics for the team.
     */
    defaultGateMetrics?: Array<TeamPartialUpdateDtoDefaultGateMetrics> | undefined;
    /**
     * Default primary metrics for experiments in the team.
     */
    defaultExperimentPrimaryMetrics?:
        | Array<TeamPartialUpdateDtoDefaultExperimentPrimaryMetrics>
        | undefined;
    /**
     * Default secondary metrics for experiments in the team.
     */
    defaultExperimentSecondaryMetrics?:
        | Array<TeamPartialUpdateDtoDefaultExperimentSecondaryMetrics>
        | undefined;
    /**
     * Default holdout metrics for the team.
     */
    defaultHoldoutMetrics?: Array<TeamPartialUpdateDtoDefaultHoldoutMetrics> | undefined;
    /**
     * Who can change team configurations: "anyone" or "team_only".
     */
    changeTeamConfigs?: TeamPartialUpdateDtoChangeTeamConfigs | undefined;
    /**
     * Who can review and approve changes: "anyone", "team_only", or "admin_only".
     */
    reviewApproval?: TeamPartialUpdateDtoReviewApproval | undefined;
    /**
     * Default target applications for the team.
     */
    defaultTargetApplications?: Array<string> | undefined;
    /**
     * Default holdout ID for the team, if applicable.
     */
    defaultHoldoutID?: any | null | undefined;
    /**
     * Whether reviews are required for changes, if applicable.
     */
    requireReviews?: any | null | undefined;
    /**
     * Whether gate templates are required for the team, if applicable.
     */
    requireGateTemplates?: any | null | undefined;
    /**
     * Whether experiment templates are required for the team, if applicable.
     */
    requireExperimentTemplates?: any | null | undefined;
};

/** @internal */
export const TeamPartialUpdateDtoDefaultGateMetrics$inboundSchema: z.ZodType<
    TeamPartialUpdateDtoDefaultGateMetrics,
    z.ZodTypeDef,
    unknown
> = z.object({
    name: z.string(),
    type: z.string(),
});

/** @internal */
export type TeamPartialUpdateDtoDefaultGateMetrics$Outbound = {
    name: string;
    type: string;
};

/** @internal */
export const TeamPartialUpdateDtoDefaultGateMetrics$outboundSchema: z.ZodType<
    TeamPartialUpdateDtoDefaultGateMetrics$Outbound,
    z.ZodTypeDef,
    TeamPartialUpdateDtoDefaultGateMetrics
> = z.object({
    name: z.string(),
    type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TeamPartialUpdateDtoDefaultGateMetrics$ {
    /** @deprecated use `TeamPartialUpdateDtoDefaultGateMetrics$inboundSchema` instead. */
    export const inboundSchema = TeamPartialUpdateDtoDefaultGateMetrics$inboundSchema;
    /** @deprecated use `TeamPartialUpdateDtoDefaultGateMetrics$outboundSchema` instead. */
    export const outboundSchema = TeamPartialUpdateDtoDefaultGateMetrics$outboundSchema;
    /** @deprecated use `TeamPartialUpdateDtoDefaultGateMetrics$Outbound` instead. */
    export type Outbound = TeamPartialUpdateDtoDefaultGateMetrics$Outbound;
}

/** @internal */
export const TeamPartialUpdateDtoDefaultExperimentPrimaryMetrics$inboundSchema: z.ZodType<
    TeamPartialUpdateDtoDefaultExperimentPrimaryMetrics,
    z.ZodTypeDef,
    unknown
> = z.object({
    name: z.string(),
    type: z.string(),
});

/** @internal */
export type TeamPartialUpdateDtoDefaultExperimentPrimaryMetrics$Outbound = {
    name: string;
    type: string;
};

/** @internal */
export const TeamPartialUpdateDtoDefaultExperimentPrimaryMetrics$outboundSchema: z.ZodType<
    TeamPartialUpdateDtoDefaultExperimentPrimaryMetrics$Outbound,
    z.ZodTypeDef,
    TeamPartialUpdateDtoDefaultExperimentPrimaryMetrics
> = z.object({
    name: z.string(),
    type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TeamPartialUpdateDtoDefaultExperimentPrimaryMetrics$ {
    /** @deprecated use `TeamPartialUpdateDtoDefaultExperimentPrimaryMetrics$inboundSchema` instead. */
    export const inboundSchema = TeamPartialUpdateDtoDefaultExperimentPrimaryMetrics$inboundSchema;
    /** @deprecated use `TeamPartialUpdateDtoDefaultExperimentPrimaryMetrics$outboundSchema` instead. */
    export const outboundSchema =
        TeamPartialUpdateDtoDefaultExperimentPrimaryMetrics$outboundSchema;
    /** @deprecated use `TeamPartialUpdateDtoDefaultExperimentPrimaryMetrics$Outbound` instead. */
    export type Outbound = TeamPartialUpdateDtoDefaultExperimentPrimaryMetrics$Outbound;
}

/** @internal */
export const TeamPartialUpdateDtoDefaultExperimentSecondaryMetrics$inboundSchema: z.ZodType<
    TeamPartialUpdateDtoDefaultExperimentSecondaryMetrics,
    z.ZodTypeDef,
    unknown
> = z.object({
    name: z.string(),
    type: z.string(),
});

/** @internal */
export type TeamPartialUpdateDtoDefaultExperimentSecondaryMetrics$Outbound = {
    name: string;
    type: string;
};

/** @internal */
export const TeamPartialUpdateDtoDefaultExperimentSecondaryMetrics$outboundSchema: z.ZodType<
    TeamPartialUpdateDtoDefaultExperimentSecondaryMetrics$Outbound,
    z.ZodTypeDef,
    TeamPartialUpdateDtoDefaultExperimentSecondaryMetrics
> = z.object({
    name: z.string(),
    type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TeamPartialUpdateDtoDefaultExperimentSecondaryMetrics$ {
    /** @deprecated use `TeamPartialUpdateDtoDefaultExperimentSecondaryMetrics$inboundSchema` instead. */
    export const inboundSchema =
        TeamPartialUpdateDtoDefaultExperimentSecondaryMetrics$inboundSchema;
    /** @deprecated use `TeamPartialUpdateDtoDefaultExperimentSecondaryMetrics$outboundSchema` instead. */
    export const outboundSchema =
        TeamPartialUpdateDtoDefaultExperimentSecondaryMetrics$outboundSchema;
    /** @deprecated use `TeamPartialUpdateDtoDefaultExperimentSecondaryMetrics$Outbound` instead. */
    export type Outbound = TeamPartialUpdateDtoDefaultExperimentSecondaryMetrics$Outbound;
}

/** @internal */
export const TeamPartialUpdateDtoDefaultHoldoutMetrics$inboundSchema: z.ZodType<
    TeamPartialUpdateDtoDefaultHoldoutMetrics,
    z.ZodTypeDef,
    unknown
> = z.object({
    name: z.string(),
    type: z.string(),
});

/** @internal */
export type TeamPartialUpdateDtoDefaultHoldoutMetrics$Outbound = {
    name: string;
    type: string;
};

/** @internal */
export const TeamPartialUpdateDtoDefaultHoldoutMetrics$outboundSchema: z.ZodType<
    TeamPartialUpdateDtoDefaultHoldoutMetrics$Outbound,
    z.ZodTypeDef,
    TeamPartialUpdateDtoDefaultHoldoutMetrics
> = z.object({
    name: z.string(),
    type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TeamPartialUpdateDtoDefaultHoldoutMetrics$ {
    /** @deprecated use `TeamPartialUpdateDtoDefaultHoldoutMetrics$inboundSchema` instead. */
    export const inboundSchema = TeamPartialUpdateDtoDefaultHoldoutMetrics$inboundSchema;
    /** @deprecated use `TeamPartialUpdateDtoDefaultHoldoutMetrics$outboundSchema` instead. */
    export const outboundSchema = TeamPartialUpdateDtoDefaultHoldoutMetrics$outboundSchema;
    /** @deprecated use `TeamPartialUpdateDtoDefaultHoldoutMetrics$Outbound` instead. */
    export type Outbound = TeamPartialUpdateDtoDefaultHoldoutMetrics$Outbound;
}

/** @internal */
export const TeamPartialUpdateDtoChangeTeamConfigs$inboundSchema: z.ZodNativeEnum<
    typeof TeamPartialUpdateDtoChangeTeamConfigs
> = z.nativeEnum(TeamPartialUpdateDtoChangeTeamConfigs);

/** @internal */
export const TeamPartialUpdateDtoChangeTeamConfigs$outboundSchema: z.ZodNativeEnum<
    typeof TeamPartialUpdateDtoChangeTeamConfigs
> = TeamPartialUpdateDtoChangeTeamConfigs$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TeamPartialUpdateDtoChangeTeamConfigs$ {
    /** @deprecated use `TeamPartialUpdateDtoChangeTeamConfigs$inboundSchema` instead. */
    export const inboundSchema = TeamPartialUpdateDtoChangeTeamConfigs$inboundSchema;
    /** @deprecated use `TeamPartialUpdateDtoChangeTeamConfigs$outboundSchema` instead. */
    export const outboundSchema = TeamPartialUpdateDtoChangeTeamConfigs$outboundSchema;
}

/** @internal */
export const TeamPartialUpdateDtoReviewApproval$inboundSchema: z.ZodNativeEnum<
    typeof TeamPartialUpdateDtoReviewApproval
> = z.nativeEnum(TeamPartialUpdateDtoReviewApproval);

/** @internal */
export const TeamPartialUpdateDtoReviewApproval$outboundSchema: z.ZodNativeEnum<
    typeof TeamPartialUpdateDtoReviewApproval
> = TeamPartialUpdateDtoReviewApproval$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TeamPartialUpdateDtoReviewApproval$ {
    /** @deprecated use `TeamPartialUpdateDtoReviewApproval$inboundSchema` instead. */
    export const inboundSchema = TeamPartialUpdateDtoReviewApproval$inboundSchema;
    /** @deprecated use `TeamPartialUpdateDtoReviewApproval$outboundSchema` instead. */
    export const outboundSchema = TeamPartialUpdateDtoReviewApproval$outboundSchema;
}

/** @internal */
export const TeamPartialUpdateDto$inboundSchema: z.ZodType<
    TeamPartialUpdateDto,
    z.ZodTypeDef,
    unknown
> = z.object({
    name: z.string().optional(),
    members: z.array(z.string()).optional(),
    admins: z.array(z.string()).optional(),
    defaultGateMetrics: z
        .array(z.lazy(() => TeamPartialUpdateDtoDefaultGateMetrics$inboundSchema))
        .optional(),
    defaultExperimentPrimaryMetrics: z
        .array(z.lazy(() => TeamPartialUpdateDtoDefaultExperimentPrimaryMetrics$inboundSchema))
        .optional(),
    defaultExperimentSecondaryMetrics: z
        .array(z.lazy(() => TeamPartialUpdateDtoDefaultExperimentSecondaryMetrics$inboundSchema))
        .optional(),
    defaultHoldoutMetrics: z
        .array(z.lazy(() => TeamPartialUpdateDtoDefaultHoldoutMetrics$inboundSchema))
        .optional(),
    changeTeamConfigs: TeamPartialUpdateDtoChangeTeamConfigs$inboundSchema.optional(),
    reviewApproval: TeamPartialUpdateDtoReviewApproval$inboundSchema.optional(),
    defaultTargetApplications: z.array(z.string()).optional(),
    defaultHoldoutID: z.nullable(z.any()).optional(),
    requireReviews: z.nullable(z.any()).optional(),
    requireGateTemplates: z.nullable(z.any()).optional(),
    requireExperimentTemplates: z.nullable(z.any()).optional(),
});

/** @internal */
export type TeamPartialUpdateDto$Outbound = {
    name?: string | undefined;
    members?: Array<string> | undefined;
    admins?: Array<string> | undefined;
    defaultGateMetrics?: Array<TeamPartialUpdateDtoDefaultGateMetrics$Outbound> | undefined;
    defaultExperimentPrimaryMetrics?:
        | Array<TeamPartialUpdateDtoDefaultExperimentPrimaryMetrics$Outbound>
        | undefined;
    defaultExperimentSecondaryMetrics?:
        | Array<TeamPartialUpdateDtoDefaultExperimentSecondaryMetrics$Outbound>
        | undefined;
    defaultHoldoutMetrics?: Array<TeamPartialUpdateDtoDefaultHoldoutMetrics$Outbound> | undefined;
    changeTeamConfigs?: string | undefined;
    reviewApproval?: string | undefined;
    defaultTargetApplications?: Array<string> | undefined;
    defaultHoldoutID?: any | null | undefined;
    requireReviews?: any | null | undefined;
    requireGateTemplates?: any | null | undefined;
    requireExperimentTemplates?: any | null | undefined;
};

/** @internal */
export const TeamPartialUpdateDto$outboundSchema: z.ZodType<
    TeamPartialUpdateDto$Outbound,
    z.ZodTypeDef,
    TeamPartialUpdateDto
> = z.object({
    name: z.string().optional(),
    members: z.array(z.string()).optional(),
    admins: z.array(z.string()).optional(),
    defaultGateMetrics: z
        .array(z.lazy(() => TeamPartialUpdateDtoDefaultGateMetrics$outboundSchema))
        .optional(),
    defaultExperimentPrimaryMetrics: z
        .array(z.lazy(() => TeamPartialUpdateDtoDefaultExperimentPrimaryMetrics$outboundSchema))
        .optional(),
    defaultExperimentSecondaryMetrics: z
        .array(z.lazy(() => TeamPartialUpdateDtoDefaultExperimentSecondaryMetrics$outboundSchema))
        .optional(),
    defaultHoldoutMetrics: z
        .array(z.lazy(() => TeamPartialUpdateDtoDefaultHoldoutMetrics$outboundSchema))
        .optional(),
    changeTeamConfigs: TeamPartialUpdateDtoChangeTeamConfigs$outboundSchema.optional(),
    reviewApproval: TeamPartialUpdateDtoReviewApproval$outboundSchema.optional(),
    defaultTargetApplications: z.array(z.string()).optional(),
    defaultHoldoutID: z.nullable(z.any()).optional(),
    requireReviews: z.nullable(z.any()).optional(),
    requireGateTemplates: z.nullable(z.any()).optional(),
    requireExperimentTemplates: z.nullable(z.any()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TeamPartialUpdateDto$ {
    /** @deprecated use `TeamPartialUpdateDto$inboundSchema` instead. */
    export const inboundSchema = TeamPartialUpdateDto$inboundSchema;
    /** @deprecated use `TeamPartialUpdateDto$outboundSchema` instead. */
    export const outboundSchema = TeamPartialUpdateDto$outboundSchema;
    /** @deprecated use `TeamPartialUpdateDto$Outbound` instead. */
    export type Outbound = TeamPartialUpdateDto$Outbound;
}

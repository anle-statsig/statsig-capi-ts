/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";

export type HoldoutFullUpdateContractDto = {
    /**
     * enable or disable the holdout
     */
    isEnabled: boolean;
    /**
     * brief summary of what the holdout is being used for
     */
    description: string;
    /**
     * percentage of users between 0-10% to pass through the holdout
     */
    passPercentage: number;
    /**
     * an array of gateIDs which this holdout is applied to
     */
    gateIDs: Array<string>;
    /**
     * an array of experimentIDs which this holdout is applied to
     */
    experimentIDs: Array<string>;
    /**
     * an array of layerIDs which this holdout is applied to
     */
    layerIDs: Array<string>;
    /**
     * whether the holdout is being applied to all new gates
     */
    isGlobal: boolean;
    /**
     * the gateID that the holdout is targeting
     */
    targetingGateID?: any | null | undefined;
};

/** @internal */
export const HoldoutFullUpdateContractDto$inboundSchema: z.ZodType<
    HoldoutFullUpdateContractDto,
    z.ZodTypeDef,
    unknown
> = z.object({
    isEnabled: z.boolean(),
    description: z.string(),
    passPercentage: z.number(),
    gateIDs: z.array(z.string()),
    experimentIDs: z.array(z.string()),
    layerIDs: z.array(z.string()),
    isGlobal: z.boolean(),
    targetingGateID: z.nullable(z.any()).optional(),
});

/** @internal */
export type HoldoutFullUpdateContractDto$Outbound = {
    isEnabled: boolean;
    description: string;
    passPercentage: number;
    gateIDs: Array<string>;
    experimentIDs: Array<string>;
    layerIDs: Array<string>;
    isGlobal: boolean;
    targetingGateID?: any | null | undefined;
};

/** @internal */
export const HoldoutFullUpdateContractDto$outboundSchema: z.ZodType<
    HoldoutFullUpdateContractDto$Outbound,
    z.ZodTypeDef,
    HoldoutFullUpdateContractDto
> = z.object({
    isEnabled: z.boolean(),
    description: z.string(),
    passPercentage: z.number(),
    gateIDs: z.array(z.string()),
    experimentIDs: z.array(z.string()),
    layerIDs: z.array(z.string()),
    isGlobal: z.boolean(),
    targetingGateID: z.nullable(z.any()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HoldoutFullUpdateContractDto$ {
    /** @deprecated use `HoldoutFullUpdateContractDto$inboundSchema` instead. */
    export const inboundSchema = HoldoutFullUpdateContractDto$inboundSchema;
    /** @deprecated use `HoldoutFullUpdateContractDto$outboundSchema` instead. */
    export const outboundSchema = HoldoutFullUpdateContractDto$outboundSchema;
    /** @deprecated use `HoldoutFullUpdateContractDto$Outbound` instead. */
    export type Outbound = HoldoutFullUpdateContractDto$Outbound;
}

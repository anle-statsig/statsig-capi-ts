/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";

export type IngestionCreateDatabricksConnectionContractDto = {
    token: string;
    host: string;
    path: string;
    deltaSharingCredentials?: string | undefined;
    verified?: boolean | undefined;
};

/** @internal */
export const IngestionCreateDatabricksConnectionContractDto$inboundSchema: z.ZodType<
    IngestionCreateDatabricksConnectionContractDto,
    z.ZodTypeDef,
    unknown
> = z.object({
    token: z.string(),
    host: z.string(),
    path: z.string(),
    deltaSharingCredentials: z.string().optional(),
    verified: z.boolean().optional(),
});

/** @internal */
export type IngestionCreateDatabricksConnectionContractDto$Outbound = {
    token: string;
    host: string;
    path: string;
    deltaSharingCredentials?: string | undefined;
    verified?: boolean | undefined;
};

/** @internal */
export const IngestionCreateDatabricksConnectionContractDto$outboundSchema: z.ZodType<
    IngestionCreateDatabricksConnectionContractDto$Outbound,
    z.ZodTypeDef,
    IngestionCreateDatabricksConnectionContractDto
> = z.object({
    token: z.string(),
    host: z.string(),
    path: z.string(),
    deltaSharingCredentials: z.string().optional(),
    verified: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IngestionCreateDatabricksConnectionContractDto$ {
    /** @deprecated use `IngestionCreateDatabricksConnectionContractDto$inboundSchema` instead. */
    export const inboundSchema = IngestionCreateDatabricksConnectionContractDto$inboundSchema;
    /** @deprecated use `IngestionCreateDatabricksConnectionContractDto$outboundSchema` instead. */
    export const outboundSchema = IngestionCreateDatabricksConnectionContractDto$outboundSchema;
    /** @deprecated use `IngestionCreateDatabricksConnectionContractDto$Outbound` instead. */
    export type Outbound = IngestionCreateDatabricksConnectionContractDto$Outbound;
}

/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

export const IngestionUpdateContractDto3Dataset = {
    Exposures: "Exposures",
    ExportExposures: "export_exposures",
} as const;
export type IngestionUpdateContractDto3Dataset = ClosedEnum<
    typeof IngestionUpdateContractDto3Dataset
>;

export type IngestionUpdateContractDto3ColumnMapping = {
    /**
     * Unique identifier for the experiment.
     */
    experiment: string;
    /**
     * Unique identifier for the experiment groups.
     */
    groupId: string;
    /**
     * The unique user identifier this exposure is for. This might not necessarily be a single column for userID - it could be spread across multiple columns for deviceID etc.
     */
    unitId?: string | undefined;
    /**
     * Unix timestamp in seconds of the event (ex. 1723146199)
     */
    timestamp: string;
    ids: { [k: string]: string };
    metadata?: { [k: string]: string } | undefined;
    metadataObject?: string | undefined;
    eventValue?: string | undefined;
};

export const IngestionUpdateContractDto3Type = {
    Redshift: "redshift",
    BigqueryV2: "bigquery-v2",
    SnowflakeV2: "snowflake-v2",
    Databricks: "databricks",
    AzureSynapse: "azure-synapse",
    S3: "s3",
    Athena: "athena",
    Adls: "adls",
} as const;
export type IngestionUpdateContractDto3Type = ClosedEnum<typeof IngestionUpdateContractDto3Type>;

export type IngestionUpdateContractDto3 = {
    dataset: IngestionUpdateContractDto3Dataset;
    columnMapping?: IngestionUpdateContractDto3ColumnMapping | undefined;
    type: IngestionUpdateContractDto3Type;
    sourceName?: string | undefined;
    query?: string | undefined;
    share?: string | undefined;
    schema?: string | undefined;
    table?: string | undefined;
    enabled?: boolean | undefined;
};

export const IngestionUpdateContractDto2Dataset = {
    Events: "Events",
} as const;
export type IngestionUpdateContractDto2Dataset = ClosedEnum<
    typeof IngestionUpdateContractDto2Dataset
>;

export type IngestionUpdateContractDto2ColumnMapping = {
    /**
     * The unique user identifier this event is for. This might not necessarily be a single column for userID - it could be spread across multiple columns for deviceID etc.
     */
    unitId?: string | undefined;
    /**
     * Name of the event. String under 128 characters, using ‘_’ for spaces.
     */
    eventName: string;
    /**
     * Unix timestamp in seconds of the event (ex. 1723146199)
     */
    timestamp: string;
    ids: { [k: string]: string };
    metadata?: { [k: string]: string } | undefined;
    metadataObject?: string | undefined;
    eventValue?: string | undefined;
};

export const IngestionUpdateContractDto2Type = {
    Redshift: "redshift",
    BigqueryV2: "bigquery-v2",
    SnowflakeV2: "snowflake-v2",
    Databricks: "databricks",
    AzureSynapse: "azure-synapse",
    S3: "s3",
    Athena: "athena",
    Adls: "adls",
} as const;
export type IngestionUpdateContractDto2Type = ClosedEnum<typeof IngestionUpdateContractDto2Type>;

export type IngestionUpdateContractDto2 = {
    dataset: IngestionUpdateContractDto2Dataset;
    columnMapping?: IngestionUpdateContractDto2ColumnMapping | undefined;
    type: IngestionUpdateContractDto2Type;
    sourceName?: string | undefined;
    query?: string | undefined;
    share?: string | undefined;
    schema?: string | undefined;
    table?: string | undefined;
    enabled?: boolean | undefined;
};

export const IngestionUpdateContractDtoDataset = {
    Metrics: "Metrics",
} as const;
export type IngestionUpdateContractDtoDataset = ClosedEnum<
    typeof IngestionUpdateContractDtoDataset
>;

export type IngestionUpdateContractDtoColumnMapping = {
    /**
     * The unique user identifier this metric is for. This might not necessarily be a user_id - it could be a custom_id of some kind. Make sure this is in the same format as your logged unit_ids.
     */
    unitId: string;
    /**
     * The id_type the unit_id represents. Must be valid id_type. Default Statsig types are user_id/stable_id, but you may have generated custom id_types. Make sure this matches (case sensitive) a customID in your project, or you won’t get experiment results.
     */
    idType: string;
    /**
     * Date of the daily metric, ISO formatted (ex. 2024-08-08). We’ll load custom metrics to whatever date you use here.
     */
    dateid: string;
    /**
     * String format. Not null. Length < 128 characters.
     */
    metricName: string;
    /**
     * Numeric value for the metric. This OR both of numerator and denominator need to be provided.
     */
    metricValue?: string | undefined;
    /**
     * Required for ratio metrics. If present along with a denominator in any record, the metric will be treated as ratio and only calculated for users with non-null denominators
     */
    numerator?: string | undefined;
    /**
     * Required for ratio metrics. If present along with a numerator in any record, the metric will be treated as ratio and only calculated for users with non-null numerators.
     */
    denominator?: string | undefined;
};

export const IngestionUpdateContractDtoType = {
    Redshift: "redshift",
    BigqueryV2: "bigquery-v2",
    SnowflakeV2: "snowflake-v2",
    Databricks: "databricks",
    AzureSynapse: "azure-synapse",
    S3: "s3",
    Athena: "athena",
    Adls: "adls",
} as const;
export type IngestionUpdateContractDtoType = ClosedEnum<typeof IngestionUpdateContractDtoType>;

export type IngestionUpdateContractDto1 = {
    dataset: IngestionUpdateContractDtoDataset;
    columnMapping?: IngestionUpdateContractDtoColumnMapping | undefined;
    type: IngestionUpdateContractDtoType;
    sourceName?: string | undefined;
    query?: string | undefined;
    share?: string | undefined;
    schema?: string | undefined;
    table?: string | undefined;
    enabled?: boolean | undefined;
};

export type IngestionUpdateContractDto =
    | IngestionUpdateContractDto1
    | IngestionUpdateContractDto2
    | IngestionUpdateContractDto3;

/** @internal */
export const IngestionUpdateContractDto3Dataset$inboundSchema: z.ZodNativeEnum<
    typeof IngestionUpdateContractDto3Dataset
> = z.nativeEnum(IngestionUpdateContractDto3Dataset);

/** @internal */
export const IngestionUpdateContractDto3Dataset$outboundSchema: z.ZodNativeEnum<
    typeof IngestionUpdateContractDto3Dataset
> = IngestionUpdateContractDto3Dataset$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IngestionUpdateContractDto3Dataset$ {
    /** @deprecated use `IngestionUpdateContractDto3Dataset$inboundSchema` instead. */
    export const inboundSchema = IngestionUpdateContractDto3Dataset$inboundSchema;
    /** @deprecated use `IngestionUpdateContractDto3Dataset$outboundSchema` instead. */
    export const outboundSchema = IngestionUpdateContractDto3Dataset$outboundSchema;
}

/** @internal */
export const IngestionUpdateContractDto3ColumnMapping$inboundSchema: z.ZodType<
    IngestionUpdateContractDto3ColumnMapping,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        experiment: z.string(),
        group_id: z.string(),
        unit_id: z.string().optional(),
        timestamp: z.string(),
        ids: z.record(z.string()),
        metadata: z.record(z.string()).optional(),
        metadata_object: z.string().default("null"),
        event_value: z.string().default(""),
    })
    .transform((v) => {
        return remap$(v, {
            group_id: "groupId",
            unit_id: "unitId",
            metadata_object: "metadataObject",
            event_value: "eventValue",
        });
    });

/** @internal */
export type IngestionUpdateContractDto3ColumnMapping$Outbound = {
    experiment: string;
    group_id: string;
    unit_id?: string | undefined;
    timestamp: string;
    ids: { [k: string]: string };
    metadata?: { [k: string]: string } | undefined;
    metadata_object: string;
    event_value: string;
};

/** @internal */
export const IngestionUpdateContractDto3ColumnMapping$outboundSchema: z.ZodType<
    IngestionUpdateContractDto3ColumnMapping$Outbound,
    z.ZodTypeDef,
    IngestionUpdateContractDto3ColumnMapping
> = z
    .object({
        experiment: z.string(),
        groupId: z.string(),
        unitId: z.string().optional(),
        timestamp: z.string(),
        ids: z.record(z.string()),
        metadata: z.record(z.string()).optional(),
        metadataObject: z.string().default("null"),
        eventValue: z.string().default(""),
    })
    .transform((v) => {
        return remap$(v, {
            groupId: "group_id",
            unitId: "unit_id",
            metadataObject: "metadata_object",
            eventValue: "event_value",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IngestionUpdateContractDto3ColumnMapping$ {
    /** @deprecated use `IngestionUpdateContractDto3ColumnMapping$inboundSchema` instead. */
    export const inboundSchema = IngestionUpdateContractDto3ColumnMapping$inboundSchema;
    /** @deprecated use `IngestionUpdateContractDto3ColumnMapping$outboundSchema` instead. */
    export const outboundSchema = IngestionUpdateContractDto3ColumnMapping$outboundSchema;
    /** @deprecated use `IngestionUpdateContractDto3ColumnMapping$Outbound` instead. */
    export type Outbound = IngestionUpdateContractDto3ColumnMapping$Outbound;
}

/** @internal */
export const IngestionUpdateContractDto3Type$inboundSchema: z.ZodNativeEnum<
    typeof IngestionUpdateContractDto3Type
> = z.nativeEnum(IngestionUpdateContractDto3Type);

/** @internal */
export const IngestionUpdateContractDto3Type$outboundSchema: z.ZodNativeEnum<
    typeof IngestionUpdateContractDto3Type
> = IngestionUpdateContractDto3Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IngestionUpdateContractDto3Type$ {
    /** @deprecated use `IngestionUpdateContractDto3Type$inboundSchema` instead. */
    export const inboundSchema = IngestionUpdateContractDto3Type$inboundSchema;
    /** @deprecated use `IngestionUpdateContractDto3Type$outboundSchema` instead. */
    export const outboundSchema = IngestionUpdateContractDto3Type$outboundSchema;
}

/** @internal */
export const IngestionUpdateContractDto3$inboundSchema: z.ZodType<
    IngestionUpdateContractDto3,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        dataset: IngestionUpdateContractDto3Dataset$inboundSchema,
        column_mapping: z
            .lazy(() => IngestionUpdateContractDto3ColumnMapping$inboundSchema)
            .optional(),
        type: IngestionUpdateContractDto3Type$inboundSchema,
        source_name: z.string().optional(),
        query: z.string().optional(),
        share: z.string().optional(),
        schema: z.string().optional(),
        table: z.string().optional(),
        enabled: z.boolean().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            column_mapping: "columnMapping",
            source_name: "sourceName",
        });
    });

/** @internal */
export type IngestionUpdateContractDto3$Outbound = {
    dataset: string;
    column_mapping?: IngestionUpdateContractDto3ColumnMapping$Outbound | undefined;
    type: string;
    source_name?: string | undefined;
    query?: string | undefined;
    share?: string | undefined;
    schema?: string | undefined;
    table?: string | undefined;
    enabled?: boolean | undefined;
};

/** @internal */
export const IngestionUpdateContractDto3$outboundSchema: z.ZodType<
    IngestionUpdateContractDto3$Outbound,
    z.ZodTypeDef,
    IngestionUpdateContractDto3
> = z
    .object({
        dataset: IngestionUpdateContractDto3Dataset$outboundSchema,
        columnMapping: z
            .lazy(() => IngestionUpdateContractDto3ColumnMapping$outboundSchema)
            .optional(),
        type: IngestionUpdateContractDto3Type$outboundSchema,
        sourceName: z.string().optional(),
        query: z.string().optional(),
        share: z.string().optional(),
        schema: z.string().optional(),
        table: z.string().optional(),
        enabled: z.boolean().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            columnMapping: "column_mapping",
            sourceName: "source_name",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IngestionUpdateContractDto3$ {
    /** @deprecated use `IngestionUpdateContractDto3$inboundSchema` instead. */
    export const inboundSchema = IngestionUpdateContractDto3$inboundSchema;
    /** @deprecated use `IngestionUpdateContractDto3$outboundSchema` instead. */
    export const outboundSchema = IngestionUpdateContractDto3$outboundSchema;
    /** @deprecated use `IngestionUpdateContractDto3$Outbound` instead. */
    export type Outbound = IngestionUpdateContractDto3$Outbound;
}

/** @internal */
export const IngestionUpdateContractDto2Dataset$inboundSchema: z.ZodNativeEnum<
    typeof IngestionUpdateContractDto2Dataset
> = z.nativeEnum(IngestionUpdateContractDto2Dataset);

/** @internal */
export const IngestionUpdateContractDto2Dataset$outboundSchema: z.ZodNativeEnum<
    typeof IngestionUpdateContractDto2Dataset
> = IngestionUpdateContractDto2Dataset$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IngestionUpdateContractDto2Dataset$ {
    /** @deprecated use `IngestionUpdateContractDto2Dataset$inboundSchema` instead. */
    export const inboundSchema = IngestionUpdateContractDto2Dataset$inboundSchema;
    /** @deprecated use `IngestionUpdateContractDto2Dataset$outboundSchema` instead. */
    export const outboundSchema = IngestionUpdateContractDto2Dataset$outboundSchema;
}

/** @internal */
export const IngestionUpdateContractDto2ColumnMapping$inboundSchema: z.ZodType<
    IngestionUpdateContractDto2ColumnMapping,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        unit_id: z.string().optional(),
        event_name: z.string(),
        timestamp: z.string(),
        ids: z.record(z.string()),
        metadata: z.record(z.string()).optional(),
        metadata_object: z.string().default("null"),
        event_value: z.string().default(""),
    })
    .transform((v) => {
        return remap$(v, {
            unit_id: "unitId",
            event_name: "eventName",
            metadata_object: "metadataObject",
            event_value: "eventValue",
        });
    });

/** @internal */
export type IngestionUpdateContractDto2ColumnMapping$Outbound = {
    unit_id?: string | undefined;
    event_name: string;
    timestamp: string;
    ids: { [k: string]: string };
    metadata?: { [k: string]: string } | undefined;
    metadata_object: string;
    event_value: string;
};

/** @internal */
export const IngestionUpdateContractDto2ColumnMapping$outboundSchema: z.ZodType<
    IngestionUpdateContractDto2ColumnMapping$Outbound,
    z.ZodTypeDef,
    IngestionUpdateContractDto2ColumnMapping
> = z
    .object({
        unitId: z.string().optional(),
        eventName: z.string(),
        timestamp: z.string(),
        ids: z.record(z.string()),
        metadata: z.record(z.string()).optional(),
        metadataObject: z.string().default("null"),
        eventValue: z.string().default(""),
    })
    .transform((v) => {
        return remap$(v, {
            unitId: "unit_id",
            eventName: "event_name",
            metadataObject: "metadata_object",
            eventValue: "event_value",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IngestionUpdateContractDto2ColumnMapping$ {
    /** @deprecated use `IngestionUpdateContractDto2ColumnMapping$inboundSchema` instead. */
    export const inboundSchema = IngestionUpdateContractDto2ColumnMapping$inboundSchema;
    /** @deprecated use `IngestionUpdateContractDto2ColumnMapping$outboundSchema` instead. */
    export const outboundSchema = IngestionUpdateContractDto2ColumnMapping$outboundSchema;
    /** @deprecated use `IngestionUpdateContractDto2ColumnMapping$Outbound` instead. */
    export type Outbound = IngestionUpdateContractDto2ColumnMapping$Outbound;
}

/** @internal */
export const IngestionUpdateContractDto2Type$inboundSchema: z.ZodNativeEnum<
    typeof IngestionUpdateContractDto2Type
> = z.nativeEnum(IngestionUpdateContractDto2Type);

/** @internal */
export const IngestionUpdateContractDto2Type$outboundSchema: z.ZodNativeEnum<
    typeof IngestionUpdateContractDto2Type
> = IngestionUpdateContractDto2Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IngestionUpdateContractDto2Type$ {
    /** @deprecated use `IngestionUpdateContractDto2Type$inboundSchema` instead. */
    export const inboundSchema = IngestionUpdateContractDto2Type$inboundSchema;
    /** @deprecated use `IngestionUpdateContractDto2Type$outboundSchema` instead. */
    export const outboundSchema = IngestionUpdateContractDto2Type$outboundSchema;
}

/** @internal */
export const IngestionUpdateContractDto2$inboundSchema: z.ZodType<
    IngestionUpdateContractDto2,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        dataset: IngestionUpdateContractDto2Dataset$inboundSchema,
        column_mapping: z
            .lazy(() => IngestionUpdateContractDto2ColumnMapping$inboundSchema)
            .optional(),
        type: IngestionUpdateContractDto2Type$inboundSchema,
        source_name: z.string().optional(),
        query: z.string().optional(),
        share: z.string().optional(),
        schema: z.string().optional(),
        table: z.string().optional(),
        enabled: z.boolean().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            column_mapping: "columnMapping",
            source_name: "sourceName",
        });
    });

/** @internal */
export type IngestionUpdateContractDto2$Outbound = {
    dataset: string;
    column_mapping?: IngestionUpdateContractDto2ColumnMapping$Outbound | undefined;
    type: string;
    source_name?: string | undefined;
    query?: string | undefined;
    share?: string | undefined;
    schema?: string | undefined;
    table?: string | undefined;
    enabled?: boolean | undefined;
};

/** @internal */
export const IngestionUpdateContractDto2$outboundSchema: z.ZodType<
    IngestionUpdateContractDto2$Outbound,
    z.ZodTypeDef,
    IngestionUpdateContractDto2
> = z
    .object({
        dataset: IngestionUpdateContractDto2Dataset$outboundSchema,
        columnMapping: z
            .lazy(() => IngestionUpdateContractDto2ColumnMapping$outboundSchema)
            .optional(),
        type: IngestionUpdateContractDto2Type$outboundSchema,
        sourceName: z.string().optional(),
        query: z.string().optional(),
        share: z.string().optional(),
        schema: z.string().optional(),
        table: z.string().optional(),
        enabled: z.boolean().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            columnMapping: "column_mapping",
            sourceName: "source_name",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IngestionUpdateContractDto2$ {
    /** @deprecated use `IngestionUpdateContractDto2$inboundSchema` instead. */
    export const inboundSchema = IngestionUpdateContractDto2$inboundSchema;
    /** @deprecated use `IngestionUpdateContractDto2$outboundSchema` instead. */
    export const outboundSchema = IngestionUpdateContractDto2$outboundSchema;
    /** @deprecated use `IngestionUpdateContractDto2$Outbound` instead. */
    export type Outbound = IngestionUpdateContractDto2$Outbound;
}

/** @internal */
export const IngestionUpdateContractDtoDataset$inboundSchema: z.ZodNativeEnum<
    typeof IngestionUpdateContractDtoDataset
> = z.nativeEnum(IngestionUpdateContractDtoDataset);

/** @internal */
export const IngestionUpdateContractDtoDataset$outboundSchema: z.ZodNativeEnum<
    typeof IngestionUpdateContractDtoDataset
> = IngestionUpdateContractDtoDataset$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IngestionUpdateContractDtoDataset$ {
    /** @deprecated use `IngestionUpdateContractDtoDataset$inboundSchema` instead. */
    export const inboundSchema = IngestionUpdateContractDtoDataset$inboundSchema;
    /** @deprecated use `IngestionUpdateContractDtoDataset$outboundSchema` instead. */
    export const outboundSchema = IngestionUpdateContractDtoDataset$outboundSchema;
}

/** @internal */
export const IngestionUpdateContractDtoColumnMapping$inboundSchema: z.ZodType<
    IngestionUpdateContractDtoColumnMapping,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        unit_id: z.string(),
        id_type: z.string(),
        dateid: z.string(),
        metric_name: z.string(),
        metric_value: z.string().default("null"),
        numerator: z.string().default("null"),
        denominator: z.string().default("null"),
    })
    .transform((v) => {
        return remap$(v, {
            unit_id: "unitId",
            id_type: "idType",
            metric_name: "metricName",
            metric_value: "metricValue",
        });
    });

/** @internal */
export type IngestionUpdateContractDtoColumnMapping$Outbound = {
    unit_id: string;
    id_type: string;
    dateid: string;
    metric_name: string;
    metric_value: string;
    numerator: string;
    denominator: string;
};

/** @internal */
export const IngestionUpdateContractDtoColumnMapping$outboundSchema: z.ZodType<
    IngestionUpdateContractDtoColumnMapping$Outbound,
    z.ZodTypeDef,
    IngestionUpdateContractDtoColumnMapping
> = z
    .object({
        unitId: z.string(),
        idType: z.string(),
        dateid: z.string(),
        metricName: z.string(),
        metricValue: z.string().default("null"),
        numerator: z.string().default("null"),
        denominator: z.string().default("null"),
    })
    .transform((v) => {
        return remap$(v, {
            unitId: "unit_id",
            idType: "id_type",
            metricName: "metric_name",
            metricValue: "metric_value",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IngestionUpdateContractDtoColumnMapping$ {
    /** @deprecated use `IngestionUpdateContractDtoColumnMapping$inboundSchema` instead. */
    export const inboundSchema = IngestionUpdateContractDtoColumnMapping$inboundSchema;
    /** @deprecated use `IngestionUpdateContractDtoColumnMapping$outboundSchema` instead. */
    export const outboundSchema = IngestionUpdateContractDtoColumnMapping$outboundSchema;
    /** @deprecated use `IngestionUpdateContractDtoColumnMapping$Outbound` instead. */
    export type Outbound = IngestionUpdateContractDtoColumnMapping$Outbound;
}

/** @internal */
export const IngestionUpdateContractDtoType$inboundSchema: z.ZodNativeEnum<
    typeof IngestionUpdateContractDtoType
> = z.nativeEnum(IngestionUpdateContractDtoType);

/** @internal */
export const IngestionUpdateContractDtoType$outboundSchema: z.ZodNativeEnum<
    typeof IngestionUpdateContractDtoType
> = IngestionUpdateContractDtoType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IngestionUpdateContractDtoType$ {
    /** @deprecated use `IngestionUpdateContractDtoType$inboundSchema` instead. */
    export const inboundSchema = IngestionUpdateContractDtoType$inboundSchema;
    /** @deprecated use `IngestionUpdateContractDtoType$outboundSchema` instead. */
    export const outboundSchema = IngestionUpdateContractDtoType$outboundSchema;
}

/** @internal */
export const IngestionUpdateContractDto1$inboundSchema: z.ZodType<
    IngestionUpdateContractDto1,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        dataset: IngestionUpdateContractDtoDataset$inboundSchema,
        column_mapping: z
            .lazy(() => IngestionUpdateContractDtoColumnMapping$inboundSchema)
            .optional(),
        type: IngestionUpdateContractDtoType$inboundSchema,
        source_name: z.string().optional(),
        query: z.string().optional(),
        share: z.string().optional(),
        schema: z.string().optional(),
        table: z.string().optional(),
        enabled: z.boolean().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            column_mapping: "columnMapping",
            source_name: "sourceName",
        });
    });

/** @internal */
export type IngestionUpdateContractDto1$Outbound = {
    dataset: string;
    column_mapping?: IngestionUpdateContractDtoColumnMapping$Outbound | undefined;
    type: string;
    source_name?: string | undefined;
    query?: string | undefined;
    share?: string | undefined;
    schema?: string | undefined;
    table?: string | undefined;
    enabled?: boolean | undefined;
};

/** @internal */
export const IngestionUpdateContractDto1$outboundSchema: z.ZodType<
    IngestionUpdateContractDto1$Outbound,
    z.ZodTypeDef,
    IngestionUpdateContractDto1
> = z
    .object({
        dataset: IngestionUpdateContractDtoDataset$outboundSchema,
        columnMapping: z
            .lazy(() => IngestionUpdateContractDtoColumnMapping$outboundSchema)
            .optional(),
        type: IngestionUpdateContractDtoType$outboundSchema,
        sourceName: z.string().optional(),
        query: z.string().optional(),
        share: z.string().optional(),
        schema: z.string().optional(),
        table: z.string().optional(),
        enabled: z.boolean().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            columnMapping: "column_mapping",
            sourceName: "source_name",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IngestionUpdateContractDto1$ {
    /** @deprecated use `IngestionUpdateContractDto1$inboundSchema` instead. */
    export const inboundSchema = IngestionUpdateContractDto1$inboundSchema;
    /** @deprecated use `IngestionUpdateContractDto1$outboundSchema` instead. */
    export const outboundSchema = IngestionUpdateContractDto1$outboundSchema;
    /** @deprecated use `IngestionUpdateContractDto1$Outbound` instead. */
    export type Outbound = IngestionUpdateContractDto1$Outbound;
}

/** @internal */
export const IngestionUpdateContractDto$inboundSchema: z.ZodType<
    IngestionUpdateContractDto,
    z.ZodTypeDef,
    unknown
> = z.union([
    z.lazy(() => IngestionUpdateContractDto1$inboundSchema),
    z.lazy(() => IngestionUpdateContractDto2$inboundSchema),
    z.lazy(() => IngestionUpdateContractDto3$inboundSchema),
]);

/** @internal */
export type IngestionUpdateContractDto$Outbound =
    | IngestionUpdateContractDto1$Outbound
    | IngestionUpdateContractDto2$Outbound
    | IngestionUpdateContractDto3$Outbound;

/** @internal */
export const IngestionUpdateContractDto$outboundSchema: z.ZodType<
    IngestionUpdateContractDto$Outbound,
    z.ZodTypeDef,
    IngestionUpdateContractDto
> = z.union([
    z.lazy(() => IngestionUpdateContractDto1$outboundSchema),
    z.lazy(() => IngestionUpdateContractDto2$outboundSchema),
    z.lazy(() => IngestionUpdateContractDto3$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IngestionUpdateContractDto$ {
    /** @deprecated use `IngestionUpdateContractDto$inboundSchema` instead. */
    export const inboundSchema = IngestionUpdateContractDto$inboundSchema;
    /** @deprecated use `IngestionUpdateContractDto$outboundSchema` instead. */
    export const outboundSchema = IngestionUpdateContractDto$outboundSchema;
    /** @deprecated use `IngestionUpdateContractDto$Outbound` instead. */
    export type Outbound = IngestionUpdateContractDto$Outbound;
}

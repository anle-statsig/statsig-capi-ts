/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * Contract for environment override
 */
export type EnvironmentOverrides = {
    /**
     * Environment
     */
    environment?: any | null | undefined;
    /**
     * Unit ID
     */
    unitID?: any | null | undefined;
    /**
     * List of passing IDs
     */
    passingIDs: Array<string>;
    /**
     * List of failing IDs
     */
    failingIDs: Array<string>;
};

/**
 * Contract for overrides
 */
export type OverrideDto = {
    /**
     * List of user IDs
     */
    passingUserIDs: Array<string>;
    /**
     * List of user IDs
     */
    failingUserIDs: Array<string>;
    /**
     * Optional list of custom IDs
     */
    passingCustomIDs?: Array<string> | undefined;
    /**
     * Optional list of custom IDs
     */
    failingCustomIDs?: Array<string> | undefined;
    environmentOverrides: Array<EnvironmentOverrides>;
};

/** @internal */
export const EnvironmentOverrides$inboundSchema: z.ZodType<
    EnvironmentOverrides,
    z.ZodTypeDef,
    unknown
> = z.object({
    environment: z.nullable(z.any()).optional(),
    unitID: z.nullable(z.any()).optional(),
    passingIDs: z.array(z.string()),
    failingIDs: z.array(z.string()),
});

/** @internal */
export type EnvironmentOverrides$Outbound = {
    environment?: any | null | undefined;
    unitID?: any | null | undefined;
    passingIDs: Array<string>;
    failingIDs: Array<string>;
};

/** @internal */
export const EnvironmentOverrides$outboundSchema: z.ZodType<
    EnvironmentOverrides$Outbound,
    z.ZodTypeDef,
    EnvironmentOverrides
> = z.object({
    environment: z.nullable(z.any()).optional(),
    unitID: z.nullable(z.any()).optional(),
    passingIDs: z.array(z.string()),
    failingIDs: z.array(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOverrides$ {
    /** @deprecated use `EnvironmentOverrides$inboundSchema` instead. */
    export const inboundSchema = EnvironmentOverrides$inboundSchema;
    /** @deprecated use `EnvironmentOverrides$outboundSchema` instead. */
    export const outboundSchema = EnvironmentOverrides$outboundSchema;
    /** @deprecated use `EnvironmentOverrides$Outbound` instead. */
    export type Outbound = EnvironmentOverrides$Outbound;
}

/** @internal */
export const OverrideDto$inboundSchema: z.ZodType<OverrideDto, z.ZodTypeDef, unknown> = z.object({
    passingUserIDs: z.array(z.string()),
    failingUserIDs: z.array(z.string()),
    passingCustomIDs: z.array(z.string()).optional(),
    failingCustomIDs: z.array(z.string()).optional(),
    environmentOverrides: z.array(z.lazy(() => EnvironmentOverrides$inboundSchema)),
});

/** @internal */
export type OverrideDto$Outbound = {
    passingUserIDs: Array<string>;
    failingUserIDs: Array<string>;
    passingCustomIDs?: Array<string> | undefined;
    failingCustomIDs?: Array<string> | undefined;
    environmentOverrides: Array<EnvironmentOverrides$Outbound>;
};

/** @internal */
export const OverrideDto$outboundSchema: z.ZodType<
    OverrideDto$Outbound,
    z.ZodTypeDef,
    OverrideDto
> = z.object({
    passingUserIDs: z.array(z.string()),
    failingUserIDs: z.array(z.string()),
    passingCustomIDs: z.array(z.string()).optional(),
    failingCustomIDs: z.array(z.string()).optional(),
    environmentOverrides: z.array(z.lazy(() => EnvironmentOverrides$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OverrideDto$ {
    /** @deprecated use `OverrideDto$inboundSchema` instead. */
    export const inboundSchema = OverrideDto$inboundSchema;
    /** @deprecated use `OverrideDto$outboundSchema` instead. */
    export const outboundSchema = OverrideDto$outboundSchema;
    /** @deprecated use `OverrideDto$Outbound` instead. */
    export type Outbound = OverrideDto$Outbound;
}

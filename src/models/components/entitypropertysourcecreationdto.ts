/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";

export type IdTypeMapping = {
    /**
     * ID for the Statsig unit.
     */
    statsigUnitID: string;
    /**
     * Column name linked to the ID.
     */
    column: string;
};

export type EntityPropertySourceCreationDto = {
    /**
     * Unique identifier for the entity property source.
     */
    name: string;
    /**
     * Optional detailed context for the entity property source.
     */
    description?: string | undefined;
    /**
     * Optional tags for categorization.
     */
    tags?: Array<string> | undefined;
    /**
     * SQL query defining the data source.
     */
    sql: string;
    /**
     * Optional column name for timestamp.
     */
    timestampColumn?: string | undefined;
    /**
     * Indicates if the timestamp is treated as a day.
     */
    timestampAsDay?: boolean | undefined;
    /**
     * Mappings of Statsig units to their columns.
     */
    idTypeMapping: Array<IdTypeMapping>;
};

/** @internal */
export const IdTypeMapping$inboundSchema: z.ZodType<IdTypeMapping, z.ZodTypeDef, unknown> =
    z.object({
        statsigUnitID: z.string(),
        column: z.string(),
    });

/** @internal */
export type IdTypeMapping$Outbound = {
    statsigUnitID: string;
    column: string;
};

/** @internal */
export const IdTypeMapping$outboundSchema: z.ZodType<
    IdTypeMapping$Outbound,
    z.ZodTypeDef,
    IdTypeMapping
> = z.object({
    statsigUnitID: z.string(),
    column: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IdTypeMapping$ {
    /** @deprecated use `IdTypeMapping$inboundSchema` instead. */
    export const inboundSchema = IdTypeMapping$inboundSchema;
    /** @deprecated use `IdTypeMapping$outboundSchema` instead. */
    export const outboundSchema = IdTypeMapping$outboundSchema;
    /** @deprecated use `IdTypeMapping$Outbound` instead. */
    export type Outbound = IdTypeMapping$Outbound;
}

/** @internal */
export const EntityPropertySourceCreationDto$inboundSchema: z.ZodType<
    EntityPropertySourceCreationDto,
    z.ZodTypeDef,
    unknown
> = z.object({
    name: z.string(),
    description: z.string().optional(),
    tags: z.array(z.string()).optional(),
    sql: z.string(),
    timestampColumn: z.string().optional(),
    timestampAsDay: z.boolean().optional(),
    idTypeMapping: z.array(z.lazy(() => IdTypeMapping$inboundSchema)),
});

/** @internal */
export type EntityPropertySourceCreationDto$Outbound = {
    name: string;
    description?: string | undefined;
    tags?: Array<string> | undefined;
    sql: string;
    timestampColumn?: string | undefined;
    timestampAsDay?: boolean | undefined;
    idTypeMapping: Array<IdTypeMapping$Outbound>;
};

/** @internal */
export const EntityPropertySourceCreationDto$outboundSchema: z.ZodType<
    EntityPropertySourceCreationDto$Outbound,
    z.ZodTypeDef,
    EntityPropertySourceCreationDto
> = z.object({
    name: z.string(),
    description: z.string().optional(),
    tags: z.array(z.string()).optional(),
    sql: z.string(),
    timestampColumn: z.string().optional(),
    timestampAsDay: z.boolean().optional(),
    idTypeMapping: z.array(z.lazy(() => IdTypeMapping$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EntityPropertySourceCreationDto$ {
    /** @deprecated use `EntityPropertySourceCreationDto$inboundSchema` instead. */
    export const inboundSchema = EntityPropertySourceCreationDto$inboundSchema;
    /** @deprecated use `EntityPropertySourceCreationDto$outboundSchema` instead. */
    export const outboundSchema = EntityPropertySourceCreationDto$outboundSchema;
    /** @deprecated use `EntityPropertySourceCreationDto$Outbound` instead. */
    export type Outbound = EntityPropertySourceCreationDto$Outbound;
}

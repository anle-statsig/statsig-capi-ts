/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";

export type EntityPropertySourceDtoIdTypeMapping = {
    /**
     * ID for the Statsig unit.
     */
    statsigUnitID: string;
    /**
     * Column name linked to the ID.
     */
    column: string;
};

export type EntityPropertySourceDto = {
    /**
     * Unique identifier for the entity property source.
     */
    name: string;
    /**
     * Detailed context and purpose of the entity property source.
     */
    description: string;
    /**
     * Tags for categorization and search.
     */
    tags: Array<string>;
    /**
     * SQL query defining the data source.
     */
    sql: string;
    /**
     * Optional column name for timestamp.
     */
    timestampColumn?: string | undefined;
    /**
     * Indicates if the timestamp is treated as a day.
     */
    timestampAsDay?: boolean | undefined;
    /**
     * Mappings of Statsig units to their columns.
     */
    idTypeMapping: Array<EntityPropertySourceDtoIdTypeMapping>;
};

/** @internal */
export const EntityPropertySourceDtoIdTypeMapping$inboundSchema: z.ZodType<
    EntityPropertySourceDtoIdTypeMapping,
    z.ZodTypeDef,
    unknown
> = z.object({
    statsigUnitID: z.string(),
    column: z.string(),
});

/** @internal */
export type EntityPropertySourceDtoIdTypeMapping$Outbound = {
    statsigUnitID: string;
    column: string;
};

/** @internal */
export const EntityPropertySourceDtoIdTypeMapping$outboundSchema: z.ZodType<
    EntityPropertySourceDtoIdTypeMapping$Outbound,
    z.ZodTypeDef,
    EntityPropertySourceDtoIdTypeMapping
> = z.object({
    statsigUnitID: z.string(),
    column: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EntityPropertySourceDtoIdTypeMapping$ {
    /** @deprecated use `EntityPropertySourceDtoIdTypeMapping$inboundSchema` instead. */
    export const inboundSchema = EntityPropertySourceDtoIdTypeMapping$inboundSchema;
    /** @deprecated use `EntityPropertySourceDtoIdTypeMapping$outboundSchema` instead. */
    export const outboundSchema = EntityPropertySourceDtoIdTypeMapping$outboundSchema;
    /** @deprecated use `EntityPropertySourceDtoIdTypeMapping$Outbound` instead. */
    export type Outbound = EntityPropertySourceDtoIdTypeMapping$Outbound;
}

/** @internal */
export const EntityPropertySourceDto$inboundSchema: z.ZodType<
    EntityPropertySourceDto,
    z.ZodTypeDef,
    unknown
> = z.object({
    name: z.string(),
    description: z.string(),
    tags: z.array(z.string()),
    sql: z.string(),
    timestampColumn: z.string().optional(),
    timestampAsDay: z.boolean().optional(),
    idTypeMapping: z.array(z.lazy(() => EntityPropertySourceDtoIdTypeMapping$inboundSchema)),
});

/** @internal */
export type EntityPropertySourceDto$Outbound = {
    name: string;
    description: string;
    tags: Array<string>;
    sql: string;
    timestampColumn?: string | undefined;
    timestampAsDay?: boolean | undefined;
    idTypeMapping: Array<EntityPropertySourceDtoIdTypeMapping$Outbound>;
};

/** @internal */
export const EntityPropertySourceDto$outboundSchema: z.ZodType<
    EntityPropertySourceDto$Outbound,
    z.ZodTypeDef,
    EntityPropertySourceDto
> = z.object({
    name: z.string(),
    description: z.string(),
    tags: z.array(z.string()),
    sql: z.string(),
    timestampColumn: z.string().optional(),
    timestampAsDay: z.boolean().optional(),
    idTypeMapping: z.array(z.lazy(() => EntityPropertySourceDtoIdTypeMapping$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EntityPropertySourceDto$ {
    /** @deprecated use `EntityPropertySourceDto$inboundSchema` instead. */
    export const inboundSchema = EntityPropertySourceDto$inboundSchema;
    /** @deprecated use `EntityPropertySourceDto$outboundSchema` instead. */
    export const outboundSchema = EntityPropertySourceDto$outboundSchema;
    /** @deprecated use `EntityPropertySourceDto$Outbound` instead. */
    export type Outbound = EntityPropertySourceDto$Outbound;
}
